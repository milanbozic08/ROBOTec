
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000037e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  0000037e  00000412  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006d  0080006c  0080006c  0000041e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000041e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000450  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e75  00000000  00000000  000005b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000965  00000000  00000000  00001429  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009c9  00000000  00000000  00001d8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000274  00000000  00000000  00002758  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000053a  00000000  00000000  000029cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004ab  00000000  00000000  00002f06  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  000033b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 b4 00 	jmp	0x168	; 0x168 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e7       	ldi	r30, 0x7E	; 126
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 3d       	cpi	r26, 0xD9	; 217
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 6e 00 	call	0xdc	; 0xdc <main>
  8a:	0c 94 bd 01 	jmp	0x37a	; 0x37a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <HCSR04Init>:
		
		return (int)(TCNT2*coef);
	}
	
	return -1;
}
  92:	94 98       	cbi	0x12, 4	; 18
  94:	8c 9a       	sbi	0x11, 4	; 17
  96:	95 98       	cbi	0x12, 5	; 18
  98:	8d 98       	cbi	0x11, 5	; 17
  9a:	96 98       	cbi	0x12, 6	; 18
  9c:	8e 9a       	sbi	0x11, 6	; 17
  9e:	97 98       	cbi	0x12, 7	; 18
  a0:	8f 98       	cbi	0x11, 7	; 17
  a2:	08 95       	ret

000000a4 <HCSR04_Timer2_init>:
  a4:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__data_end>
  a8:	14 bc       	out	0x24, r1	; 36
  aa:	85 b5       	in	r24, 0x25	; 37
  ac:	84 60       	ori	r24, 0x04	; 4
  ae:	85 bd       	out	0x25, r24	; 37
  b0:	85 b5       	in	r24, 0x25	; 37
  b2:	81 60       	ori	r24, 0x01	; 1
  b4:	85 bd       	out	0x25, r24	; 37
  b6:	89 b7       	in	r24, 0x39	; 57
  b8:	80 64       	ori	r24, 0x40	; 64
  ba:	89 bf       	out	0x39, r24	; 57
  bc:	08 95       	ret

000000be <__vector_5>:

ISR(TIMER2_OVF_vect)
{
  be:	1f 92       	push	r1
  c0:	0f 92       	push	r0
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	0f 92       	push	r0
  c6:	11 24       	eor	r1, r1
  c8:	8f 93       	push	r24
	TimerTimeOut=true;
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
  d0:	8f 91       	pop	r24
  d2:	0f 90       	pop	r0
  d4:	0f be       	out	0x3f, r0	; 63
  d6:	0f 90       	pop	r0
  d8:	1f 90       	pop	r1
  da:	18 95       	reti

000000dc <main>:


int main(void)
{
	////UART INIT
	uart_clear();
  dc:	0e 94 58 01 	call	0x2b0	; 0x2b0 <uart_clear>
	Uart_inic();
  e0:	0e 94 2a 01 	call	0x254	; 0x254 <Uart_inic>
	////////////////
	
	///MOTOR INIT
	timer1_init();
  e4:	0e 94 86 00 	call	0x10c	; 0x10c <timer1_init>
	Motor_init();
  e8:	0e 94 91 00 	call	0x122	; 0x122 <Motor_init>
	///////////////////
	
	///HCRS04 INIT
	HCSR04_Timer2_init();
  ec:	0e 94 52 00 	call	0xa4	; 0xa4 <HCSR04_Timer2_init>
	HCSR04Init();
  f0:	0e 94 49 00 	call	0x92	; 0x92 <HCSR04Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f4:	8f e3       	ldi	r24, 0x3F	; 63
  f6:	9c e9       	ldi	r25, 0x9C	; 156
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <main+0x1c>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x22>
  fe:	00 00       	nop
	////////////////
	
	_delay_ms(10);
	uart_send_string("Start");		//UART TEST
 100:	86 e6       	ldi	r24, 0x66	; 102
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 42 01 	call	0x284	; 0x284 <uart_send_string>

	sei();					// OBAVEZNO (Ukljucuje prekide)
 108:	78 94       	sei
 10a:	ff cf       	rjmp	.-2      	; 0x10a <main+0x2e>

0000010c <timer1_init>:
{
	M_PWMLevi=X;
}
void MotorR_PWM_Set(int X)
{
	M_PWMDesni=X;
 10c:	8e b5       	in	r24, 0x2e	; 46
 10e:	82 60       	ori	r24, 0x02	; 2
 110:	8e bd       	out	0x2e, r24	; 46
 112:	8c ee       	ldi	r24, 0xEC	; 236
 114:	9f ef       	ldi	r25, 0xFF	; 255
 116:	9d bd       	out	0x2d, r25	; 45
 118:	8c bd       	out	0x2c, r24	; 44
 11a:	89 b7       	in	r24, 0x39	; 57
 11c:	84 60       	ori	r24, 0x04	; 4
 11e:	89 bf       	out	0x39, r24	; 57
 120:	08 95       	ret

00000122 <Motor_init>:
 122:	d4 9a       	sbi	0x1a, 4	; 26
 124:	d5 9a       	sbi	0x1a, 5	; 26
 126:	d6 9a       	sbi	0x1a, 6	; 26
 128:	d7 9a       	sbi	0x1a, 7	; 26
 12a:	dc 98       	cbi	0x1b, 4	; 27
 12c:	dd 98       	cbi	0x1b, 5	; 27
 12e:	de 98       	cbi	0x1b, 6	; 27
 130:	df 98       	cbi	0x1b, 7	; 27
 132:	08 95       	ret

00000134 <M_Levi_OFF>:
 134:	dc 98       	cbi	0x1b, 4	; 27
 136:	dd 98       	cbi	0x1b, 5	; 27
 138:	08 95       	ret

0000013a <M_Levi_ON>:
 13a:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <SmerL>
 13e:	81 11       	cpse	r24, r1
 140:	03 c0       	rjmp	.+6      	; 0x148 <M_Levi_ON+0xe>
 142:	dc 98       	cbi	0x1b, 4	; 27
 144:	dd 9a       	sbi	0x1b, 5	; 27
 146:	08 95       	ret
 148:	dc 9a       	sbi	0x1b, 4	; 27
 14a:	dd 98       	cbi	0x1b, 5	; 27
 14c:	08 95       	ret

0000014e <M_Desni_OFF>:
 14e:	df 98       	cbi	0x1b, 7	; 27
 150:	de 98       	cbi	0x1b, 6	; 27
 152:	08 95       	ret

00000154 <M_Desni_ON>:
 154:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <SmerR>
 158:	81 11       	cpse	r24, r1
 15a:	03 c0       	rjmp	.+6      	; 0x162 <M_Desni_ON+0xe>
 15c:	de 98       	cbi	0x1b, 6	; 27
 15e:	df 9a       	sbi	0x1b, 7	; 27
 160:	08 95       	ret
 162:	de 9a       	sbi	0x1b, 6	; 27
 164:	df 98       	cbi	0x1b, 7	; 27
 166:	08 95       	ret

00000168 <__vector_9>:
	MotorR_PWM_Set(PWM);
}


ISR(TIMER1_OVF_vect)			// motori su na 50Hz sa rasponom PWM od 0-1000 na f od 8Mhz
{
 168:	1f 92       	push	r1
 16a:	0f 92       	push	r0
 16c:	0f b6       	in	r0, 0x3f	; 63
 16e:	0f 92       	push	r0
 170:	11 24       	eor	r1, r1
 172:	2f 93       	push	r18
 174:	3f 93       	push	r19
 176:	4f 93       	push	r20
 178:	5f 93       	push	r21
 17a:	6f 93       	push	r22
 17c:	7f 93       	push	r23
 17e:	8f 93       	push	r24
 180:	9f 93       	push	r25
 182:	af 93       	push	r26
 184:	bf 93       	push	r27
 186:	ef 93       	push	r30
 188:	ff 93       	push	r31
	
	cli();
 18a:	f8 94       	cli
	
	TCNT1 = 65536-20;
 18c:	8c ee       	ldi	r24, 0xEC	; 236
 18e:	9f ef       	ldi	r25, 0xFF	; 255
 190:	9d bd       	out	0x2d, r25	; 45
 192:	8c bd       	out	0x2c, r24	; 44
		tmr=0;
	}*/
	
	
	//////////Brojaci
	M_TimerLevi++;
 194:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <M_TimerLevi>
 198:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <M_TimerLevi+0x1>
 19c:	01 96       	adiw	r24, 0x01	; 1
 19e:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <M_TimerLevi+0x1>
 1a2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <M_TimerLevi>
	M_TimerDesni++;
 1a6:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <M_TimerDesni>
 1aa:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <M_TimerDesni+0x1>
 1ae:	01 96       	adiw	r24, 0x01	; 1
 1b0:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <M_TimerDesni+0x1>
 1b4:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <M_TimerDesni>

	/////////MOTOR Levi
	if(M_TimerLevi==M_PWMLevi)
 1b8:	20 91 6f 00 	lds	r18, 0x006F	; 0x80006f <M_TimerLevi>
 1bc:	30 91 70 00 	lds	r19, 0x0070	; 0x800070 <M_TimerLevi+0x1>
 1c0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <M_PWMLevi>
 1c4:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <M_PWMLevi+0x1>
 1c8:	28 17       	cp	r18, r24
 1ca:	39 07       	cpc	r19, r25
 1cc:	11 f4       	brne	.+4      	; 0x1d2 <__vector_9+0x6a>
	{
		
		M_Levi_OFF();
 1ce:	0e 94 9a 00 	call	0x134	; 0x134 <M_Levi_OFF>
	}
	if(M_TimerLevi>PWMRange && EnableMotors)
 1d2:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <M_TimerLevi>
 1d6:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <M_TimerLevi+0x1>
 1da:	89 3e       	cpi	r24, 0xE9	; 233
 1dc:	93 40       	sbci	r25, 0x03	; 3
 1de:	54 f0       	brlt	.+20     	; 0x1f4 <__vector_9+0x8c>
 1e0:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <EnableMotors>
 1e4:	88 23       	and	r24, r24
 1e6:	31 f0       	breq	.+12     	; 0x1f4 <__vector_9+0x8c>
	{
		M_Levi_ON();
 1e8:	0e 94 9d 00 	call	0x13a	; 0x13a <M_Levi_ON>
		M_TimerLevi=0;
 1ec:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <M_TimerLevi+0x1>
 1f0:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <M_TimerLevi>
	}
	//////////Motor Desni
	if(M_TimerDesni==M_PWMDesni)
 1f4:	20 91 6d 00 	lds	r18, 0x006D	; 0x80006d <M_TimerDesni>
 1f8:	30 91 6e 00 	lds	r19, 0x006E	; 0x80006e <M_TimerDesni+0x1>
 1fc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <M_PWMDesni>
 200:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <M_PWMDesni+0x1>
 204:	28 17       	cp	r18, r24
 206:	39 07       	cpc	r19, r25
 208:	11 f4       	brne	.+4      	; 0x20e <__vector_9+0xa6>
	{
		M_Desni_OFF();
 20a:	0e 94 a7 00 	call	0x14e	; 0x14e <M_Desni_OFF>
	}
	if(M_TimerDesni>PWMRange && EnableMotors)
 20e:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <M_TimerDesni>
 212:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <M_TimerDesni+0x1>
 216:	89 3e       	cpi	r24, 0xE9	; 233
 218:	93 40       	sbci	r25, 0x03	; 3
 21a:	54 f0       	brlt	.+20     	; 0x230 <__vector_9+0xc8>
 21c:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <EnableMotors>
 220:	88 23       	and	r24, r24
 222:	31 f0       	breq	.+12     	; 0x230 <__vector_9+0xc8>
	{
		M_Desni_ON();
 224:	0e 94 aa 00 	call	0x154	; 0x154 <M_Desni_ON>
		M_TimerDesni=0;
 228:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <M_TimerDesni+0x1>
 22c:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <M_TimerDesni>
	}




	sei();
 230:	78 94       	sei
 232:	ff 91       	pop	r31
 234:	ef 91       	pop	r30
 236:	bf 91       	pop	r27
 238:	af 91       	pop	r26
 23a:	9f 91       	pop	r25
 23c:	8f 91       	pop	r24
 23e:	7f 91       	pop	r23
 240:	6f 91       	pop	r22
 242:	5f 91       	pop	r21
 244:	4f 91       	pop	r20
 246:	3f 91       	pop	r19
 248:	2f 91       	pop	r18
 24a:	0f 90       	pop	r0
 24c:	0f be       	out	0x3f, r0	; 63
 24e:	0f 90       	pop	r0
 250:	1f 90       	pop	r1
 252:	18 95       	reti

00000254 <Uart_inic>:
}

bool uart_full()	// ako je false onda nista nije stiglo ...
{
	return ResivedOK;
}
 254:	90 9a       	sbi	0x12, 0	; 18
 256:	88 98       	cbi	0x11, 0	; 17
 258:	89 9a       	sbi	0x11, 1	; 17
 25a:	10 bc       	out	0x20, r1	; 32
 25c:	87 e6       	ldi	r24, 0x67	; 103
 25e:	89 b9       	out	0x09, r24	; 9
 260:	8a b1       	in	r24, 0x0a	; 10
 262:	88 61       	ori	r24, 0x18	; 24
 264:	8a b9       	out	0x0a, r24	; 10
 266:	57 9a       	sbi	0x0a, 7	; 10
 268:	80 b5       	in	r24, 0x20	; 32
 26a:	86 68       	ori	r24, 0x86	; 134
 26c:	80 bd       	out	0x20, r24	; 32
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	fc 01       	movw	r30, r24
 274:	eb 58       	subi	r30, 0x8B	; 139
 276:	ff 4f       	sbci	r31, 0xFF	; 255
 278:	10 82       	st	Z, r1
 27a:	01 96       	adiw	r24, 0x01	; 1
 27c:	84 36       	cpi	r24, 0x64	; 100
 27e:	91 05       	cpc	r25, r1
 280:	c1 f7       	brne	.-16     	; 0x272 <Uart_inic+0x1e>
 282:	08 95       	ret

00000284 <uart_send_string>:
 284:	fc 01       	movw	r30, r24
 286:	dc 01       	movw	r26, r24
 288:	0d 90       	ld	r0, X+
 28a:	00 20       	and	r0, r0
 28c:	e9 f7       	brne	.-6      	; 0x288 <uart_send_string+0x4>
 28e:	11 97       	sbiw	r26, 0x01	; 1
 290:	9d 01       	movw	r18, r26
 292:	28 1b       	sub	r18, r24
 294:	39 0b       	sbc	r19, r25
 296:	12 16       	cp	r1, r18
 298:	13 06       	cpc	r1, r19
 29a:	4c f4       	brge	.+18     	; 0x2ae <uart_send_string+0x2a>
 29c:	28 0f       	add	r18, r24
 29e:	39 1f       	adc	r19, r25
 2a0:	5d 9b       	sbis	0x0b, 5	; 11
 2a2:	fe cf       	rjmp	.-4      	; 0x2a0 <uart_send_string+0x1c>
 2a4:	81 91       	ld	r24, Z+
 2a6:	8c b9       	out	0x0c, r24	; 12
 2a8:	2e 17       	cp	r18, r30
 2aa:	3f 07       	cpc	r19, r31
 2ac:	c9 f7       	brne	.-14     	; 0x2a0 <uart_send_string+0x1c>
 2ae:	08 95       	ret

000002b0 <uart_clear>:

void uart_clear()
{
	ResivedOK=false;
 2b0:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <ResivedOK>
	
	for(int k=0;k<100;k++)
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	90 e0       	ldi	r25, 0x00	; 0
	{
		Resive[k]='\0';
 2b8:	fc 01       	movw	r30, r24
 2ba:	eb 58       	subi	r30, 0x8B	; 139
 2bc:	ff 4f       	sbci	r31, 0xFF	; 255
 2be:	10 82       	st	Z, r1

void uart_clear()
{
	ResivedOK=false;
	
	for(int k=0;k<100;k++)
 2c0:	01 96       	adiw	r24, 0x01	; 1
 2c2:	84 36       	cpi	r24, 0x64	; 100
 2c4:	91 05       	cpc	r25, r1
 2c6:	c1 f7       	brne	.-16     	; 0x2b8 <uart_clear+0x8>
	{
		Resive[k]='\0';
	}

	brojcanik=-1;
 2c8:	8f ef       	ldi	r24, 0xFF	; 255
 2ca:	9f ef       	ldi	r25, 0xFF	; 255
 2cc:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <brojcanik+0x1>
 2d0:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <brojcanik>
 2d4:	08 95       	ret

000002d6 <__vector_13>:
}

ISR (USART_RXC_vect)
{		
 2d6:	1f 92       	push	r1
 2d8:	0f 92       	push	r0
 2da:	0f b6       	in	r0, 0x3f	; 63
 2dc:	0f 92       	push	r0
 2de:	11 24       	eor	r1, r1
 2e0:	8f 93       	push	r24
 2e2:	9f 93       	push	r25
 2e4:	ef 93       	push	r30
 2e6:	ff 93       	push	r31
		brojcanik++;										
 2e8:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <brojcanik>
 2ec:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <brojcanik+0x1>
 2f0:	01 96       	adiw	r24, 0x01	; 1
 2f2:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <brojcanik+0x1>
 2f6:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <brojcanik>
		if(brojcanik>99) brojcanik=99;											//ne daj prepunjavanje bafera
 2fa:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <brojcanik>
 2fe:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <brojcanik+0x1>
 302:	84 36       	cpi	r24, 0x64	; 100
 304:	91 05       	cpc	r25, r1
 306:	34 f0       	brlt	.+12     	; 0x314 <__vector_13+0x3e>
 308:	83 e6       	ldi	r24, 0x63	; 99
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <brojcanik+0x1>
 310:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <brojcanik>
	
		Resive[brojcanik]=UDR;
 314:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <brojcanik>
 318:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <brojcanik+0x1>
 31c:	8c b1       	in	r24, 0x0c	; 12
 31e:	eb 58       	subi	r30, 0x8B	; 139
 320:	ff 4f       	sbci	r31, 0xFF	; 255
 322:	80 83       	st	Z, r24
		
		if(Resive[brojcanik]=='\r' || Resive[brojcanik]=='\n')
 324:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <brojcanik>
 328:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <brojcanik+0x1>
 32c:	eb 58       	subi	r30, 0x8B	; 139
 32e:	ff 4f       	sbci	r31, 0xFF	; 255
 330:	80 81       	ld	r24, Z
 332:	8d 30       	cpi	r24, 0x0D	; 13
 334:	49 f0       	breq	.+18     	; 0x348 <__vector_13+0x72>
 336:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <brojcanik>
 33a:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <brojcanik+0x1>
 33e:	eb 58       	subi	r30, 0x8B	; 139
 340:	ff 4f       	sbci	r31, 0xFF	; 255
 342:	80 81       	ld	r24, Z
 344:	8a 30       	cpi	r24, 0x0A	; 10
 346:	81 f4       	brne	.+32     	; 0x368 <__vector_13+0x92>
		{
			Resive[brojcanik]='\0';
 348:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <brojcanik>
 34c:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <brojcanik+0x1>
 350:	eb 58       	subi	r30, 0x8B	; 139
 352:	ff 4f       	sbci	r31, 0xFF	; 255
 354:	10 82       	st	Z, r1

			brojcanik=-1;
 356:	8f ef       	ldi	r24, 0xFF	; 255
 358:	9f ef       	ldi	r25, 0xFF	; 255
 35a:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <brojcanik+0x1>
 35e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <brojcanik>

			ResivedOK=true;
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <ResivedOK>
		}	
 368:	ff 91       	pop	r31
 36a:	ef 91       	pop	r30
 36c:	9f 91       	pop	r25
 36e:	8f 91       	pop	r24
 370:	0f 90       	pop	r0
 372:	0f be       	out	0x3f, r0	; 63
 374:	0f 90       	pop	r0
 376:	1f 90       	pop	r1
 378:	18 95       	reti

0000037a <_exit>:
 37a:	f8 94       	cli

0000037c <__stop_program>:
 37c:	ff cf       	rjmp	.-2      	; 0x37c <__stop_program>
