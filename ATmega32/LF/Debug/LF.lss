
LF.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001058  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00001058  000010ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000086  00800074  00800074  00001100  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001100  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001130  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  0000116c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000144f  00000000  00000000  000012ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b85  00000000  00000000  0000273b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000df8  00000000  00000000  000032c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000390  00000000  00000000  000040b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005d3  00000000  00000000  00004448  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c37  00000000  00000000  00004a1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00005652  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 c1 00 	jmp	0x182	; 0x182 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 54 03 	jmp	0x6a8	; 0x6a8 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e5       	ldi	r30, 0x58	; 88
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3f       	cpi	r26, 0xFA	; 250
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 00 	call	0x92	; 0x92 <main>
      8a:	0c 94 2a 08 	jmp	0x1054	; 0x1054 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:


int main(void)
{
	////UART INIT
	uart_clear();
      92:	0e 94 41 03 	call	0x682	; 0x682 <uart_clear>
	Uart_inic();
      96:	0e 94 25 03 	call	0x64a	; 0x64a <Uart_inic>
	////////////////
	
	///MOTOR INIT
	timer1_init();
      9a:	0e 94 64 00 	call	0xc8	; 0xc8 <timer1_init>
	Motor_init();
      9e:	0e 94 6f 00 	call	0xde	; 0xde <Motor_init>
	///////////////////
	
	///SENZORI INIT
	SenzorInit();
      a2:	0e 94 bd 02 	call	0x57a	; 0x57a <SenzorInit>
	//////////////////
	
	/// LED TEST INIT
	DDRB |= (1<<0);
      a6:	b8 9a       	sbi	0x17, 0	; 23
	//////////////////

	sei();					// OBAVEZNO (Ukljucuje prekide)
      a8:	78 94       	sei
	
    while (1) 
    {
		if(uart_full())
      aa:	0e 94 3e 03 	call	0x67c	; 0x67c <uart_full>
      ae:	88 23       	and	r24, r24
      b0:	21 f0       	breq	.+8      	; 0xba <main+0x28>
		{
			RecognizeMSG();
      b2:	0e 94 a6 03 	call	0x74c	; 0x74c <RecognizeMSG>
			uart_clear();
      b6:	0e 94 41 03 	call	0x682	; 0x682 <uart_clear>
		}
		
 		KontrolaMotora();
      ba:	0e 94 a0 02 	call	0x540	; 0x540 <KontrolaMotora>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      be:	85 e3       	ldi	r24, 0x35	; 53
      c0:	8a 95       	dec	r24
      c2:	f1 f7       	brne	.-4      	; 0xc0 <main+0x2e>
      c4:	00 00       	nop
      c6:	f1 cf       	rjmp	.-30     	; 0xaa <main+0x18>

000000c8 <timer1_init>:
{
	SmerL=X;
}
void MotorR_Smer_Set(direction X)
{
	SmerR=X;
      c8:	8e b5       	in	r24, 0x2e	; 46
      ca:	82 60       	ori	r24, 0x02	; 2
      cc:	8e bd       	out	0x2e, r24	; 46
      ce:	8c ee       	ldi	r24, 0xEC	; 236
      d0:	9f ef       	ldi	r25, 0xFF	; 255
      d2:	9d bd       	out	0x2d, r25	; 45
      d4:	8c bd       	out	0x2c, r24	; 44
      d6:	89 b7       	in	r24, 0x39	; 57
      d8:	84 60       	ori	r24, 0x04	; 4
      da:	89 bf       	out	0x39, r24	; 57
      dc:	08 95       	ret

000000de <Motor_init>:
      de:	8c 9a       	sbi	0x11, 4	; 17
      e0:	8d 9a       	sbi	0x11, 5	; 17
      e2:	8e 9a       	sbi	0x11, 6	; 17
      e4:	8f 9a       	sbi	0x11, 7	; 17
      e6:	94 98       	cbi	0x12, 4	; 18
      e8:	95 98       	cbi	0x12, 5	; 18
      ea:	96 98       	cbi	0x12, 6	; 18
      ec:	97 98       	cbi	0x12, 7	; 18
      ee:	08 95       	ret

000000f0 <M_Levi_OFF>:
      f0:	94 98       	cbi	0x12, 4	; 18
      f2:	95 98       	cbi	0x12, 5	; 18
      f4:	08 95       	ret

000000f6 <M_Levi_ON>:
      f6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <SmerL>
      fa:	81 11       	cpse	r24, r1
      fc:	03 c0       	rjmp	.+6      	; 0x104 <M_Levi_ON+0xe>
      fe:	94 98       	cbi	0x12, 4	; 18
     100:	95 9a       	sbi	0x12, 5	; 18
     102:	08 95       	ret
     104:	94 9a       	sbi	0x12, 4	; 18
     106:	95 98       	cbi	0x12, 5	; 18
     108:	08 95       	ret

0000010a <M_Desni_OFF>:
     10a:	97 98       	cbi	0x12, 7	; 18
     10c:	96 98       	cbi	0x12, 6	; 18
     10e:	08 95       	ret

00000110 <M_Desni_ON>:
     110:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <SmerR>
     114:	81 11       	cpse	r24, r1
     116:	03 c0       	rjmp	.+6      	; 0x11e <M_Desni_ON+0xe>
     118:	96 98       	cbi	0x12, 6	; 18
     11a:	97 9a       	sbi	0x12, 7	; 18
     11c:	08 95       	ret
     11e:	96 9a       	sbi	0x12, 6	; 18
     120:	97 98       	cbi	0x12, 7	; 18
     122:	08 95       	ret

00000124 <MotorL_PWM_Set>:
}
void MotorL_PWM_Set(int X)
{
     124:	88 3e       	cpi	r24, 0xE8	; 232
     126:	23 e0       	ldi	r18, 0x03	; 3
     128:	92 07       	cpc	r25, r18
     12a:	14 f0       	brlt	.+4      	; 0x130 <MotorL_PWM_Set+0xc>
     12c:	87 ee       	ldi	r24, 0xE7	; 231
     12e:	93 e0       	ldi	r25, 0x03	; 3
	if(X> (PWMRange-1) ) X=(PWMRange-1);
	if(X<1) X=1;
     130:	18 16       	cp	r1, r24
     132:	19 06       	cpc	r1, r25
     134:	14 f0       	brlt	.+4      	; 0x13a <MotorL_PWM_Set+0x16>
     136:	81 e0       	ldi	r24, 0x01	; 1
     138:	90 e0       	ldi	r25, 0x00	; 0
	
	M_PWMLevi=X;
     13a:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <M_PWMLevi+0x1>
     13e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <M_PWMLevi>
     142:	08 95       	ret

00000144 <MotorR_PWM_Set>:
}
void MotorR_PWM_Set(int X)
{
     144:	88 3e       	cpi	r24, 0xE8	; 232
     146:	23 e0       	ldi	r18, 0x03	; 3
     148:	92 07       	cpc	r25, r18
     14a:	14 f0       	brlt	.+4      	; 0x150 <MotorR_PWM_Set+0xc>
     14c:	87 ee       	ldi	r24, 0xE7	; 231
     14e:	93 e0       	ldi	r25, 0x03	; 3
	if(X> (PWMRange-1) ) X=(PWMRange-1);
	if(X<1) X=1;
     150:	18 16       	cp	r1, r24
     152:	19 06       	cpc	r1, r25
     154:	14 f0       	brlt	.+4      	; 0x15a <MotorR_PWM_Set+0x16>
     156:	81 e0       	ldi	r24, 0x01	; 1
     158:	90 e0       	ldi	r25, 0x00	; 0
	 
	M_PWMDesni=X;
     15a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <M_PWMDesni+0x1>
     15e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <M_PWMDesni>
     162:	08 95       	ret

00000164 <MotorStart>:
}
void MotorStart(bool X)
{
	EnableMotors=X;
     164:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <EnableMotors>
     168:	08 95       	ret

0000016a <MotorL_Setup>:
	}
}

void MotorL_Smer_Set(direction X)
{
	SmerL=X;
     16a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <SmerL>
}

void MotorL_Setup(direction SMER,int PWM)
{
	MotorL_Smer_Set(SMER);
	MotorL_PWM_Set(PWM);
     16e:	cb 01       	movw	r24, r22
     170:	0e 94 92 00 	call	0x124	; 0x124 <MotorL_PWM_Set>
     174:	08 95       	ret

00000176 <MotorR_Setup>:
{
	SmerL=X;
}
void MotorR_Smer_Set(direction X)
{
	SmerR=X;
     176:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <SmerR>
	MotorL_PWM_Set(PWM);
}
void MotorR_Setup(direction SMER,int PWM)
{
	MotorR_Smer_Set(SMER);
	MotorR_PWM_Set(PWM);
     17a:	cb 01       	movw	r24, r22
     17c:	0e 94 a2 00 	call	0x144	; 0x144 <MotorR_PWM_Set>
     180:	08 95       	ret

00000182 <__vector_9>:
}


ISR(TIMER1_OVF_vect)			// motori su na 50Hz sa rasponom PWM od 0-1000 na f od 8Mhz
{
     182:	1f 92       	push	r1
     184:	0f 92       	push	r0
     186:	0f b6       	in	r0, 0x3f	; 63
     188:	0f 92       	push	r0
     18a:	11 24       	eor	r1, r1
     18c:	2f 93       	push	r18
     18e:	3f 93       	push	r19
     190:	4f 93       	push	r20
     192:	5f 93       	push	r21
     194:	6f 93       	push	r22
     196:	7f 93       	push	r23
     198:	8f 93       	push	r24
     19a:	9f 93       	push	r25
     19c:	af 93       	push	r26
     19e:	bf 93       	push	r27
     1a0:	ef 93       	push	r30
     1a2:	ff 93       	push	r31
	cli();
     1a4:	f8 94       	cli
	
	TCNT1 = 65536-20;
     1a6:	8c ee       	ldi	r24, 0xEC	; 236
     1a8:	9f ef       	ldi	r25, 0xFF	; 255
     1aa:	9d bd       	out	0x2d, r25	; 45
     1ac:	8c bd       	out	0x2c, r24	; 44
		tmr=0;
	}*/
	
	
	//////////Brojaci
	M_TimerLevi++;
     1ae:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <M_TimerLevi>
     1b2:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <M_TimerLevi+0x1>
     1b6:	01 96       	adiw	r24, 0x01	; 1
     1b8:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <M_TimerLevi+0x1>
     1bc:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <M_TimerLevi>
	M_TimerDesni++;
     1c0:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
     1c4:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <__data_end+0x1>
     1c8:	01 96       	adiw	r24, 0x01	; 1
     1ca:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <__data_end+0x1>
     1ce:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__data_end>

	/////////MOTOR Levi
	if(M_TimerLevi==M_PWMLevi)
     1d2:	20 91 76 00 	lds	r18, 0x0076	; 0x800076 <M_TimerLevi>
     1d6:	30 91 77 00 	lds	r19, 0x0077	; 0x800077 <M_TimerLevi+0x1>
     1da:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <M_PWMLevi>
     1de:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <M_PWMLevi+0x1>
     1e2:	28 17       	cp	r18, r24
     1e4:	39 07       	cpc	r19, r25
     1e6:	11 f4       	brne	.+4      	; 0x1ec <__vector_9+0x6a>
	{
		
		M_Levi_OFF();
     1e8:	0e 94 78 00 	call	0xf0	; 0xf0 <M_Levi_OFF>
	}
	if(M_TimerLevi>PWMRange && EnableMotors)
     1ec:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <M_TimerLevi>
     1f0:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <M_TimerLevi+0x1>
     1f4:	89 3e       	cpi	r24, 0xE9	; 233
     1f6:	93 40       	sbci	r25, 0x03	; 3
     1f8:	54 f0       	brlt	.+20     	; 0x20e <__vector_9+0x8c>
     1fa:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <EnableMotors>
     1fe:	88 23       	and	r24, r24
     200:	31 f0       	breq	.+12     	; 0x20e <__vector_9+0x8c>
	{
		M_Levi_ON();
     202:	0e 94 7b 00 	call	0xf6	; 0xf6 <M_Levi_ON>
		M_TimerLevi=0;
     206:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <M_TimerLevi+0x1>
     20a:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <M_TimerLevi>
	}
	//////////Motor Desni
	if(M_TimerDesni==M_PWMDesni)
     20e:	20 91 74 00 	lds	r18, 0x0074	; 0x800074 <__data_end>
     212:	30 91 75 00 	lds	r19, 0x0075	; 0x800075 <__data_end+0x1>
     216:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <M_PWMDesni>
     21a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <M_PWMDesni+0x1>
     21e:	28 17       	cp	r18, r24
     220:	39 07       	cpc	r19, r25
     222:	11 f4       	brne	.+4      	; 0x228 <__vector_9+0xa6>
	{
		M_Desni_OFF();
     224:	0e 94 85 00 	call	0x10a	; 0x10a <M_Desni_OFF>
	}
	if(M_TimerDesni>PWMRange && EnableMotors)
     228:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
     22c:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <__data_end+0x1>
     230:	89 3e       	cpi	r24, 0xE9	; 233
     232:	93 40       	sbci	r25, 0x03	; 3
     234:	54 f0       	brlt	.+20     	; 0x24a <__vector_9+0xc8>
     236:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <EnableMotors>
     23a:	88 23       	and	r24, r24
     23c:	31 f0       	breq	.+12     	; 0x24a <__vector_9+0xc8>
	{
		M_Desni_ON();
     23e:	0e 94 88 00 	call	0x110	; 0x110 <M_Desni_ON>
		M_TimerDesni=0;
     242:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <__data_end+0x1>
     246:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <__data_end>
	}

	sei();
     24a:	78 94       	sei
     24c:	ff 91       	pop	r31
     24e:	ef 91       	pop	r30
     250:	bf 91       	pop	r27
     252:	af 91       	pop	r26
     254:	9f 91       	pop	r25
     256:	8f 91       	pop	r24
     258:	7f 91       	pop	r23
     25a:	6f 91       	pop	r22
     25c:	5f 91       	pop	r21
     25e:	4f 91       	pop	r20
     260:	3f 91       	pop	r19
     262:	2f 91       	pop	r18
     264:	0f 90       	pop	r0
     266:	0f be       	out	0x3f, r0	; 63
     268:	0f 90       	pop	r0
     26a:	1f 90       	pop	r1
     26c:	18 95       	reti

0000026e <PID_reg>:
	{PWM=3*PWMZadato/4;	return;}
	
	PWM=PWMZadato/2-(Kpb/1000.0*greska*PWMZadato);
}

int PID_reg(){
     26e:	4f 92       	push	r4
     270:	5f 92       	push	r5
     272:	6f 92       	push	r6
     274:	7f 92       	push	r7
     276:	8f 92       	push	r8
     278:	9f 92       	push	r9
     27a:	af 92       	push	r10
     27c:	bf 92       	push	r11
     27e:	cf 92       	push	r12
     280:	df 92       	push	r13
     282:	ef 92       	push	r14
     284:	ff 92       	push	r15
     286:	cf 93       	push	r28
     288:	df 93       	push	r29
     28a:	00 d0       	rcall	.+0      	; 0x28c <PID_reg+0x1e>
     28c:	00 d0       	rcall	.+0      	; 0x28e <PID_reg+0x20>
     28e:	00 d0       	rcall	.+0      	; 0x290 <PID_reg+0x22>
     290:	cd b7       	in	r28, 0x3d	; 61
     292:	de b7       	in	r29, 0x3e	; 62
	
	float e=0;              //greska
	float incKp=0;          //inkrementalni deo uz Kp
	float incKd=0;          //inkrementalni deo uz Kd
	
	e=ReadOptoSenzor();    //merenje stvarne vrednosti
     294:	0e 94 c1 02 	call	0x582	; 0x582 <ReadOptoSenzor>
     298:	bc 01       	movw	r22, r24
     29a:	99 0f       	add	r25, r25
     29c:	88 0b       	sbc	r24, r24
     29e:	99 0b       	sbc	r25, r25
     2a0:	0e 94 08 07 	call	0xe10	; 0xe10 <__floatsisf>
     2a4:	6b 01       	movw	r12, r22
     2a6:	7c 01       	movw	r14, r24
	
	//---------------
	//Brzinska regulacija
	//BrzinskaRegulacija(e);
	///////////////////////////////
	PWM=PWMZadato;
     2a8:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <PWMZadato>
     2ac:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <PWMZadato+0x1>
     2b0:	9e 83       	std	Y+6, r25	; 0x06
     2b2:	8d 83       	std	Y+5, r24	; 0x05
     2b4:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <PWM+0x1>
     2b8:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <PWM>
	
	
	incKi += Ki*e;     //inkrementalni deo uz Kp
     2bc:	20 91 7f 00 	lds	r18, 0x007F	; 0x80007f <Ki>
     2c0:	30 91 80 00 	lds	r19, 0x0080	; 0x800080 <Ki+0x1>
     2c4:	40 91 81 00 	lds	r20, 0x0081	; 0x800081 <Ki+0x2>
     2c8:	50 91 82 00 	lds	r21, 0x0082	; 0x800082 <Ki+0x3>
     2cc:	c7 01       	movw	r24, r14
     2ce:	b6 01       	movw	r22, r12
     2d0:	0e 94 bd 07 	call	0xf7a	; 0xf7a <__mulsf3>
     2d4:	20 91 8f 00 	lds	r18, 0x008F	; 0x80008f <incKi>
     2d8:	30 91 90 00 	lds	r19, 0x0090	; 0x800090 <incKi+0x1>
     2dc:	40 91 91 00 	lds	r20, 0x0091	; 0x800091 <incKi+0x2>
     2e0:	50 91 92 00 	lds	r21, 0x0092	; 0x800092 <incKi+0x3>
     2e4:	0e 94 ed 05 	call	0xbda	; 0xbda <__addsf3>
     2e8:	4b 01       	movw	r8, r22
     2ea:	5c 01       	movw	r10, r24
     2ec:	60 93 8f 00 	sts	0x008F, r22	; 0x80008f <incKi>
     2f0:	70 93 90 00 	sts	0x0090, r23	; 0x800090 <incKi+0x1>
     2f4:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <incKi+0x2>
     2f8:	90 93 92 00 	sts	0x0092, r25	; 0x800092 <incKi+0x3>
	if(incKi>150) incKi=150;
     2fc:	20 e0       	ldi	r18, 0x00	; 0
     2fe:	30 e0       	ldi	r19, 0x00	; 0
     300:	46 e1       	ldi	r20, 0x16	; 22
     302:	53 e4       	ldi	r21, 0x43	; 67
     304:	0e 94 b8 07 	call	0xf70	; 0xf70 <__gesf2>
     308:	18 16       	cp	r1, r24
     30a:	6c f4       	brge	.+26     	; 0x326 <PID_reg+0xb8>
     30c:	80 e0       	ldi	r24, 0x00	; 0
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	a6 e1       	ldi	r26, 0x16	; 22
     312:	b3 e4       	ldi	r27, 0x43	; 67
     314:	80 93 8f 00 	sts	0x008F, r24	; 0x80008f <incKi>
     318:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <incKi+0x1>
     31c:	a0 93 91 00 	sts	0x0091, r26	; 0x800091 <incKi+0x2>
     320:	b0 93 92 00 	sts	0x0092, r27	; 0x800092 <incKi+0x3>
     324:	16 c0       	rjmp	.+44     	; 0x352 <PID_reg+0xe4>
	if(incKi<-150) incKi=-150;
     326:	20 e0       	ldi	r18, 0x00	; 0
     328:	30 e0       	ldi	r19, 0x00	; 0
     32a:	46 e1       	ldi	r20, 0x16	; 22
     32c:	53 ec       	ldi	r21, 0xC3	; 195
     32e:	c5 01       	movw	r24, r10
     330:	b4 01       	movw	r22, r8
     332:	0e 94 59 06 	call	0xcb2	; 0xcb2 <__cmpsf2>
     336:	88 23       	and	r24, r24
     338:	64 f4       	brge	.+24     	; 0x352 <PID_reg+0xe4>
     33a:	80 e0       	ldi	r24, 0x00	; 0
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	a6 e1       	ldi	r26, 0x16	; 22
     340:	b3 ec       	ldi	r27, 0xC3	; 195
     342:	80 93 8f 00 	sts	0x008F, r24	; 0x80008f <incKi>
     346:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <incKi+0x1>
     34a:	a0 93 91 00 	sts	0x0091, r26	; 0x800091 <incKi+0x2>
     34e:	b0 93 92 00 	sts	0x0092, r27	; 0x800092 <incKi+0x3>
	
	incKp = Kp*e;             //inkrementalni deo uz Ki
     352:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <Kp>
     356:	30 91 6f 00 	lds	r19, 0x006F	; 0x80006f <Kp+0x1>
     35a:	40 91 70 00 	lds	r20, 0x0070	; 0x800070 <Kp+0x2>
     35e:	50 91 71 00 	lds	r21, 0x0071	; 0x800071 <Kp+0x3>
     362:	c7 01       	movw	r24, r14
     364:	b6 01       	movw	r22, r12
     366:	0e 94 bd 07 	call	0xf7a	; 0xf7a <__mulsf3>
     36a:	2b 01       	movw	r4, r22
     36c:	3c 01       	movw	r6, r24
	
	incKd = Kd*(e-2*e_old+e+e_old2);     //inkrementalni deo uz Kd
     36e:	80 90 8b 00 	lds	r8, 0x008B	; 0x80008b <e_old>
     372:	90 90 8c 00 	lds	r9, 0x008C	; 0x80008c <e_old+0x1>
     376:	a0 90 8d 00 	lds	r10, 0x008D	; 0x80008d <e_old+0x2>
     37a:	b0 90 8e 00 	lds	r11, 0x008E	; 0x80008e <e_old+0x3>
     37e:	a5 01       	movw	r20, r10
     380:	94 01       	movw	r18, r8
     382:	c5 01       	movw	r24, r10
     384:	b4 01       	movw	r22, r8
     386:	0e 94 ed 05 	call	0xbda	; 0xbda <__addsf3>
     38a:	9b 01       	movw	r18, r22
     38c:	ac 01       	movw	r20, r24
     38e:	c7 01       	movw	r24, r14
     390:	b6 01       	movw	r22, r12
     392:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <__subsf3>
     396:	a7 01       	movw	r20, r14
     398:	96 01       	movw	r18, r12
     39a:	0e 94 ed 05 	call	0xbda	; 0xbda <__addsf3>
     39e:	20 91 87 00 	lds	r18, 0x0087	; 0x800087 <e_old2>
     3a2:	30 91 88 00 	lds	r19, 0x0088	; 0x800088 <e_old2+0x1>
     3a6:	40 91 89 00 	lds	r20, 0x0089	; 0x800089 <e_old2+0x2>
     3aa:	50 91 8a 00 	lds	r21, 0x008A	; 0x80008a <e_old2+0x3>
     3ae:	0e 94 ed 05 	call	0xbda	; 0xbda <__addsf3>
     3b2:	20 91 7b 00 	lds	r18, 0x007B	; 0x80007b <Kd>
     3b6:	30 91 7c 00 	lds	r19, 0x007C	; 0x80007c <Kd+0x1>
     3ba:	40 91 7d 00 	lds	r20, 0x007D	; 0x80007d <Kd+0x2>
     3be:	50 91 7e 00 	lds	r21, 0x007E	; 0x80007e <Kd+0x3>
     3c2:	0e 94 bd 07 	call	0xf7a	; 0xf7a <__mulsf3>
     3c6:	69 83       	std	Y+1, r22	; 0x01
     3c8:	7a 83       	std	Y+2, r23	; 0x02
     3ca:	8b 83       	std	Y+3, r24	; 0x03
     3cc:	9c 83       	std	Y+4, r25	; 0x04
	
	e_old2 = e_old;           //greska e(kT-2T)
     3ce:	80 92 87 00 	sts	0x0087, r8	; 0x800087 <e_old2>
     3d2:	90 92 88 00 	sts	0x0088, r9	; 0x800088 <e_old2+0x1>
     3d6:	a0 92 89 00 	sts	0x0089, r10	; 0x800089 <e_old2+0x2>
     3da:	b0 92 8a 00 	sts	0x008A, r11	; 0x80008a <e_old2+0x3>
	e_old = e;                //greska e(kT-T)
     3de:	c0 92 8b 00 	sts	0x008B, r12	; 0x80008b <e_old>
     3e2:	d0 92 8c 00 	sts	0x008C, r13	; 0x80008c <e_old+0x1>
     3e6:	e0 92 8d 00 	sts	0x008D, r14	; 0x80008d <e_old+0x2>
     3ea:	f0 92 8e 00 	sts	0x008E, r15	; 0x80008e <e_old+0x3>
	
	u = incKp + incKi + incKd;  //izracunavanje izlazne velicine
     3ee:	20 91 8f 00 	lds	r18, 0x008F	; 0x80008f <incKi>
     3f2:	30 91 90 00 	lds	r19, 0x0090	; 0x800090 <incKi+0x1>
     3f6:	40 91 91 00 	lds	r20, 0x0091	; 0x800091 <incKi+0x2>
     3fa:	50 91 92 00 	lds	r21, 0x0092	; 0x800092 <incKi+0x3>
     3fe:	c3 01       	movw	r24, r6
     400:	b2 01       	movw	r22, r4
     402:	0e 94 ed 05 	call	0xbda	; 0xbda <__addsf3>
     406:	29 81       	ldd	r18, Y+1	; 0x01
     408:	3a 81       	ldd	r19, Y+2	; 0x02
     40a:	4b 81       	ldd	r20, Y+3	; 0x03
     40c:	5c 81       	ldd	r21, Y+4	; 0x04
     40e:	0e 94 ed 05 	call	0xbda	; 0xbda <__addsf3>
     412:	4b 01       	movw	r8, r22
     414:	5c 01       	movw	r10, r24
     416:	60 93 83 00 	sts	0x0083, r22	; 0x800083 <u>
     41a:	70 93 84 00 	sts	0x0084, r23	; 0x800084 <u+0x1>
     41e:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <u+0x2>
     422:	90 93 86 00 	sts	0x0086, r25	; 0x800086 <u+0x3>
	
	if( u > (PWM+PWMKocenje) )
     426:	e0 90 66 00 	lds	r14, 0x0066	; 0x800066 <PWMKocenje>
     42a:	f0 90 67 00 	lds	r15, 0x0067	; 0x800067 <PWMKocenje+0x1>
     42e:	6d 81       	ldd	r22, Y+5	; 0x05
     430:	7e 81       	ldd	r23, Y+6	; 0x06
     432:	6e 0d       	add	r22, r14
     434:	7f 1d       	adc	r23, r15
     436:	07 2e       	mov	r0, r23
     438:	00 0c       	add	r0, r0
     43a:	88 0b       	sbc	r24, r24
     43c:	99 0b       	sbc	r25, r25
     43e:	0e 94 08 07 	call	0xe10	; 0xe10 <__floatsisf>
     442:	2b 01       	movw	r4, r22
     444:	3c 01       	movw	r6, r24
     446:	9b 01       	movw	r18, r22
     448:	ac 01       	movw	r20, r24
     44a:	c5 01       	movw	r24, r10
     44c:	b4 01       	movw	r22, r8
     44e:	0e 94 b8 07 	call	0xf70	; 0xf70 <__gesf2>
     452:	18 16       	cp	r1, r24
     454:	44 f4       	brge	.+16     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
	u = (PWM+PWMKocenje);             //provera opsega
     456:	40 92 83 00 	sts	0x0083, r4	; 0x800083 <u>
     45a:	50 92 84 00 	sts	0x0084, r5	; 0x800084 <u+0x1>
     45e:	60 92 85 00 	sts	0x0085, r6	; 0x800085 <u+0x2>
     462:	70 92 86 00 	sts	0x0086, r7	; 0x800086 <u+0x3>
	if( u < (-PWM-PWMKocenje) )
     466:	6d 81       	ldd	r22, Y+5	; 0x05
     468:	7e 81       	ldd	r23, Y+6	; 0x06
     46a:	71 95       	neg	r23
     46c:	61 95       	neg	r22
     46e:	71 09       	sbc	r23, r1
     470:	6e 19       	sub	r22, r14
     472:	7f 09       	sbc	r23, r15
     474:	07 2e       	mov	r0, r23
     476:	00 0c       	add	r0, r0
     478:	88 0b       	sbc	r24, r24
     47a:	99 0b       	sbc	r25, r25
     47c:	0e 94 08 07 	call	0xe10	; 0xe10 <__floatsisf>
     480:	6b 01       	movw	r12, r22
     482:	7c 01       	movw	r14, r24
     484:	20 91 83 00 	lds	r18, 0x0083	; 0x800083 <u>
     488:	30 91 84 00 	lds	r19, 0x0084	; 0x800084 <u+0x1>
     48c:	40 91 85 00 	lds	r20, 0x0085	; 0x800085 <u+0x2>
     490:	50 91 86 00 	lds	r21, 0x0086	; 0x800086 <u+0x3>
     494:	0e 94 b8 07 	call	0xf70	; 0xf70 <__gesf2>
     498:	18 16       	cp	r1, r24
     49a:	44 f4       	brge	.+16     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
	u = (-PWM-PWMKocenje);             //provera opsega
     49c:	c0 92 83 00 	sts	0x0083, r12	; 0x800083 <u>
     4a0:	d0 92 84 00 	sts	0x0084, r13	; 0x800084 <u+0x1>
     4a4:	e0 92 85 00 	sts	0x0085, r14	; 0x800085 <u+0x2>
     4a8:	f0 92 86 00 	sts	0x0086, r15	; 0x800086 <u+0x3>
	
	return (int)u;
     4ac:	60 91 83 00 	lds	r22, 0x0083	; 0x800083 <u>
     4b0:	70 91 84 00 	lds	r23, 0x0084	; 0x800084 <u+0x1>
     4b4:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <u+0x2>
     4b8:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <u+0x3>
     4bc:	0e 94 d0 06 	call	0xda0	; 0xda0 <__fixsfsi>
}
     4c0:	cb 01       	movw	r24, r22
     4c2:	26 96       	adiw	r28, 0x06	; 6
     4c4:	0f b6       	in	r0, 0x3f	; 63
     4c6:	f8 94       	cli
     4c8:	de bf       	out	0x3e, r29	; 62
     4ca:	0f be       	out	0x3f, r0	; 63
     4cc:	cd bf       	out	0x3d, r28	; 61
     4ce:	df 91       	pop	r29
     4d0:	cf 91       	pop	r28
     4d2:	ff 90       	pop	r15
     4d4:	ef 90       	pop	r14
     4d6:	df 90       	pop	r13
     4d8:	cf 90       	pop	r12
     4da:	bf 90       	pop	r11
     4dc:	af 90       	pop	r10
     4de:	9f 90       	pop	r9
     4e0:	8f 90       	pop	r8
     4e2:	7f 90       	pop	r7
     4e4:	6f 90       	pop	r6
     4e6:	5f 90       	pop	r5
     4e8:	4f 90       	pop	r4
     4ea:	08 95       	ret

000004ec <MotorR_Setupx>:

void MotorR_Setupx(int U)
{		
	if(U>PWM)
     4ec:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <PWM>
     4f0:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <PWM+0x1>
     4f4:	68 17       	cp	r22, r24
     4f6:	79 07       	cpc	r23, r25
     4f8:	44 f4       	brge	.+16     	; 0x50a <MotorR_Setupx+0x1e>
	{MotorR_Setup(CCW,(U-PWM));	//Vrti u suprotnom ako je greska prevelika
     4fa:	9c 01       	movw	r18, r24
     4fc:	26 1b       	sub	r18, r22
     4fe:	37 0b       	sbc	r19, r23
     500:	b9 01       	movw	r22, r18
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	0e 94 bb 00 	call	0x176	; 0x176 <MotorR_Setup>
	return;}
     508:	08 95       	ret
	MotorR_Setup(CW,(PWM-U));		// Za normalnu gresku vrti samo sporije
     50a:	68 1b       	sub	r22, r24
     50c:	79 0b       	sbc	r23, r25
     50e:	80 e0       	ldi	r24, 0x00	; 0
     510:	0e 94 bb 00 	call	0x176	; 0x176 <MotorR_Setup>
     514:	08 95       	ret

00000516 <MotorL_Setupx>:
}

void MotorL_Setupx(int U)
{
	if(U>PWM)
     516:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <PWM>
     51a:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <PWM+0x1>
     51e:	68 17       	cp	r22, r24
     520:	79 07       	cpc	r23, r25
     522:	44 f4       	brge	.+16     	; 0x534 <MotorL_Setupx+0x1e>
	{MotorL_Setup(CCW,(U-PWM));	//Vrti u suprotnom ako je greska prevelika
     524:	9c 01       	movw	r18, r24
     526:	26 1b       	sub	r18, r22
     528:	37 0b       	sbc	r19, r23
     52a:	b9 01       	movw	r22, r18
     52c:	81 e0       	ldi	r24, 0x01	; 1
     52e:	0e 94 b5 00 	call	0x16a	; 0x16a <MotorL_Setup>
	return;}
     532:	08 95       	ret
	MotorL_Setup(CW,(PWM-U));		// Za normalnu gresku vrti samo sporije
     534:	68 1b       	sub	r22, r24
     536:	79 0b       	sbc	r23, r25
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	0e 94 b5 00 	call	0x16a	; 0x16a <MotorL_Setup>
     53e:	08 95       	ret

00000540 <KontrolaMotora>:
}

void KontrolaMotora()
{
     540:	cf 93       	push	r28
     542:	df 93       	push	r29
	int U=PID_reg();
     544:	0e 94 37 01 	call	0x26e	; 0x26e <PID_reg>
     548:	ec 01       	movw	r28, r24
	
	if(U>0)		//Usporavaj levi motor
     54a:	18 16       	cp	r1, r24
     54c:	19 06       	cpc	r1, r25
     54e:	44 f4       	brge	.+16     	; 0x560 <KontrolaMotora+0x20>
	{
		MotorR_Setupx(0);
     550:	80 e0       	ldi	r24, 0x00	; 0
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	0e 94 76 02 	call	0x4ec	; 0x4ec <MotorR_Setupx>
		MotorL_Setupx(U);
     558:	ce 01       	movw	r24, r28
     55a:	0e 94 8b 02 	call	0x516	; 0x516 <MotorL_Setupx>
     55e:	0a c0       	rjmp	.+20     	; 0x574 <KontrolaMotora+0x34>
	}
	else		// Usporavaj desni motor
	{
		U=U*(-1);
		MotorR_Setupx(U);
     560:	88 27       	eor	r24, r24
     562:	99 27       	eor	r25, r25
     564:	8c 1b       	sub	r24, r28
     566:	9d 0b       	sbc	r25, r29
     568:	0e 94 76 02 	call	0x4ec	; 0x4ec <MotorR_Setupx>
		MotorL_Setupx(0);
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	0e 94 8b 02 	call	0x516	; 0x516 <MotorL_Setupx>
	}
     574:	df 91       	pop	r29
     576:	cf 91       	pop	r28
     578:	08 95       	ret

0000057a <SenzorInit>:

static int backValue=0;

void SenzorInit()
{
	DDRA=0; // svi su ulazni
     57a:	1a ba       	out	0x1a, r1	; 26
	PORTC |=(1<<1);
     57c:	a9 9a       	sbi	0x15, 1	; 21
	DDRC &= ~(1<<1);
     57e:	a1 98       	cbi	0x14, 1	; 20
     580:	08 95       	ret

00000582 <ReadOptoSenzor>:
}
int ReadOptoSenzor()
{
	if(IsCentral0==0)
     582:	cb 99       	sbic	0x19, 3	; 25
     584:	07 c0       	rjmp	.+14     	; 0x594 <ReadOptoSenzor+0x12>
	{backValue=0; return 0;}
     586:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <backValue+0x1>
     58a:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <backValue>
     58e:	80 e0       	ldi	r24, 0x00	; 0
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	08 95       	ret
	if(IsCentral1==0)
     594:	ce 99       	sbic	0x19, 6	; 25
     596:	07 c0       	rjmp	.+14     	; 0x5a6 <ReadOptoSenzor+0x24>
	{backValue=0; return 1;}
     598:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <backValue+0x1>
     59c:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <backValue>
     5a0:	81 e0       	ldi	r24, 0x01	; 1
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	08 95       	ret
	
	if(IsLeft1==0)
     5a6:	cc 99       	sbic	0x19, 4	; 25
     5a8:	09 c0       	rjmp	.+18     	; 0x5bc <ReadOptoSenzor+0x3a>
	{backValue=100; return 200;}
     5aa:	84 e6       	ldi	r24, 0x64	; 100
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	90 93 94 00 	sts	0x0094, r25	; 0x800094 <backValue+0x1>
     5b2:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <backValue>
     5b6:	88 ec       	ldi	r24, 0xC8	; 200
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	08 95       	ret
	if(IsRight1==0)
     5bc:	cd 99       	sbic	0x19, 5	; 25
     5be:	09 c0       	rjmp	.+18     	; 0x5d2 <ReadOptoSenzor+0x50>
	{backValue=-100; return -200;}
     5c0:	8c e9       	ldi	r24, 0x9C	; 156
     5c2:	9f ef       	ldi	r25, 0xFF	; 255
     5c4:	90 93 94 00 	sts	0x0094, r25	; 0x800094 <backValue+0x1>
     5c8:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <backValue>
     5cc:	88 e3       	ldi	r24, 0x38	; 56
     5ce:	9f ef       	ldi	r25, 0xFF	; 255
     5d0:	08 95       	ret
	
	if(IsLeft2==0)
     5d2:	ca 99       	sbic	0x19, 2	; 25
     5d4:	09 c0       	rjmp	.+18     	; 0x5e8 <ReadOptoSenzor+0x66>
	{backValue=300; return 400;}
     5d6:	8c e2       	ldi	r24, 0x2C	; 44
     5d8:	91 e0       	ldi	r25, 0x01	; 1
     5da:	90 93 94 00 	sts	0x0094, r25	; 0x800094 <backValue+0x1>
     5de:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <backValue>
     5e2:	80 e9       	ldi	r24, 0x90	; 144
     5e4:	91 e0       	ldi	r25, 0x01	; 1
     5e6:	08 95       	ret
	if(IsRight2==0)
     5e8:	99 99       	sbic	0x13, 1	; 19
     5ea:	09 c0       	rjmp	.+18     	; 0x5fe <ReadOptoSenzor+0x7c>
	{backValue=-300; return -400;}
     5ec:	84 ed       	ldi	r24, 0xD4	; 212
     5ee:	9e ef       	ldi	r25, 0xFE	; 254
     5f0:	90 93 94 00 	sts	0x0094, r25	; 0x800094 <backValue+0x1>
     5f4:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <backValue>
     5f8:	80 e7       	ldi	r24, 0x70	; 112
     5fa:	9e ef       	ldi	r25, 0xFE	; 254
     5fc:	08 95       	ret
	
	if(IsLeft3==0)
     5fe:	c9 99       	sbic	0x19, 1	; 25
     600:	07 c0       	rjmp	.+14     	; 0x610 <ReadOptoSenzor+0x8e>
	{backValue=1000; return 1000;}
     602:	88 ee       	ldi	r24, 0xE8	; 232
     604:	93 e0       	ldi	r25, 0x03	; 3
     606:	90 93 94 00 	sts	0x0094, r25	; 0x800094 <backValue+0x1>
     60a:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <backValue>
     60e:	08 95       	ret
	if(IsRight3==0)
     610:	cf 99       	sbic	0x19, 7	; 25
     612:	07 c0       	rjmp	.+14     	; 0x622 <ReadOptoSenzor+0xa0>
	{backValue=-1000; return -1000;}
     614:	88 e1       	ldi	r24, 0x18	; 24
     616:	9c ef       	ldi	r25, 0xFC	; 252
     618:	90 93 94 00 	sts	0x0094, r25	; 0x800094 <backValue+0x1>
     61c:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <backValue>
     620:	08 95       	ret
	
	if(backValue>999)
     622:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <backValue>
     626:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <backValue+0x1>
     62a:	88 3e       	cpi	r24, 0xE8	; 232
     62c:	23 e0       	ldi	r18, 0x03	; 3
     62e:	92 07       	cpc	r25, r18
     630:	34 f4       	brge	.+12     	; 0x63e <ReadOptoSenzor+0xbc>
	return 2000;
	if(backValue<-999)
     632:	89 31       	cpi	r24, 0x19	; 25
     634:	9c 4f       	sbci	r25, 0xFC	; 252
     636:	34 f0       	brlt	.+12     	; 0x644 <ReadOptoSenzor+0xc2>
	return -2000;
	
	return 0;	//Ako bude prekid linije
     638:	80 e0       	ldi	r24, 0x00	; 0
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	08 95       	ret
	{backValue=1000; return 1000;}
	if(IsRight3==0)
	{backValue=-1000; return -1000;}
	
	if(backValue>999)
	return 2000;
     63e:	80 ed       	ldi	r24, 0xD0	; 208
     640:	97 e0       	ldi	r25, 0x07	; 7
     642:	08 95       	ret
	if(backValue<-999)
	return -2000;
     644:	80 e3       	ldi	r24, 0x30	; 48
     646:	98 ef       	ldi	r25, 0xF8	; 248
	
	return 0;	//Ako bude prekid linije
}
     648:	08 95       	ret

0000064a <Uart_inic>:
	Str[i]='\0';

	sprintf((char*)Str,"%d \n",Num);

	printf_string((char *)Str);
}
     64a:	90 9a       	sbi	0x12, 0	; 18
     64c:	88 98       	cbi	0x11, 0	; 17
     64e:	89 9a       	sbi	0x11, 1	; 17
     650:	10 bc       	out	0x20, r1	; 32
     652:	87 e6       	ldi	r24, 0x67	; 103
     654:	89 b9       	out	0x09, r24	; 9
     656:	8a b1       	in	r24, 0x0a	; 10
     658:	88 61       	ori	r24, 0x18	; 24
     65a:	8a b9       	out	0x0a, r24	; 10
     65c:	57 9a       	sbi	0x0a, 7	; 10
     65e:	80 b5       	in	r24, 0x20	; 32
     660:	86 68       	ori	r24, 0x86	; 134
     662:	80 bd       	out	0x20, r24	; 32
     664:	78 94       	sei
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	fc 01       	movw	r30, r24
     66c:	ea 56       	subi	r30, 0x6A	; 106
     66e:	ff 4f       	sbci	r31, 0xFF	; 255
     670:	10 82       	st	Z, r1
     672:	01 96       	adiw	r24, 0x01	; 1
     674:	84 36       	cpi	r24, 0x64	; 100
     676:	91 05       	cpc	r25, r1
     678:	c1 f7       	brne	.-16     	; 0x66a <Uart_inic+0x20>
     67a:	08 95       	ret

0000067c <uart_full>:
	}
}

bool uart_full()	// ako je false onda nista nije stiglo ...
{
	return ResivedOK;
     67c:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <ResivedOK>
}
     680:	08 95       	ret

00000682 <uart_clear>:

void uart_clear()
{
	ResivedOK=false;
     682:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <ResivedOK>
	
	for(int k=0;k<100;k++)
     686:	80 e0       	ldi	r24, 0x00	; 0
     688:	90 e0       	ldi	r25, 0x00	; 0
	{
		Resive[k]='\0';
     68a:	fc 01       	movw	r30, r24
     68c:	ea 56       	subi	r30, 0x6A	; 106
     68e:	ff 4f       	sbci	r31, 0xFF	; 255
     690:	10 82       	st	Z, r1

void uart_clear()
{
	ResivedOK=false;
	
	for(int k=0;k<100;k++)
     692:	01 96       	adiw	r24, 0x01	; 1
     694:	84 36       	cpi	r24, 0x64	; 100
     696:	91 05       	cpc	r25, r1
     698:	c1 f7       	brne	.-16     	; 0x68a <uart_clear+0x8>
	{
		Resive[k]='\0';
	}

	brojcanik=-1;
     69a:	8f ef       	ldi	r24, 0xFF	; 255
     69c:	9f ef       	ldi	r25, 0xFF	; 255
     69e:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <brojcanik+0x1>
     6a2:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <brojcanik>
     6a6:	08 95       	ret

000006a8 <__vector_13>:
}

ISR (USART_RXC_vect)
{		
     6a8:	1f 92       	push	r1
     6aa:	0f 92       	push	r0
     6ac:	0f b6       	in	r0, 0x3f	; 63
     6ae:	0f 92       	push	r0
     6b0:	11 24       	eor	r1, r1
     6b2:	8f 93       	push	r24
     6b4:	9f 93       	push	r25
     6b6:	ef 93       	push	r30
     6b8:	ff 93       	push	r31
		brojcanik++;										
     6ba:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <brojcanik>
     6be:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <brojcanik+0x1>
     6c2:	01 96       	adiw	r24, 0x01	; 1
     6c4:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <brojcanik+0x1>
     6c8:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <brojcanik>
		if(brojcanik>99) brojcanik=99;											//ne daj prepunjavanje bafera
     6cc:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <brojcanik>
     6d0:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <brojcanik+0x1>
     6d4:	84 36       	cpi	r24, 0x64	; 100
     6d6:	91 05       	cpc	r25, r1
     6d8:	34 f0       	brlt	.+12     	; 0x6e6 <__vector_13+0x3e>
     6da:	83 e6       	ldi	r24, 0x63	; 99
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <brojcanik+0x1>
     6e2:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <brojcanik>
	
		Resive[brojcanik]=UDR;
     6e6:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <brojcanik>
     6ea:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <brojcanik+0x1>
     6ee:	8c b1       	in	r24, 0x0c	; 12
     6f0:	ea 56       	subi	r30, 0x6A	; 106
     6f2:	ff 4f       	sbci	r31, 0xFF	; 255
     6f4:	80 83       	st	Z, r24
		
		if(Resive[brojcanik]=='\r' || Resive[brojcanik]=='\n')
     6f6:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <brojcanik>
     6fa:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <brojcanik+0x1>
     6fe:	ea 56       	subi	r30, 0x6A	; 106
     700:	ff 4f       	sbci	r31, 0xFF	; 255
     702:	80 81       	ld	r24, Z
     704:	8d 30       	cpi	r24, 0x0D	; 13
     706:	49 f0       	breq	.+18     	; 0x71a <__vector_13+0x72>
     708:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <brojcanik>
     70c:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <brojcanik+0x1>
     710:	ea 56       	subi	r30, 0x6A	; 106
     712:	ff 4f       	sbci	r31, 0xFF	; 255
     714:	80 81       	ld	r24, Z
     716:	8a 30       	cpi	r24, 0x0A	; 10
     718:	81 f4       	brne	.+32     	; 0x73a <__vector_13+0x92>
		{
			Resive[brojcanik]='\0';
     71a:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <brojcanik>
     71e:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <brojcanik+0x1>
     722:	ea 56       	subi	r30, 0x6A	; 106
     724:	ff 4f       	sbci	r31, 0xFF	; 255
     726:	10 82       	st	Z, r1

			brojcanik=-1;
     728:	8f ef       	ldi	r24, 0xFF	; 255
     72a:	9f ef       	ldi	r25, 0xFF	; 255
     72c:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <brojcanik+0x1>
     730:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <brojcanik>

			ResivedOK=true;
     734:	81 e0       	ldi	r24, 0x01	; 1
     736:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <ResivedOK>
		}	
     73a:	ff 91       	pop	r31
     73c:	ef 91       	pop	r30
     73e:	9f 91       	pop	r25
     740:	8f 91       	pop	r24
     742:	0f 90       	pop	r0
     744:	0f be       	out	0x3f, r0	; 63
     746:	0f 90       	pop	r0
     748:	1f 90       	pop	r1
     74a:	18 95       	reti

0000074c <RecognizeMSG>:
 */ 
#include "UARTHendler.h"
#include <util/delay.h>

void RecognizeMSG()
{
     74c:	cf 92       	push	r12
     74e:	df 92       	push	r13
     750:	ef 92       	push	r14
     752:	ff 92       	push	r15
     754:	cf 93       	push	r28
     756:	df 93       	push	r29
	if(Resive[0]=='O' && Resive[1]=='N')
     758:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <Resive>
     75c:	8f 34       	cpi	r24, 0x4F	; 79
     75e:	81 f4       	brne	.+32     	; 0x780 <RecognizeMSG+0x34>
     760:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <Resive+0x1>
     764:	8e 34       	cpi	r24, 0x4E	; 78
     766:	61 f4       	brne	.+24     	; 0x780 <RecognizeMSG+0x34>
	{
		TESTLED_ON;
     768:	c0 9a       	sbi	0x18, 0	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     76a:	8f e3       	ldi	r24, 0x3F	; 63
     76c:	9c e9       	ldi	r25, 0x9C	; 156
     76e:	01 97       	sbiw	r24, 0x01	; 1
     770:	f1 f7       	brne	.-4      	; 0x76e <RecognizeMSG+0x22>
     772:	00 c0       	rjmp	.+0      	; 0x774 <RecognizeMSG+0x28>
     774:	00 00       	nop
		_delay_ms(10);
		TESTLED_OFF;
     776:	c0 98       	cbi	0x18, 0	; 24
		MotorStart(true);
     778:	81 e0       	ldi	r24, 0x01	; 1
     77a:	0e 94 b2 00 	call	0x164	; 0x164 <MotorStart>
		return;
     77e:	25 c2       	rjmp	.+1098   	; 0xbca <__stack+0x36b>
	}
	if(Resive[0]=='O' && Resive[1]=='F')
     780:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <Resive>
     784:	8f 34       	cpi	r24, 0x4F	; 79
     786:	81 f4       	brne	.+32     	; 0x7a8 <RecognizeMSG+0x5c>
     788:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <Resive+0x1>
     78c:	86 34       	cpi	r24, 0x46	; 70
     78e:	61 f4       	brne	.+24     	; 0x7a8 <RecognizeMSG+0x5c>
	{
		TESTLED_ON;
     790:	c0 9a       	sbi	0x18, 0	; 24
     792:	8f e3       	ldi	r24, 0x3F	; 63
     794:	9c e9       	ldi	r25, 0x9C	; 156
     796:	01 97       	sbiw	r24, 0x01	; 1
     798:	f1 f7       	brne	.-4      	; 0x796 <RecognizeMSG+0x4a>
     79a:	00 c0       	rjmp	.+0      	; 0x79c <RecognizeMSG+0x50>
     79c:	00 00       	nop
		_delay_ms(10);
		TESTLED_OFF;
     79e:	c0 98       	cbi	0x18, 0	; 24
		MotorStart(false);
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	0e 94 b2 00 	call	0x164	; 0x164 <MotorStart>
		return;
     7a6:	11 c2       	rjmp	.+1058   	; 0xbca <__stack+0x36b>
	}
	if(Resive[0]=='P' && Resive[1]=='W')		//PWM
     7a8:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <Resive>
     7ac:	80 35       	cpi	r24, 0x50	; 80
     7ae:	99 f5       	brne	.+102    	; 0x816 <RecognizeMSG+0xca>
     7b0:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <Resive+0x1>
     7b4:	87 35       	cpi	r24, 0x57	; 87
     7b6:	79 f5       	brne	.+94     	; 0x816 <RecognizeMSG+0xca>
	{
		int X=0;
		
		TESTLED_ON;
     7b8:	c0 9a       	sbi	0x18, 0	; 24
     7ba:	8f e3       	ldi	r24, 0x3F	; 63
     7bc:	9c e9       	ldi	r25, 0x9C	; 156
     7be:	01 97       	sbiw	r24, 0x01	; 1
     7c0:	f1 f7       	brne	.-4      	; 0x7be <RecognizeMSG+0x72>
     7c2:	00 c0       	rjmp	.+0      	; 0x7c4 <RecognizeMSG+0x78>
     7c4:	00 00       	nop
		_delay_ms(10);
		TESTLED_OFF;
     7c6:	c0 98       	cbi	0x18, 0	; 24
		
		X=(Resive[2]-48)*100;
     7c8:	e6 e9       	ldi	r30, 0x96	; 150
     7ca:	f0 e0       	ldi	r31, 0x00	; 0
     7cc:	82 81       	ldd	r24, Z+2	; 0x02
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	c0 97       	sbiw	r24, 0x30	; 48
     7d2:	44 e6       	ldi	r20, 0x64	; 100
     7d4:	48 9f       	mul	r20, r24
     7d6:	90 01       	movw	r18, r0
     7d8:	49 9f       	mul	r20, r25
     7da:	30 0d       	add	r19, r0
     7dc:	11 24       	eor	r1, r1
		X+=(Resive[3]-48)*10;
     7de:	93 81       	ldd	r25, Z+3	; 0x03
     7e0:	89 2f       	mov	r24, r25
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	c0 97       	sbiw	r24, 0x30	; 48
     7e6:	ac 01       	movw	r20, r24
     7e8:	44 0f       	add	r20, r20
     7ea:	55 1f       	adc	r21, r21
     7ec:	88 0f       	add	r24, r24
     7ee:	99 1f       	adc	r25, r25
     7f0:	88 0f       	add	r24, r24
     7f2:	99 1f       	adc	r25, r25
     7f4:	88 0f       	add	r24, r24
     7f6:	99 1f       	adc	r25, r25
     7f8:	84 0f       	add	r24, r20
     7fa:	95 1f       	adc	r25, r21
     7fc:	82 0f       	add	r24, r18
     7fe:	93 1f       	adc	r25, r19
		X+=(Resive[4]-48);
     800:	24 81       	ldd	r18, Z+4	; 0x04
		
		PWMZadato=X;
     802:	30 e0       	ldi	r19, 0x00	; 0
     804:	20 53       	subi	r18, 0x30	; 48
     806:	31 09       	sbc	r19, r1
     808:	82 0f       	add	r24, r18
     80a:	93 1f       	adc	r25, r19
     80c:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <PWMZadato+0x1>
     810:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <PWMZadato>
		return;
     814:	da c1       	rjmp	.+948    	; 0xbca <__stack+0x36b>
	}
	
	if(Resive[0]=='W' && Resive[1]=='P')		// P parametar
     816:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <Resive>
     81a:	87 35       	cpi	r24, 0x57	; 87
     81c:	09 f0       	breq	.+2      	; 0x820 <RecognizeMSG+0xd4>
     81e:	64 c0       	rjmp	.+200    	; 0x8e8 <__stack+0x89>
     820:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <Resive+0x1>
     824:	80 35       	cpi	r24, 0x50	; 80
     826:	09 f0       	breq	.+2      	; 0x82a <RecognizeMSG+0xde>
     828:	5f c0       	rjmp	.+190    	; 0x8e8 <__stack+0x89>
	{
		float X=0;
		
		TESTLED_ON;
     82a:	c0 9a       	sbi	0x18, 0	; 24
     82c:	8f e3       	ldi	r24, 0x3F	; 63
     82e:	9c e9       	ldi	r25, 0x9C	; 156
     830:	01 97       	sbiw	r24, 0x01	; 1
     832:	f1 f7       	brne	.-4      	; 0x830 <RecognizeMSG+0xe4>
     834:	00 c0       	rjmp	.+0      	; 0x836 <RecognizeMSG+0xea>
     836:	00 00       	nop
		_delay_ms(10);
		TESTLED_OFF;
     838:	c0 98       	cbi	0x18, 0	; 24
		
		X=(Resive[2]-48);
     83a:	c6 e9       	ldi	r28, 0x96	; 150
     83c:	d0 e0       	ldi	r29, 0x00	; 0
     83e:	6a 81       	ldd	r22, Y+2	; 0x02
     840:	70 e0       	ldi	r23, 0x00	; 0
     842:	60 53       	subi	r22, 0x30	; 48
     844:	71 09       	sbc	r23, r1
     846:	07 2e       	mov	r0, r23
     848:	00 0c       	add	r0, r0
     84a:	88 0b       	sbc	r24, r24
     84c:	99 0b       	sbc	r25, r25
     84e:	0e 94 08 07 	call	0xe10	; 0xe10 <__floatsisf>
     852:	6b 01       	movw	r12, r22
     854:	7c 01       	movw	r14, r24
		X+=(Resive[4]-48)/10.0;
     856:	6c 81       	ldd	r22, Y+4	; 0x04
     858:	70 e0       	ldi	r23, 0x00	; 0
     85a:	60 53       	subi	r22, 0x30	; 48
     85c:	71 09       	sbc	r23, r1
     85e:	07 2e       	mov	r0, r23
     860:	00 0c       	add	r0, r0
     862:	88 0b       	sbc	r24, r24
     864:	99 0b       	sbc	r25, r25
     866:	0e 94 08 07 	call	0xe10	; 0xe10 <__floatsisf>
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	40 e2       	ldi	r20, 0x20	; 32
     870:	51 e4       	ldi	r21, 0x41	; 65
     872:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__divsf3>
     876:	a7 01       	movw	r20, r14
     878:	96 01       	movw	r18, r12
     87a:	0e 94 ed 05 	call	0xbda	; 0xbda <__addsf3>
     87e:	6b 01       	movw	r12, r22
     880:	7c 01       	movw	r14, r24
		X+=(Resive[5]-48)/100.0;
     882:	6d 81       	ldd	r22, Y+5	; 0x05
     884:	70 e0       	ldi	r23, 0x00	; 0
     886:	60 53       	subi	r22, 0x30	; 48
     888:	71 09       	sbc	r23, r1
     88a:	07 2e       	mov	r0, r23
     88c:	00 0c       	add	r0, r0
     88e:	88 0b       	sbc	r24, r24
     890:	99 0b       	sbc	r25, r25
     892:	0e 94 08 07 	call	0xe10	; 0xe10 <__floatsisf>
     896:	20 e0       	ldi	r18, 0x00	; 0
     898:	30 e0       	ldi	r19, 0x00	; 0
     89a:	48 ec       	ldi	r20, 0xC8	; 200
     89c:	52 e4       	ldi	r21, 0x42	; 66
     89e:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__divsf3>
     8a2:	a7 01       	movw	r20, r14
     8a4:	96 01       	movw	r18, r12
     8a6:	0e 94 ed 05 	call	0xbda	; 0xbda <__addsf3>
     8aa:	6b 01       	movw	r12, r22
     8ac:	7c 01       	movw	r14, r24
		X+=(Resive[6]-48)/1000.0;
     8ae:	6e 81       	ldd	r22, Y+6	; 0x06
		
		Kp=X;
     8b0:	70 e0       	ldi	r23, 0x00	; 0
     8b2:	60 53       	subi	r22, 0x30	; 48
     8b4:	71 09       	sbc	r23, r1
     8b6:	07 2e       	mov	r0, r23
     8b8:	00 0c       	add	r0, r0
     8ba:	88 0b       	sbc	r24, r24
     8bc:	99 0b       	sbc	r25, r25
     8be:	0e 94 08 07 	call	0xe10	; 0xe10 <__floatsisf>
     8c2:	20 e0       	ldi	r18, 0x00	; 0
     8c4:	30 e0       	ldi	r19, 0x00	; 0
     8c6:	4a e7       	ldi	r20, 0x7A	; 122
     8c8:	54 e4       	ldi	r21, 0x44	; 68
     8ca:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__divsf3>
     8ce:	a7 01       	movw	r20, r14
     8d0:	96 01       	movw	r18, r12
     8d2:	0e 94 ed 05 	call	0xbda	; 0xbda <__addsf3>
     8d6:	60 93 6e 00 	sts	0x006E, r22	; 0x80006e <Kp>
     8da:	70 93 6f 00 	sts	0x006F, r23	; 0x80006f <Kp+0x1>
     8de:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <Kp+0x2>
     8e2:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <Kp+0x3>
		return;
     8e6:	71 c1       	rjmp	.+738    	; 0xbca <__stack+0x36b>
	}
	
	if(Resive[0]=='W' && Resive[1]=='I')		// I parametar
     8e8:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <Resive>
     8ec:	87 35       	cpi	r24, 0x57	; 87
     8ee:	09 f0       	breq	.+2      	; 0x8f2 <__stack+0x93>
     8f0:	64 c0       	rjmp	.+200    	; 0x9ba <__stack+0x15b>
     8f2:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <Resive+0x1>
     8f6:	89 34       	cpi	r24, 0x49	; 73
     8f8:	09 f0       	breq	.+2      	; 0x8fc <__stack+0x9d>
     8fa:	5f c0       	rjmp	.+190    	; 0x9ba <__stack+0x15b>
	{
		float X=0;
		
		TESTLED_ON;
     8fc:	c0 9a       	sbi	0x18, 0	; 24
     8fe:	8f e3       	ldi	r24, 0x3F	; 63
     900:	9c e9       	ldi	r25, 0x9C	; 156
     902:	01 97       	sbiw	r24, 0x01	; 1
     904:	f1 f7       	brne	.-4      	; 0x902 <__stack+0xa3>
     906:	00 c0       	rjmp	.+0      	; 0x908 <__stack+0xa9>
     908:	00 00       	nop
		_delay_ms(10);
		TESTLED_OFF;
     90a:	c0 98       	cbi	0x18, 0	; 24
		
		X=(Resive[2]-48);
     90c:	c6 e9       	ldi	r28, 0x96	; 150
     90e:	d0 e0       	ldi	r29, 0x00	; 0
     910:	6a 81       	ldd	r22, Y+2	; 0x02
     912:	70 e0       	ldi	r23, 0x00	; 0
     914:	60 53       	subi	r22, 0x30	; 48
     916:	71 09       	sbc	r23, r1
     918:	07 2e       	mov	r0, r23
     91a:	00 0c       	add	r0, r0
     91c:	88 0b       	sbc	r24, r24
     91e:	99 0b       	sbc	r25, r25
     920:	0e 94 08 07 	call	0xe10	; 0xe10 <__floatsisf>
     924:	6b 01       	movw	r12, r22
     926:	7c 01       	movw	r14, r24
		X+=(Resive[4]-48)/10.0;
     928:	6c 81       	ldd	r22, Y+4	; 0x04
     92a:	70 e0       	ldi	r23, 0x00	; 0
     92c:	60 53       	subi	r22, 0x30	; 48
     92e:	71 09       	sbc	r23, r1
     930:	07 2e       	mov	r0, r23
     932:	00 0c       	add	r0, r0
     934:	88 0b       	sbc	r24, r24
     936:	99 0b       	sbc	r25, r25
     938:	0e 94 08 07 	call	0xe10	; 0xe10 <__floatsisf>
     93c:	20 e0       	ldi	r18, 0x00	; 0
     93e:	30 e0       	ldi	r19, 0x00	; 0
     940:	40 e2       	ldi	r20, 0x20	; 32
     942:	51 e4       	ldi	r21, 0x41	; 65
     944:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__divsf3>
     948:	a7 01       	movw	r20, r14
     94a:	96 01       	movw	r18, r12
     94c:	0e 94 ed 05 	call	0xbda	; 0xbda <__addsf3>
     950:	6b 01       	movw	r12, r22
     952:	7c 01       	movw	r14, r24
		X+=(Resive[5]-48)/100.0;
     954:	6d 81       	ldd	r22, Y+5	; 0x05
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	60 53       	subi	r22, 0x30	; 48
     95a:	71 09       	sbc	r23, r1
     95c:	07 2e       	mov	r0, r23
     95e:	00 0c       	add	r0, r0
     960:	88 0b       	sbc	r24, r24
     962:	99 0b       	sbc	r25, r25
     964:	0e 94 08 07 	call	0xe10	; 0xe10 <__floatsisf>
     968:	20 e0       	ldi	r18, 0x00	; 0
     96a:	30 e0       	ldi	r19, 0x00	; 0
     96c:	48 ec       	ldi	r20, 0xC8	; 200
     96e:	52 e4       	ldi	r21, 0x42	; 66
     970:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__divsf3>
     974:	a7 01       	movw	r20, r14
     976:	96 01       	movw	r18, r12
     978:	0e 94 ed 05 	call	0xbda	; 0xbda <__addsf3>
     97c:	6b 01       	movw	r12, r22
     97e:	7c 01       	movw	r14, r24
		X+=(Resive[6]-48)/1000.0;
     980:	6e 81       	ldd	r22, Y+6	; 0x06
		
		Ki=X;
     982:	70 e0       	ldi	r23, 0x00	; 0
     984:	60 53       	subi	r22, 0x30	; 48
     986:	71 09       	sbc	r23, r1
     988:	07 2e       	mov	r0, r23
     98a:	00 0c       	add	r0, r0
     98c:	88 0b       	sbc	r24, r24
     98e:	99 0b       	sbc	r25, r25
     990:	0e 94 08 07 	call	0xe10	; 0xe10 <__floatsisf>
     994:	20 e0       	ldi	r18, 0x00	; 0
     996:	30 e0       	ldi	r19, 0x00	; 0
     998:	4a e7       	ldi	r20, 0x7A	; 122
     99a:	54 e4       	ldi	r21, 0x44	; 68
     99c:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__divsf3>
     9a0:	a7 01       	movw	r20, r14
     9a2:	96 01       	movw	r18, r12
     9a4:	0e 94 ed 05 	call	0xbda	; 0xbda <__addsf3>
     9a8:	60 93 7f 00 	sts	0x007F, r22	; 0x80007f <Ki>
     9ac:	70 93 80 00 	sts	0x0080, r23	; 0x800080 <Ki+0x1>
     9b0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <Ki+0x2>
     9b4:	90 93 82 00 	sts	0x0082, r25	; 0x800082 <Ki+0x3>
		return;
     9b8:	08 c1       	rjmp	.+528    	; 0xbca <__stack+0x36b>
	}
	
	if(Resive[0]=='W' && Resive[1]=='D')		// D parametar
     9ba:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <Resive>
     9be:	87 35       	cpi	r24, 0x57	; 87
     9c0:	09 f0       	breq	.+2      	; 0x9c4 <__stack+0x165>
     9c2:	64 c0       	rjmp	.+200    	; 0xa8c <__stack+0x22d>
     9c4:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <Resive+0x1>
     9c8:	84 34       	cpi	r24, 0x44	; 68
     9ca:	09 f0       	breq	.+2      	; 0x9ce <__stack+0x16f>
     9cc:	5f c0       	rjmp	.+190    	; 0xa8c <__stack+0x22d>
	{
		float X=0;
		
		TESTLED_ON;
     9ce:	c0 9a       	sbi	0x18, 0	; 24
     9d0:	8f e3       	ldi	r24, 0x3F	; 63
     9d2:	9c e9       	ldi	r25, 0x9C	; 156
     9d4:	01 97       	sbiw	r24, 0x01	; 1
     9d6:	f1 f7       	brne	.-4      	; 0x9d4 <__stack+0x175>
     9d8:	00 c0       	rjmp	.+0      	; 0x9da <__stack+0x17b>
     9da:	00 00       	nop
		_delay_ms(10);
		TESTLED_OFF;
     9dc:	c0 98       	cbi	0x18, 0	; 24
		
		X=(Resive[2]-48);
     9de:	c6 e9       	ldi	r28, 0x96	; 150
     9e0:	d0 e0       	ldi	r29, 0x00	; 0
     9e2:	6a 81       	ldd	r22, Y+2	; 0x02
     9e4:	70 e0       	ldi	r23, 0x00	; 0
     9e6:	60 53       	subi	r22, 0x30	; 48
     9e8:	71 09       	sbc	r23, r1
     9ea:	07 2e       	mov	r0, r23
     9ec:	00 0c       	add	r0, r0
     9ee:	88 0b       	sbc	r24, r24
     9f0:	99 0b       	sbc	r25, r25
     9f2:	0e 94 08 07 	call	0xe10	; 0xe10 <__floatsisf>
     9f6:	6b 01       	movw	r12, r22
     9f8:	7c 01       	movw	r14, r24
		X+=(Resive[4]-48)/10.0;
     9fa:	6c 81       	ldd	r22, Y+4	; 0x04
     9fc:	70 e0       	ldi	r23, 0x00	; 0
     9fe:	60 53       	subi	r22, 0x30	; 48
     a00:	71 09       	sbc	r23, r1
     a02:	07 2e       	mov	r0, r23
     a04:	00 0c       	add	r0, r0
     a06:	88 0b       	sbc	r24, r24
     a08:	99 0b       	sbc	r25, r25
     a0a:	0e 94 08 07 	call	0xe10	; 0xe10 <__floatsisf>
     a0e:	20 e0       	ldi	r18, 0x00	; 0
     a10:	30 e0       	ldi	r19, 0x00	; 0
     a12:	40 e2       	ldi	r20, 0x20	; 32
     a14:	51 e4       	ldi	r21, 0x41	; 65
     a16:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__divsf3>
     a1a:	a7 01       	movw	r20, r14
     a1c:	96 01       	movw	r18, r12
     a1e:	0e 94 ed 05 	call	0xbda	; 0xbda <__addsf3>
     a22:	6b 01       	movw	r12, r22
     a24:	7c 01       	movw	r14, r24
		X+=(Resive[5]-48)/100.0;
     a26:	6d 81       	ldd	r22, Y+5	; 0x05
     a28:	70 e0       	ldi	r23, 0x00	; 0
     a2a:	60 53       	subi	r22, 0x30	; 48
     a2c:	71 09       	sbc	r23, r1
     a2e:	07 2e       	mov	r0, r23
     a30:	00 0c       	add	r0, r0
     a32:	88 0b       	sbc	r24, r24
     a34:	99 0b       	sbc	r25, r25
     a36:	0e 94 08 07 	call	0xe10	; 0xe10 <__floatsisf>
     a3a:	20 e0       	ldi	r18, 0x00	; 0
     a3c:	30 e0       	ldi	r19, 0x00	; 0
     a3e:	48 ec       	ldi	r20, 0xC8	; 200
     a40:	52 e4       	ldi	r21, 0x42	; 66
     a42:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__divsf3>
     a46:	a7 01       	movw	r20, r14
     a48:	96 01       	movw	r18, r12
     a4a:	0e 94 ed 05 	call	0xbda	; 0xbda <__addsf3>
     a4e:	6b 01       	movw	r12, r22
     a50:	7c 01       	movw	r14, r24
		X+=(Resive[6]-48)/1000.0;
     a52:	6e 81       	ldd	r22, Y+6	; 0x06
		
		Kd=X;
     a54:	70 e0       	ldi	r23, 0x00	; 0
     a56:	60 53       	subi	r22, 0x30	; 48
     a58:	71 09       	sbc	r23, r1
     a5a:	07 2e       	mov	r0, r23
     a5c:	00 0c       	add	r0, r0
     a5e:	88 0b       	sbc	r24, r24
     a60:	99 0b       	sbc	r25, r25
     a62:	0e 94 08 07 	call	0xe10	; 0xe10 <__floatsisf>
     a66:	20 e0       	ldi	r18, 0x00	; 0
     a68:	30 e0       	ldi	r19, 0x00	; 0
     a6a:	4a e7       	ldi	r20, 0x7A	; 122
     a6c:	54 e4       	ldi	r21, 0x44	; 68
     a6e:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__divsf3>
     a72:	a7 01       	movw	r20, r14
     a74:	96 01       	movw	r18, r12
     a76:	0e 94 ed 05 	call	0xbda	; 0xbda <__addsf3>
     a7a:	60 93 7b 00 	sts	0x007B, r22	; 0x80007b <Kd>
     a7e:	70 93 7c 00 	sts	0x007C, r23	; 0x80007c <Kd+0x1>
     a82:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <Kd+0x2>
     a86:	90 93 7e 00 	sts	0x007E, r25	; 0x80007e <Kd+0x3>
		return;
     a8a:	9f c0       	rjmp	.+318    	; 0xbca <__stack+0x36b>
	}
	
	if(Resive[0]=='S' && Resive[1]=='P')		// P za brzinsku regulaciju
     a8c:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <Resive>
     a90:	83 35       	cpi	r24, 0x53	; 83
     a92:	09 f0       	breq	.+2      	; 0xa96 <__stack+0x237>
     a94:	64 c0       	rjmp	.+200    	; 0xb5e <__stack+0x2ff>
     a96:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <Resive+0x1>
     a9a:	80 35       	cpi	r24, 0x50	; 80
     a9c:	09 f0       	breq	.+2      	; 0xaa0 <__stack+0x241>
     a9e:	5f c0       	rjmp	.+190    	; 0xb5e <__stack+0x2ff>
	{
		float X=0;
		
		TESTLED_ON;
     aa0:	c0 9a       	sbi	0x18, 0	; 24
     aa2:	8f e3       	ldi	r24, 0x3F	; 63
     aa4:	9c e9       	ldi	r25, 0x9C	; 156
     aa6:	01 97       	sbiw	r24, 0x01	; 1
     aa8:	f1 f7       	brne	.-4      	; 0xaa6 <__stack+0x247>
     aaa:	00 c0       	rjmp	.+0      	; 0xaac <__stack+0x24d>
     aac:	00 00       	nop
		_delay_ms(10);
		TESTLED_OFF;
     aae:	c0 98       	cbi	0x18, 0	; 24
		
		X=(Resive[2]-48);
     ab0:	c6 e9       	ldi	r28, 0x96	; 150
     ab2:	d0 e0       	ldi	r29, 0x00	; 0
     ab4:	6a 81       	ldd	r22, Y+2	; 0x02
     ab6:	70 e0       	ldi	r23, 0x00	; 0
     ab8:	60 53       	subi	r22, 0x30	; 48
     aba:	71 09       	sbc	r23, r1
     abc:	07 2e       	mov	r0, r23
     abe:	00 0c       	add	r0, r0
     ac0:	88 0b       	sbc	r24, r24
     ac2:	99 0b       	sbc	r25, r25
     ac4:	0e 94 08 07 	call	0xe10	; 0xe10 <__floatsisf>
     ac8:	6b 01       	movw	r12, r22
     aca:	7c 01       	movw	r14, r24
		X+=(Resive[4]-48)/10.0;
     acc:	6c 81       	ldd	r22, Y+4	; 0x04
     ace:	70 e0       	ldi	r23, 0x00	; 0
     ad0:	60 53       	subi	r22, 0x30	; 48
     ad2:	71 09       	sbc	r23, r1
     ad4:	07 2e       	mov	r0, r23
     ad6:	00 0c       	add	r0, r0
     ad8:	88 0b       	sbc	r24, r24
     ada:	99 0b       	sbc	r25, r25
     adc:	0e 94 08 07 	call	0xe10	; 0xe10 <__floatsisf>
     ae0:	20 e0       	ldi	r18, 0x00	; 0
     ae2:	30 e0       	ldi	r19, 0x00	; 0
     ae4:	40 e2       	ldi	r20, 0x20	; 32
     ae6:	51 e4       	ldi	r21, 0x41	; 65
     ae8:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__divsf3>
     aec:	a7 01       	movw	r20, r14
     aee:	96 01       	movw	r18, r12
     af0:	0e 94 ed 05 	call	0xbda	; 0xbda <__addsf3>
     af4:	6b 01       	movw	r12, r22
     af6:	7c 01       	movw	r14, r24
		X+=(Resive[5]-48)/100.0;
     af8:	6d 81       	ldd	r22, Y+5	; 0x05
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	60 53       	subi	r22, 0x30	; 48
     afe:	71 09       	sbc	r23, r1
     b00:	07 2e       	mov	r0, r23
     b02:	00 0c       	add	r0, r0
     b04:	88 0b       	sbc	r24, r24
     b06:	99 0b       	sbc	r25, r25
     b08:	0e 94 08 07 	call	0xe10	; 0xe10 <__floatsisf>
     b0c:	20 e0       	ldi	r18, 0x00	; 0
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	48 ec       	ldi	r20, 0xC8	; 200
     b12:	52 e4       	ldi	r21, 0x42	; 66
     b14:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__divsf3>
     b18:	a7 01       	movw	r20, r14
     b1a:	96 01       	movw	r18, r12
     b1c:	0e 94 ed 05 	call	0xbda	; 0xbda <__addsf3>
     b20:	6b 01       	movw	r12, r22
     b22:	7c 01       	movw	r14, r24
		X+=(Resive[6]-48)/1000.0;
     b24:	6e 81       	ldd	r22, Y+6	; 0x06
		
		Kpb=X;
     b26:	70 e0       	ldi	r23, 0x00	; 0
     b28:	60 53       	subi	r22, 0x30	; 48
     b2a:	71 09       	sbc	r23, r1
     b2c:	07 2e       	mov	r0, r23
     b2e:	00 0c       	add	r0, r0
     b30:	88 0b       	sbc	r24, r24
     b32:	99 0b       	sbc	r25, r25
     b34:	0e 94 08 07 	call	0xe10	; 0xe10 <__floatsisf>
     b38:	20 e0       	ldi	r18, 0x00	; 0
     b3a:	30 e0       	ldi	r19, 0x00	; 0
     b3c:	4a e7       	ldi	r20, 0x7A	; 122
     b3e:	54 e4       	ldi	r21, 0x44	; 68
     b40:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__divsf3>
     b44:	a7 01       	movw	r20, r14
     b46:	96 01       	movw	r18, r12
     b48:	0e 94 ed 05 	call	0xbda	; 0xbda <__addsf3>
     b4c:	60 93 6a 00 	sts	0x006A, r22	; 0x80006a <Kpb>
     b50:	70 93 6b 00 	sts	0x006B, r23	; 0x80006b <Kpb+0x1>
     b54:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <Kpb+0x2>
     b58:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <Kpb+0x3>
		
		return;
     b5c:	36 c0       	rjmp	.+108    	; 0xbca <__stack+0x36b>
	}
	
	if(Resive[0]=='S' && Resive[1]=='D')		// D za brzinsku regulaciju
     b5e:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <Resive>
     b62:	83 35       	cpi	r24, 0x53	; 83
     b64:	91 f5       	brne	.+100    	; 0xbca <__stack+0x36b>
     b66:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <Resive+0x1>
     b6a:	84 34       	cpi	r24, 0x44	; 68
     b6c:	71 f5       	brne	.+92     	; 0xbca <__stack+0x36b>
	{
		int X=0;
		
		TESTLED_ON;
     b6e:	c0 9a       	sbi	0x18, 0	; 24
     b70:	8f e3       	ldi	r24, 0x3F	; 63
     b72:	9c e9       	ldi	r25, 0x9C	; 156
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	f1 f7       	brne	.-4      	; 0xb74 <__stack+0x315>
     b78:	00 c0       	rjmp	.+0      	; 0xb7a <__stack+0x31b>
     b7a:	00 00       	nop
		_delay_ms(10);
		TESTLED_OFF;
     b7c:	c0 98       	cbi	0x18, 0	; 24
		
		X=(Resive[2]-48)*100;
     b7e:	e6 e9       	ldi	r30, 0x96	; 150
     b80:	f0 e0       	ldi	r31, 0x00	; 0
     b82:	82 81       	ldd	r24, Z+2	; 0x02
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	c0 97       	sbiw	r24, 0x30	; 48
     b88:	44 e6       	ldi	r20, 0x64	; 100
     b8a:	48 9f       	mul	r20, r24
     b8c:	90 01       	movw	r18, r0
     b8e:	49 9f       	mul	r20, r25
     b90:	30 0d       	add	r19, r0
     b92:	11 24       	eor	r1, r1
		X+=(Resive[3]-48)*10;
     b94:	93 81       	ldd	r25, Z+3	; 0x03
     b96:	89 2f       	mov	r24, r25
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	c0 97       	sbiw	r24, 0x30	; 48
     b9c:	ac 01       	movw	r20, r24
     b9e:	44 0f       	add	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	88 0f       	add	r24, r24
     ba4:	99 1f       	adc	r25, r25
     ba6:	88 0f       	add	r24, r24
     ba8:	99 1f       	adc	r25, r25
     baa:	88 0f       	add	r24, r24
     bac:	99 1f       	adc	r25, r25
     bae:	84 0f       	add	r24, r20
     bb0:	95 1f       	adc	r25, r21
     bb2:	82 0f       	add	r24, r18
     bb4:	93 1f       	adc	r25, r19
		X+=(Resive[4]-48);
     bb6:	24 81       	ldd	r18, Z+4	; 0x04
		//X+=(Resive[6]-48)/1000.0;
		PWMKocenje=X;
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	20 53       	subi	r18, 0x30	; 48
     bbc:	31 09       	sbc	r19, r1
     bbe:	82 0f       	add	r24, r18
     bc0:	93 1f       	adc	r25, r19
     bc2:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <PWMKocenje+0x1>
     bc6:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <PWMKocenje>
		
		return;
	}
     bca:	df 91       	pop	r29
     bcc:	cf 91       	pop	r28
     bce:	ff 90       	pop	r15
     bd0:	ef 90       	pop	r14
     bd2:	df 90       	pop	r13
     bd4:	cf 90       	pop	r12
     bd6:	08 95       	ret

00000bd8 <__subsf3>:
     bd8:	50 58       	subi	r21, 0x80	; 128

00000bda <__addsf3>:
     bda:	bb 27       	eor	r27, r27
     bdc:	aa 27       	eor	r26, r26
     bde:	0e 94 04 06 	call	0xc08	; 0xc08 <__addsf3x>
     be2:	0c 94 7e 07 	jmp	0xefc	; 0xefc <__fp_round>
     be6:	0e 94 70 07 	call	0xee0	; 0xee0 <__fp_pscA>
     bea:	38 f0       	brcs	.+14     	; 0xbfa <__addsf3+0x20>
     bec:	0e 94 77 07 	call	0xeee	; 0xeee <__fp_pscB>
     bf0:	20 f0       	brcs	.+8      	; 0xbfa <__addsf3+0x20>
     bf2:	39 f4       	brne	.+14     	; 0xc02 <__addsf3+0x28>
     bf4:	9f 3f       	cpi	r25, 0xFF	; 255
     bf6:	19 f4       	brne	.+6      	; 0xbfe <__addsf3+0x24>
     bf8:	26 f4       	brtc	.+8      	; 0xc02 <__addsf3+0x28>
     bfa:	0c 94 6d 07 	jmp	0xeda	; 0xeda <__fp_nan>
     bfe:	0e f4       	brtc	.+2      	; 0xc02 <__addsf3+0x28>
     c00:	e0 95       	com	r30
     c02:	e7 fb       	bst	r30, 7
     c04:	0c 94 67 07 	jmp	0xece	; 0xece <__fp_inf>

00000c08 <__addsf3x>:
     c08:	e9 2f       	mov	r30, r25
     c0a:	0e 94 8f 07 	call	0xf1e	; 0xf1e <__fp_split3>
     c0e:	58 f3       	brcs	.-42     	; 0xbe6 <__addsf3+0xc>
     c10:	ba 17       	cp	r27, r26
     c12:	62 07       	cpc	r22, r18
     c14:	73 07       	cpc	r23, r19
     c16:	84 07       	cpc	r24, r20
     c18:	95 07       	cpc	r25, r21
     c1a:	20 f0       	brcs	.+8      	; 0xc24 <__addsf3x+0x1c>
     c1c:	79 f4       	brne	.+30     	; 0xc3c <__addsf3x+0x34>
     c1e:	a6 f5       	brtc	.+104    	; 0xc88 <__addsf3x+0x80>
     c20:	0c 94 b1 07 	jmp	0xf62	; 0xf62 <__fp_zero>
     c24:	0e f4       	brtc	.+2      	; 0xc28 <__addsf3x+0x20>
     c26:	e0 95       	com	r30
     c28:	0b 2e       	mov	r0, r27
     c2a:	ba 2f       	mov	r27, r26
     c2c:	a0 2d       	mov	r26, r0
     c2e:	0b 01       	movw	r0, r22
     c30:	b9 01       	movw	r22, r18
     c32:	90 01       	movw	r18, r0
     c34:	0c 01       	movw	r0, r24
     c36:	ca 01       	movw	r24, r20
     c38:	a0 01       	movw	r20, r0
     c3a:	11 24       	eor	r1, r1
     c3c:	ff 27       	eor	r31, r31
     c3e:	59 1b       	sub	r21, r25
     c40:	99 f0       	breq	.+38     	; 0xc68 <__addsf3x+0x60>
     c42:	59 3f       	cpi	r21, 0xF9	; 249
     c44:	50 f4       	brcc	.+20     	; 0xc5a <__addsf3x+0x52>
     c46:	50 3e       	cpi	r21, 0xE0	; 224
     c48:	68 f1       	brcs	.+90     	; 0xca4 <__addsf3x+0x9c>
     c4a:	1a 16       	cp	r1, r26
     c4c:	f0 40       	sbci	r31, 0x00	; 0
     c4e:	a2 2f       	mov	r26, r18
     c50:	23 2f       	mov	r18, r19
     c52:	34 2f       	mov	r19, r20
     c54:	44 27       	eor	r20, r20
     c56:	58 5f       	subi	r21, 0xF8	; 248
     c58:	f3 cf       	rjmp	.-26     	; 0xc40 <__addsf3x+0x38>
     c5a:	46 95       	lsr	r20
     c5c:	37 95       	ror	r19
     c5e:	27 95       	ror	r18
     c60:	a7 95       	ror	r26
     c62:	f0 40       	sbci	r31, 0x00	; 0
     c64:	53 95       	inc	r21
     c66:	c9 f7       	brne	.-14     	; 0xc5a <__addsf3x+0x52>
     c68:	7e f4       	brtc	.+30     	; 0xc88 <__addsf3x+0x80>
     c6a:	1f 16       	cp	r1, r31
     c6c:	ba 0b       	sbc	r27, r26
     c6e:	62 0b       	sbc	r22, r18
     c70:	73 0b       	sbc	r23, r19
     c72:	84 0b       	sbc	r24, r20
     c74:	ba f0       	brmi	.+46     	; 0xca4 <__addsf3x+0x9c>
     c76:	91 50       	subi	r25, 0x01	; 1
     c78:	a1 f0       	breq	.+40     	; 0xca2 <__addsf3x+0x9a>
     c7a:	ff 0f       	add	r31, r31
     c7c:	bb 1f       	adc	r27, r27
     c7e:	66 1f       	adc	r22, r22
     c80:	77 1f       	adc	r23, r23
     c82:	88 1f       	adc	r24, r24
     c84:	c2 f7       	brpl	.-16     	; 0xc76 <__addsf3x+0x6e>
     c86:	0e c0       	rjmp	.+28     	; 0xca4 <__addsf3x+0x9c>
     c88:	ba 0f       	add	r27, r26
     c8a:	62 1f       	adc	r22, r18
     c8c:	73 1f       	adc	r23, r19
     c8e:	84 1f       	adc	r24, r20
     c90:	48 f4       	brcc	.+18     	; 0xca4 <__addsf3x+0x9c>
     c92:	87 95       	ror	r24
     c94:	77 95       	ror	r23
     c96:	67 95       	ror	r22
     c98:	b7 95       	ror	r27
     c9a:	f7 95       	ror	r31
     c9c:	9e 3f       	cpi	r25, 0xFE	; 254
     c9e:	08 f0       	brcs	.+2      	; 0xca2 <__addsf3x+0x9a>
     ca0:	b0 cf       	rjmp	.-160    	; 0xc02 <__addsf3+0x28>
     ca2:	93 95       	inc	r25
     ca4:	88 0f       	add	r24, r24
     ca6:	08 f0       	brcs	.+2      	; 0xcaa <__addsf3x+0xa2>
     ca8:	99 27       	eor	r25, r25
     caa:	ee 0f       	add	r30, r30
     cac:	97 95       	ror	r25
     cae:	87 95       	ror	r24
     cb0:	08 95       	ret

00000cb2 <__cmpsf2>:
     cb2:	0e 94 43 07 	call	0xe86	; 0xe86 <__fp_cmp>
     cb6:	08 f4       	brcc	.+2      	; 0xcba <__cmpsf2+0x8>
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	08 95       	ret

00000cbc <__divsf3>:
     cbc:	0e 94 72 06 	call	0xce4	; 0xce4 <__divsf3x>
     cc0:	0c 94 7e 07 	jmp	0xefc	; 0xefc <__fp_round>
     cc4:	0e 94 77 07 	call	0xeee	; 0xeee <__fp_pscB>
     cc8:	58 f0       	brcs	.+22     	; 0xce0 <__divsf3+0x24>
     cca:	0e 94 70 07 	call	0xee0	; 0xee0 <__fp_pscA>
     cce:	40 f0       	brcs	.+16     	; 0xce0 <__divsf3+0x24>
     cd0:	29 f4       	brne	.+10     	; 0xcdc <__divsf3+0x20>
     cd2:	5f 3f       	cpi	r21, 0xFF	; 255
     cd4:	29 f0       	breq	.+10     	; 0xce0 <__divsf3+0x24>
     cd6:	0c 94 67 07 	jmp	0xece	; 0xece <__fp_inf>
     cda:	51 11       	cpse	r21, r1
     cdc:	0c 94 b2 07 	jmp	0xf64	; 0xf64 <__fp_szero>
     ce0:	0c 94 6d 07 	jmp	0xeda	; 0xeda <__fp_nan>

00000ce4 <__divsf3x>:
     ce4:	0e 94 8f 07 	call	0xf1e	; 0xf1e <__fp_split3>
     ce8:	68 f3       	brcs	.-38     	; 0xcc4 <__divsf3+0x8>

00000cea <__divsf3_pse>:
     cea:	99 23       	and	r25, r25
     cec:	b1 f3       	breq	.-20     	; 0xcda <__divsf3+0x1e>
     cee:	55 23       	and	r21, r21
     cf0:	91 f3       	breq	.-28     	; 0xcd6 <__divsf3+0x1a>
     cf2:	95 1b       	sub	r25, r21
     cf4:	55 0b       	sbc	r21, r21
     cf6:	bb 27       	eor	r27, r27
     cf8:	aa 27       	eor	r26, r26
     cfa:	62 17       	cp	r22, r18
     cfc:	73 07       	cpc	r23, r19
     cfe:	84 07       	cpc	r24, r20
     d00:	38 f0       	brcs	.+14     	; 0xd10 <__divsf3_pse+0x26>
     d02:	9f 5f       	subi	r25, 0xFF	; 255
     d04:	5f 4f       	sbci	r21, 0xFF	; 255
     d06:	22 0f       	add	r18, r18
     d08:	33 1f       	adc	r19, r19
     d0a:	44 1f       	adc	r20, r20
     d0c:	aa 1f       	adc	r26, r26
     d0e:	a9 f3       	breq	.-22     	; 0xcfa <__divsf3_pse+0x10>
     d10:	35 d0       	rcall	.+106    	; 0xd7c <__divsf3_pse+0x92>
     d12:	0e 2e       	mov	r0, r30
     d14:	3a f0       	brmi	.+14     	; 0xd24 <__divsf3_pse+0x3a>
     d16:	e0 e8       	ldi	r30, 0x80	; 128
     d18:	32 d0       	rcall	.+100    	; 0xd7e <__divsf3_pse+0x94>
     d1a:	91 50       	subi	r25, 0x01	; 1
     d1c:	50 40       	sbci	r21, 0x00	; 0
     d1e:	e6 95       	lsr	r30
     d20:	00 1c       	adc	r0, r0
     d22:	ca f7       	brpl	.-14     	; 0xd16 <__divsf3_pse+0x2c>
     d24:	2b d0       	rcall	.+86     	; 0xd7c <__divsf3_pse+0x92>
     d26:	fe 2f       	mov	r31, r30
     d28:	29 d0       	rcall	.+82     	; 0xd7c <__divsf3_pse+0x92>
     d2a:	66 0f       	add	r22, r22
     d2c:	77 1f       	adc	r23, r23
     d2e:	88 1f       	adc	r24, r24
     d30:	bb 1f       	adc	r27, r27
     d32:	26 17       	cp	r18, r22
     d34:	37 07       	cpc	r19, r23
     d36:	48 07       	cpc	r20, r24
     d38:	ab 07       	cpc	r26, r27
     d3a:	b0 e8       	ldi	r27, 0x80	; 128
     d3c:	09 f0       	breq	.+2      	; 0xd40 <__divsf3_pse+0x56>
     d3e:	bb 0b       	sbc	r27, r27
     d40:	80 2d       	mov	r24, r0
     d42:	bf 01       	movw	r22, r30
     d44:	ff 27       	eor	r31, r31
     d46:	93 58       	subi	r25, 0x83	; 131
     d48:	5f 4f       	sbci	r21, 0xFF	; 255
     d4a:	3a f0       	brmi	.+14     	; 0xd5a <__divsf3_pse+0x70>
     d4c:	9e 3f       	cpi	r25, 0xFE	; 254
     d4e:	51 05       	cpc	r21, r1
     d50:	78 f0       	brcs	.+30     	; 0xd70 <__divsf3_pse+0x86>
     d52:	0c 94 67 07 	jmp	0xece	; 0xece <__fp_inf>
     d56:	0c 94 b2 07 	jmp	0xf64	; 0xf64 <__fp_szero>
     d5a:	5f 3f       	cpi	r21, 0xFF	; 255
     d5c:	e4 f3       	brlt	.-8      	; 0xd56 <__divsf3_pse+0x6c>
     d5e:	98 3e       	cpi	r25, 0xE8	; 232
     d60:	d4 f3       	brlt	.-12     	; 0xd56 <__divsf3_pse+0x6c>
     d62:	86 95       	lsr	r24
     d64:	77 95       	ror	r23
     d66:	67 95       	ror	r22
     d68:	b7 95       	ror	r27
     d6a:	f7 95       	ror	r31
     d6c:	9f 5f       	subi	r25, 0xFF	; 255
     d6e:	c9 f7       	brne	.-14     	; 0xd62 <__divsf3_pse+0x78>
     d70:	88 0f       	add	r24, r24
     d72:	91 1d       	adc	r25, r1
     d74:	96 95       	lsr	r25
     d76:	87 95       	ror	r24
     d78:	97 f9       	bld	r25, 7
     d7a:	08 95       	ret
     d7c:	e1 e0       	ldi	r30, 0x01	; 1
     d7e:	66 0f       	add	r22, r22
     d80:	77 1f       	adc	r23, r23
     d82:	88 1f       	adc	r24, r24
     d84:	bb 1f       	adc	r27, r27
     d86:	62 17       	cp	r22, r18
     d88:	73 07       	cpc	r23, r19
     d8a:	84 07       	cpc	r24, r20
     d8c:	ba 07       	cpc	r27, r26
     d8e:	20 f0       	brcs	.+8      	; 0xd98 <__divsf3_pse+0xae>
     d90:	62 1b       	sub	r22, r18
     d92:	73 0b       	sbc	r23, r19
     d94:	84 0b       	sbc	r24, r20
     d96:	ba 0b       	sbc	r27, r26
     d98:	ee 1f       	adc	r30, r30
     d9a:	88 f7       	brcc	.-30     	; 0xd7e <__divsf3_pse+0x94>
     d9c:	e0 95       	com	r30
     d9e:	08 95       	ret

00000da0 <__fixsfsi>:
     da0:	0e 94 d7 06 	call	0xdae	; 0xdae <__fixunssfsi>
     da4:	68 94       	set
     da6:	b1 11       	cpse	r27, r1
     da8:	0c 94 b2 07 	jmp	0xf64	; 0xf64 <__fp_szero>
     dac:	08 95       	ret

00000dae <__fixunssfsi>:
     dae:	0e 94 97 07 	call	0xf2e	; 0xf2e <__fp_splitA>
     db2:	88 f0       	brcs	.+34     	; 0xdd6 <__fixunssfsi+0x28>
     db4:	9f 57       	subi	r25, 0x7F	; 127
     db6:	98 f0       	brcs	.+38     	; 0xdde <__fixunssfsi+0x30>
     db8:	b9 2f       	mov	r27, r25
     dba:	99 27       	eor	r25, r25
     dbc:	b7 51       	subi	r27, 0x17	; 23
     dbe:	b0 f0       	brcs	.+44     	; 0xdec <__fixunssfsi+0x3e>
     dc0:	e1 f0       	breq	.+56     	; 0xdfa <__fixunssfsi+0x4c>
     dc2:	66 0f       	add	r22, r22
     dc4:	77 1f       	adc	r23, r23
     dc6:	88 1f       	adc	r24, r24
     dc8:	99 1f       	adc	r25, r25
     dca:	1a f0       	brmi	.+6      	; 0xdd2 <__fixunssfsi+0x24>
     dcc:	ba 95       	dec	r27
     dce:	c9 f7       	brne	.-14     	; 0xdc2 <__fixunssfsi+0x14>
     dd0:	14 c0       	rjmp	.+40     	; 0xdfa <__fixunssfsi+0x4c>
     dd2:	b1 30       	cpi	r27, 0x01	; 1
     dd4:	91 f0       	breq	.+36     	; 0xdfa <__fixunssfsi+0x4c>
     dd6:	0e 94 b1 07 	call	0xf62	; 0xf62 <__fp_zero>
     dda:	b1 e0       	ldi	r27, 0x01	; 1
     ddc:	08 95       	ret
     dde:	0c 94 b1 07 	jmp	0xf62	; 0xf62 <__fp_zero>
     de2:	67 2f       	mov	r22, r23
     de4:	78 2f       	mov	r23, r24
     de6:	88 27       	eor	r24, r24
     de8:	b8 5f       	subi	r27, 0xF8	; 248
     dea:	39 f0       	breq	.+14     	; 0xdfa <__fixunssfsi+0x4c>
     dec:	b9 3f       	cpi	r27, 0xF9	; 249
     dee:	cc f3       	brlt	.-14     	; 0xde2 <__fixunssfsi+0x34>
     df0:	86 95       	lsr	r24
     df2:	77 95       	ror	r23
     df4:	67 95       	ror	r22
     df6:	b3 95       	inc	r27
     df8:	d9 f7       	brne	.-10     	; 0xdf0 <__fixunssfsi+0x42>
     dfa:	3e f4       	brtc	.+14     	; 0xe0a <__fixunssfsi+0x5c>
     dfc:	90 95       	com	r25
     dfe:	80 95       	com	r24
     e00:	70 95       	com	r23
     e02:	61 95       	neg	r22
     e04:	7f 4f       	sbci	r23, 0xFF	; 255
     e06:	8f 4f       	sbci	r24, 0xFF	; 255
     e08:	9f 4f       	sbci	r25, 0xFF	; 255
     e0a:	08 95       	ret

00000e0c <__floatunsisf>:
     e0c:	e8 94       	clt
     e0e:	09 c0       	rjmp	.+18     	; 0xe22 <__floatsisf+0x12>

00000e10 <__floatsisf>:
     e10:	97 fb       	bst	r25, 7
     e12:	3e f4       	brtc	.+14     	; 0xe22 <__floatsisf+0x12>
     e14:	90 95       	com	r25
     e16:	80 95       	com	r24
     e18:	70 95       	com	r23
     e1a:	61 95       	neg	r22
     e1c:	7f 4f       	sbci	r23, 0xFF	; 255
     e1e:	8f 4f       	sbci	r24, 0xFF	; 255
     e20:	9f 4f       	sbci	r25, 0xFF	; 255
     e22:	99 23       	and	r25, r25
     e24:	a9 f0       	breq	.+42     	; 0xe50 <__floatsisf+0x40>
     e26:	f9 2f       	mov	r31, r25
     e28:	96 e9       	ldi	r25, 0x96	; 150
     e2a:	bb 27       	eor	r27, r27
     e2c:	93 95       	inc	r25
     e2e:	f6 95       	lsr	r31
     e30:	87 95       	ror	r24
     e32:	77 95       	ror	r23
     e34:	67 95       	ror	r22
     e36:	b7 95       	ror	r27
     e38:	f1 11       	cpse	r31, r1
     e3a:	f8 cf       	rjmp	.-16     	; 0xe2c <__floatsisf+0x1c>
     e3c:	fa f4       	brpl	.+62     	; 0xe7c <__floatsisf+0x6c>
     e3e:	bb 0f       	add	r27, r27
     e40:	11 f4       	brne	.+4      	; 0xe46 <__floatsisf+0x36>
     e42:	60 ff       	sbrs	r22, 0
     e44:	1b c0       	rjmp	.+54     	; 0xe7c <__floatsisf+0x6c>
     e46:	6f 5f       	subi	r22, 0xFF	; 255
     e48:	7f 4f       	sbci	r23, 0xFF	; 255
     e4a:	8f 4f       	sbci	r24, 0xFF	; 255
     e4c:	9f 4f       	sbci	r25, 0xFF	; 255
     e4e:	16 c0       	rjmp	.+44     	; 0xe7c <__floatsisf+0x6c>
     e50:	88 23       	and	r24, r24
     e52:	11 f0       	breq	.+4      	; 0xe58 <__floatsisf+0x48>
     e54:	96 e9       	ldi	r25, 0x96	; 150
     e56:	11 c0       	rjmp	.+34     	; 0xe7a <__floatsisf+0x6a>
     e58:	77 23       	and	r23, r23
     e5a:	21 f0       	breq	.+8      	; 0xe64 <__floatsisf+0x54>
     e5c:	9e e8       	ldi	r25, 0x8E	; 142
     e5e:	87 2f       	mov	r24, r23
     e60:	76 2f       	mov	r23, r22
     e62:	05 c0       	rjmp	.+10     	; 0xe6e <__floatsisf+0x5e>
     e64:	66 23       	and	r22, r22
     e66:	71 f0       	breq	.+28     	; 0xe84 <__floatsisf+0x74>
     e68:	96 e8       	ldi	r25, 0x86	; 134
     e6a:	86 2f       	mov	r24, r22
     e6c:	70 e0       	ldi	r23, 0x00	; 0
     e6e:	60 e0       	ldi	r22, 0x00	; 0
     e70:	2a f0       	brmi	.+10     	; 0xe7c <__floatsisf+0x6c>
     e72:	9a 95       	dec	r25
     e74:	66 0f       	add	r22, r22
     e76:	77 1f       	adc	r23, r23
     e78:	88 1f       	adc	r24, r24
     e7a:	da f7       	brpl	.-10     	; 0xe72 <__floatsisf+0x62>
     e7c:	88 0f       	add	r24, r24
     e7e:	96 95       	lsr	r25
     e80:	87 95       	ror	r24
     e82:	97 f9       	bld	r25, 7
     e84:	08 95       	ret

00000e86 <__fp_cmp>:
     e86:	99 0f       	add	r25, r25
     e88:	00 08       	sbc	r0, r0
     e8a:	55 0f       	add	r21, r21
     e8c:	aa 0b       	sbc	r26, r26
     e8e:	e0 e8       	ldi	r30, 0x80	; 128
     e90:	fe ef       	ldi	r31, 0xFE	; 254
     e92:	16 16       	cp	r1, r22
     e94:	17 06       	cpc	r1, r23
     e96:	e8 07       	cpc	r30, r24
     e98:	f9 07       	cpc	r31, r25
     e9a:	c0 f0       	brcs	.+48     	; 0xecc <__fp_cmp+0x46>
     e9c:	12 16       	cp	r1, r18
     e9e:	13 06       	cpc	r1, r19
     ea0:	e4 07       	cpc	r30, r20
     ea2:	f5 07       	cpc	r31, r21
     ea4:	98 f0       	brcs	.+38     	; 0xecc <__fp_cmp+0x46>
     ea6:	62 1b       	sub	r22, r18
     ea8:	73 0b       	sbc	r23, r19
     eaa:	84 0b       	sbc	r24, r20
     eac:	95 0b       	sbc	r25, r21
     eae:	39 f4       	brne	.+14     	; 0xebe <__fp_cmp+0x38>
     eb0:	0a 26       	eor	r0, r26
     eb2:	61 f0       	breq	.+24     	; 0xecc <__fp_cmp+0x46>
     eb4:	23 2b       	or	r18, r19
     eb6:	24 2b       	or	r18, r20
     eb8:	25 2b       	or	r18, r21
     eba:	21 f4       	brne	.+8      	; 0xec4 <__fp_cmp+0x3e>
     ebc:	08 95       	ret
     ebe:	0a 26       	eor	r0, r26
     ec0:	09 f4       	brne	.+2      	; 0xec4 <__fp_cmp+0x3e>
     ec2:	a1 40       	sbci	r26, 0x01	; 1
     ec4:	a6 95       	lsr	r26
     ec6:	8f ef       	ldi	r24, 0xFF	; 255
     ec8:	81 1d       	adc	r24, r1
     eca:	81 1d       	adc	r24, r1
     ecc:	08 95       	ret

00000ece <__fp_inf>:
     ece:	97 f9       	bld	r25, 7
     ed0:	9f 67       	ori	r25, 0x7F	; 127
     ed2:	80 e8       	ldi	r24, 0x80	; 128
     ed4:	70 e0       	ldi	r23, 0x00	; 0
     ed6:	60 e0       	ldi	r22, 0x00	; 0
     ed8:	08 95       	ret

00000eda <__fp_nan>:
     eda:	9f ef       	ldi	r25, 0xFF	; 255
     edc:	80 ec       	ldi	r24, 0xC0	; 192
     ede:	08 95       	ret

00000ee0 <__fp_pscA>:
     ee0:	00 24       	eor	r0, r0
     ee2:	0a 94       	dec	r0
     ee4:	16 16       	cp	r1, r22
     ee6:	17 06       	cpc	r1, r23
     ee8:	18 06       	cpc	r1, r24
     eea:	09 06       	cpc	r0, r25
     eec:	08 95       	ret

00000eee <__fp_pscB>:
     eee:	00 24       	eor	r0, r0
     ef0:	0a 94       	dec	r0
     ef2:	12 16       	cp	r1, r18
     ef4:	13 06       	cpc	r1, r19
     ef6:	14 06       	cpc	r1, r20
     ef8:	05 06       	cpc	r0, r21
     efa:	08 95       	ret

00000efc <__fp_round>:
     efc:	09 2e       	mov	r0, r25
     efe:	03 94       	inc	r0
     f00:	00 0c       	add	r0, r0
     f02:	11 f4       	brne	.+4      	; 0xf08 <__fp_round+0xc>
     f04:	88 23       	and	r24, r24
     f06:	52 f0       	brmi	.+20     	; 0xf1c <__fp_round+0x20>
     f08:	bb 0f       	add	r27, r27
     f0a:	40 f4       	brcc	.+16     	; 0xf1c <__fp_round+0x20>
     f0c:	bf 2b       	or	r27, r31
     f0e:	11 f4       	brne	.+4      	; 0xf14 <__fp_round+0x18>
     f10:	60 ff       	sbrs	r22, 0
     f12:	04 c0       	rjmp	.+8      	; 0xf1c <__fp_round+0x20>
     f14:	6f 5f       	subi	r22, 0xFF	; 255
     f16:	7f 4f       	sbci	r23, 0xFF	; 255
     f18:	8f 4f       	sbci	r24, 0xFF	; 255
     f1a:	9f 4f       	sbci	r25, 0xFF	; 255
     f1c:	08 95       	ret

00000f1e <__fp_split3>:
     f1e:	57 fd       	sbrc	r21, 7
     f20:	90 58       	subi	r25, 0x80	; 128
     f22:	44 0f       	add	r20, r20
     f24:	55 1f       	adc	r21, r21
     f26:	59 f0       	breq	.+22     	; 0xf3e <__fp_splitA+0x10>
     f28:	5f 3f       	cpi	r21, 0xFF	; 255
     f2a:	71 f0       	breq	.+28     	; 0xf48 <__fp_splitA+0x1a>
     f2c:	47 95       	ror	r20

00000f2e <__fp_splitA>:
     f2e:	88 0f       	add	r24, r24
     f30:	97 fb       	bst	r25, 7
     f32:	99 1f       	adc	r25, r25
     f34:	61 f0       	breq	.+24     	; 0xf4e <__fp_splitA+0x20>
     f36:	9f 3f       	cpi	r25, 0xFF	; 255
     f38:	79 f0       	breq	.+30     	; 0xf58 <__fp_splitA+0x2a>
     f3a:	87 95       	ror	r24
     f3c:	08 95       	ret
     f3e:	12 16       	cp	r1, r18
     f40:	13 06       	cpc	r1, r19
     f42:	14 06       	cpc	r1, r20
     f44:	55 1f       	adc	r21, r21
     f46:	f2 cf       	rjmp	.-28     	; 0xf2c <__fp_split3+0xe>
     f48:	46 95       	lsr	r20
     f4a:	f1 df       	rcall	.-30     	; 0xf2e <__fp_splitA>
     f4c:	08 c0       	rjmp	.+16     	; 0xf5e <__fp_splitA+0x30>
     f4e:	16 16       	cp	r1, r22
     f50:	17 06       	cpc	r1, r23
     f52:	18 06       	cpc	r1, r24
     f54:	99 1f       	adc	r25, r25
     f56:	f1 cf       	rjmp	.-30     	; 0xf3a <__fp_splitA+0xc>
     f58:	86 95       	lsr	r24
     f5a:	71 05       	cpc	r23, r1
     f5c:	61 05       	cpc	r22, r1
     f5e:	08 94       	sec
     f60:	08 95       	ret

00000f62 <__fp_zero>:
     f62:	e8 94       	clt

00000f64 <__fp_szero>:
     f64:	bb 27       	eor	r27, r27
     f66:	66 27       	eor	r22, r22
     f68:	77 27       	eor	r23, r23
     f6a:	cb 01       	movw	r24, r22
     f6c:	97 f9       	bld	r25, 7
     f6e:	08 95       	ret

00000f70 <__gesf2>:
     f70:	0e 94 43 07 	call	0xe86	; 0xe86 <__fp_cmp>
     f74:	08 f4       	brcc	.+2      	; 0xf78 <__gesf2+0x8>
     f76:	8f ef       	ldi	r24, 0xFF	; 255
     f78:	08 95       	ret

00000f7a <__mulsf3>:
     f7a:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <__mulsf3x>
     f7e:	0c 94 7e 07 	jmp	0xefc	; 0xefc <__fp_round>
     f82:	0e 94 70 07 	call	0xee0	; 0xee0 <__fp_pscA>
     f86:	38 f0       	brcs	.+14     	; 0xf96 <__mulsf3+0x1c>
     f88:	0e 94 77 07 	call	0xeee	; 0xeee <__fp_pscB>
     f8c:	20 f0       	brcs	.+8      	; 0xf96 <__mulsf3+0x1c>
     f8e:	95 23       	and	r25, r21
     f90:	11 f0       	breq	.+4      	; 0xf96 <__mulsf3+0x1c>
     f92:	0c 94 67 07 	jmp	0xece	; 0xece <__fp_inf>
     f96:	0c 94 6d 07 	jmp	0xeda	; 0xeda <__fp_nan>
     f9a:	11 24       	eor	r1, r1
     f9c:	0c 94 b2 07 	jmp	0xf64	; 0xf64 <__fp_szero>

00000fa0 <__mulsf3x>:
     fa0:	0e 94 8f 07 	call	0xf1e	; 0xf1e <__fp_split3>
     fa4:	70 f3       	brcs	.-36     	; 0xf82 <__mulsf3+0x8>

00000fa6 <__mulsf3_pse>:
     fa6:	95 9f       	mul	r25, r21
     fa8:	c1 f3       	breq	.-16     	; 0xf9a <__mulsf3+0x20>
     faa:	95 0f       	add	r25, r21
     fac:	50 e0       	ldi	r21, 0x00	; 0
     fae:	55 1f       	adc	r21, r21
     fb0:	62 9f       	mul	r22, r18
     fb2:	f0 01       	movw	r30, r0
     fb4:	72 9f       	mul	r23, r18
     fb6:	bb 27       	eor	r27, r27
     fb8:	f0 0d       	add	r31, r0
     fba:	b1 1d       	adc	r27, r1
     fbc:	63 9f       	mul	r22, r19
     fbe:	aa 27       	eor	r26, r26
     fc0:	f0 0d       	add	r31, r0
     fc2:	b1 1d       	adc	r27, r1
     fc4:	aa 1f       	adc	r26, r26
     fc6:	64 9f       	mul	r22, r20
     fc8:	66 27       	eor	r22, r22
     fca:	b0 0d       	add	r27, r0
     fcc:	a1 1d       	adc	r26, r1
     fce:	66 1f       	adc	r22, r22
     fd0:	82 9f       	mul	r24, r18
     fd2:	22 27       	eor	r18, r18
     fd4:	b0 0d       	add	r27, r0
     fd6:	a1 1d       	adc	r26, r1
     fd8:	62 1f       	adc	r22, r18
     fda:	73 9f       	mul	r23, r19
     fdc:	b0 0d       	add	r27, r0
     fde:	a1 1d       	adc	r26, r1
     fe0:	62 1f       	adc	r22, r18
     fe2:	83 9f       	mul	r24, r19
     fe4:	a0 0d       	add	r26, r0
     fe6:	61 1d       	adc	r22, r1
     fe8:	22 1f       	adc	r18, r18
     fea:	74 9f       	mul	r23, r20
     fec:	33 27       	eor	r19, r19
     fee:	a0 0d       	add	r26, r0
     ff0:	61 1d       	adc	r22, r1
     ff2:	23 1f       	adc	r18, r19
     ff4:	84 9f       	mul	r24, r20
     ff6:	60 0d       	add	r22, r0
     ff8:	21 1d       	adc	r18, r1
     ffa:	82 2f       	mov	r24, r18
     ffc:	76 2f       	mov	r23, r22
     ffe:	6a 2f       	mov	r22, r26
    1000:	11 24       	eor	r1, r1
    1002:	9f 57       	subi	r25, 0x7F	; 127
    1004:	50 40       	sbci	r21, 0x00	; 0
    1006:	9a f0       	brmi	.+38     	; 0x102e <__mulsf3_pse+0x88>
    1008:	f1 f0       	breq	.+60     	; 0x1046 <__mulsf3_pse+0xa0>
    100a:	88 23       	and	r24, r24
    100c:	4a f0       	brmi	.+18     	; 0x1020 <__mulsf3_pse+0x7a>
    100e:	ee 0f       	add	r30, r30
    1010:	ff 1f       	adc	r31, r31
    1012:	bb 1f       	adc	r27, r27
    1014:	66 1f       	adc	r22, r22
    1016:	77 1f       	adc	r23, r23
    1018:	88 1f       	adc	r24, r24
    101a:	91 50       	subi	r25, 0x01	; 1
    101c:	50 40       	sbci	r21, 0x00	; 0
    101e:	a9 f7       	brne	.-22     	; 0x100a <__mulsf3_pse+0x64>
    1020:	9e 3f       	cpi	r25, 0xFE	; 254
    1022:	51 05       	cpc	r21, r1
    1024:	80 f0       	brcs	.+32     	; 0x1046 <__mulsf3_pse+0xa0>
    1026:	0c 94 67 07 	jmp	0xece	; 0xece <__fp_inf>
    102a:	0c 94 b2 07 	jmp	0xf64	; 0xf64 <__fp_szero>
    102e:	5f 3f       	cpi	r21, 0xFF	; 255
    1030:	e4 f3       	brlt	.-8      	; 0x102a <__mulsf3_pse+0x84>
    1032:	98 3e       	cpi	r25, 0xE8	; 232
    1034:	d4 f3       	brlt	.-12     	; 0x102a <__mulsf3_pse+0x84>
    1036:	86 95       	lsr	r24
    1038:	77 95       	ror	r23
    103a:	67 95       	ror	r22
    103c:	b7 95       	ror	r27
    103e:	f7 95       	ror	r31
    1040:	e7 95       	ror	r30
    1042:	9f 5f       	subi	r25, 0xFF	; 255
    1044:	c1 f7       	brne	.-16     	; 0x1036 <__mulsf3_pse+0x90>
    1046:	fe 2b       	or	r31, r30
    1048:	88 0f       	add	r24, r24
    104a:	91 1d       	adc	r25, r1
    104c:	96 95       	lsr	r25
    104e:	87 95       	ror	r24
    1050:	97 f9       	bld	r25, 7
    1052:	08 95       	ret

00001054 <_exit>:
    1054:	f8 94       	cli

00001056 <__stop_program>:
    1056:	ff cf       	rjmp	.-2      	; 0x1056 <__stop_program>
