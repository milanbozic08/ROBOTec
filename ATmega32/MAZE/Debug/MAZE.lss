
MAZE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000013bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000013bc  00001450  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000091  00800070  00800070  00001460  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001460  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001490  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  000014cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b3c  00000000  00000000  000016cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eea  00000000  00000000  00003208  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013b5  00000000  00000000  000040f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000524  00000000  00000000  000054a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000715  00000000  00000000  000059cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001424  00000000  00000000  000060e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  00007505  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__vector_2>
       c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 0c 05 	jmp	0xa18	; 0xa18 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec eb       	ldi	r30, 0xBC	; 188
      68:	f3 e1       	ldi	r31, 0x13	; 19
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 30       	cpi	r26, 0x01	; 1
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ef 01 	call	0x3de	; 0x3de <main>
      8a:	0c 94 dc 09 	jmp	0x13b8	; 0x13b8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <EncoderInit>:
volatile bool DozvoliZaustavljanjeDesno=false;
volatile bool DozvoliZaustavljanjeLevo=false;

void EncoderInit()
{
	DDRD &= ~(1<<3);		//(Using for interupt INT1)
      92:	8b 98       	cbi	0x11, 3	; 17
	PORTD |= (1<<3);	
      94:	93 9a       	sbi	0x12, 3	; 18
	DDRB &= ~(1<<2);		//  (Using for interupt INT2)
      96:	ba 98       	cbi	0x17, 2	; 23
	PORTB |= (1<<2);	
      98:	c2 9a       	sbi	0x18, 2	; 24
	
	GICR |= (1<<INT1);					// Enable INT0
      9a:	8b b7       	in	r24, 0x3b	; 59
      9c:	80 68       	ori	r24, 0x80	; 128
      9e:	8b bf       	out	0x3b, r24	; 59
	GICR |= (1<<INT2);					// Enable INT0
      a0:	8b b7       	in	r24, 0x3b	; 59
      a2:	80 62       	ori	r24, 0x20	; 32
      a4:	8b bf       	out	0x3b, r24	; 59
	MCUCR = 1<<ISC11 | 1<<ISC10 | 1<<ISC2;	// Trigger INT0 on rising edge
      a6:	8c e4       	ldi	r24, 0x4C	; 76
      a8:	85 bf       	out	0x35, r24	; 53
      aa:	08 95       	ret

000000ac <VoziEnkoderima>:
	//MCUCRS |= (1<<ISC02); 	// Trigger INT0 on rising edge
}


void VoziEnkoderima(direction L,direction R,int PWML,int PWMR,int koraciDesno,int koraciLevo)
{
      ac:	af 92       	push	r10
      ae:	bf 92       	push	r11
      b0:	cf 92       	push	r12
      b2:	df 92       	push	r13
      b4:	ef 92       	push	r14
      b6:	ff 92       	push	r15
      b8:	0f 93       	push	r16
      ba:	1f 93       	push	r17
      bc:	cf 93       	push	r28
      be:	df 93       	push	r29
      c0:	d8 2f       	mov	r29, r24
      c2:	c6 2f       	mov	r28, r22
      c4:	5a 01       	movw	r10, r20
      c6:	69 01       	movw	r12, r18
	DozvoliZaustavljanjeLevo=true;
      c8:	81 e0       	ldi	r24, 0x01	; 1
      ca:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>
	DozvoliZaustavljanjeDesno=true;
      ce:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <DozvoliZaustavljanjeDesno>
	Rcounter=0;
      d2:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <Rcounter+0x1>
      d6:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <Rcounter>
	Lcounter=0;
      da:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <Lcounter+0x1>
      de:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <Lcounter>
	BrojKorakaL=koraciLevo;
      e2:	f0 92 75 00 	sts	0x0075, r15	; 0x800075 <BrojKorakaL+0x1>
      e6:	e0 92 74 00 	sts	0x0074, r14	; 0x800074 <BrojKorakaL>
	BrojKorakaR=koraciDesno;
      ea:	10 93 73 00 	sts	0x0073, r17	; 0x800073 <BrojKorakaR+0x1>
      ee:	00 93 72 00 	sts	0x0072, r16	; 0x800072 <BrojKorakaR>
	MotorStart(true);
      f2:	0e 94 68 02 	call	0x4d0	; 0x4d0 <MotorStart>
	MotorL_Setup(L,PWML);
      f6:	b5 01       	movw	r22, r10
      f8:	8d 2f       	mov	r24, r29
      fa:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <MotorL_Setup>
	MotorR_Setup(R,PWMR);
      fe:	b6 01       	movw	r22, r12
     100:	8c 2f       	mov	r24, r28
     102:	0e 94 71 02 	call	0x4e2	; 0x4e2 <MotorR_Setup>
	
	bool ispadni1=false,ispadni2=false;
     106:	b1 2c       	mov	r11, r1
     108:	d1 2c       	mov	r13, r1
     10a:	cc 24       	eor	r12, r12
     10c:	c3 94       	inc	r12
     10e:	01 c0       	rjmp	.+2      	; 0x112 <VoziEnkoderima+0x66>
     110:	dc 2c       	mov	r13, r12
	
	while(!ispadni1 || !ispadni2)
	{
		if(Lcounter > koraciLevo)
     112:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <Lcounter>
     116:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <Lcounter+0x1>
     11a:	e8 16       	cp	r14, r24
     11c:	f9 06       	cpc	r15, r25
     11e:	6c f4       	brge	.+26     	; 0x13a <VoziEnkoderima+0x8e>
		{
			MotorL_Setup(L,1);
     120:	61 e0       	ldi	r22, 0x01	; 1
     122:	70 e0       	ldi	r23, 0x00	; 0
     124:	8d 2f       	mov	r24, r29
     126:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <MotorL_Setup>
			ispadni1 = true;
		}
		if(Rcounter > koraciDesno)
     12a:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <Rcounter>
     12e:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <Rcounter+0x1>
     132:	08 17       	cp	r16, r24
     134:	19 07       	cpc	r17, r25
     136:	ac f4       	brge	.+42     	; 0x162 <VoziEnkoderima+0xb6>
     138:	08 c0       	rjmp	.+16     	; 0x14a <VoziEnkoderima+0x9e>
     13a:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <Rcounter>
     13e:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <Rcounter+0x1>
     142:	08 17       	cp	r16, r24
     144:	19 07       	cpc	r17, r25
     146:	5c f4       	brge	.+22     	; 0x15e <VoziEnkoderima+0xb2>
     148:	01 c0       	rjmp	.+2      	; 0x14c <VoziEnkoderima+0xa0>
	while(!ispadni1 || !ispadni2)
	{
		if(Lcounter > koraciLevo)
		{
			MotorL_Setup(L,1);
			ispadni1 = true;
     14a:	dc 2c       	mov	r13, r12
		}
		if(Rcounter > koraciDesno)
		{
			MotorR_Setup(R,1);
     14c:	61 e0       	ldi	r22, 0x01	; 1
     14e:	70 e0       	ldi	r23, 0x00	; 0
     150:	8c 2f       	mov	r24, r28
     152:	0e 94 71 02 	call	0x4e2	; 0x4e2 <MotorR_Setup>
	MotorL_Setup(L,PWML);
	MotorR_Setup(R,PWMR);
	
	bool ispadni1=false,ispadni2=false;
	
	while(!ispadni1 || !ispadni2)
     156:	d1 10       	cpse	r13, r1
     158:	06 c0       	rjmp	.+12     	; 0x166 <VoziEnkoderima+0xba>
			ispadni1 = true;
		}
		if(Rcounter > koraciDesno)
		{
			MotorR_Setup(R,1);
			ispadni2 = true;
     15a:	bc 2c       	mov	r11, r12
     15c:	da cf       	rjmp	.-76     	; 0x112 <VoziEnkoderima+0x66>
	MotorL_Setup(L,PWML);
	MotorR_Setup(R,PWMR);
	
	bool ispadni1=false,ispadni2=false;
	
	while(!ispadni1 || !ispadni2)
     15e:	dd 20       	and	r13, r13
     160:	c1 f2       	breq	.-80     	; 0x112 <VoziEnkoderima+0x66>
     162:	bb 20       	and	r11, r11
     164:	a9 f2       	breq	.-86     	; 0x110 <VoziEnkoderima+0x64>
			MotorR_Setup(R,1);
			ispadni2 = true;
		}
	}
	
}
     166:	df 91       	pop	r29
     168:	cf 91       	pop	r28
     16a:	1f 91       	pop	r17
     16c:	0f 91       	pop	r16
     16e:	ff 90       	pop	r15
     170:	ef 90       	pop	r14
     172:	df 90       	pop	r13
     174:	cf 90       	pop	r12
     176:	bf 90       	pop	r11
     178:	af 90       	pop	r10
     17a:	08 95       	ret

0000017c <ULevo>:

void ULevo()
{
     17c:	ef 92       	push	r14
     17e:	ff 92       	push	r15
     180:	0f 93       	push	r16
     182:	1f 93       	push	r17
	if(EnableMotors)
     184:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <EnableMotors>
     188:	88 23       	and	r24, r24
     18a:	79 f0       	breq	.+30     	; 0x1aa <ULevo+0x2e>
	{
		VoziEnkoderima(CCW,CW,100,100,23,23);
     18c:	0f 2e       	mov	r0, r31
     18e:	f7 e1       	ldi	r31, 0x17	; 23
     190:	ef 2e       	mov	r14, r31
     192:	f1 2c       	mov	r15, r1
     194:	f0 2d       	mov	r31, r0
     196:	07 e1       	ldi	r16, 0x17	; 23
     198:	10 e0       	ldi	r17, 0x00	; 0
     19a:	24 e6       	ldi	r18, 0x64	; 100
     19c:	30 e0       	ldi	r19, 0x00	; 0
     19e:	44 e6       	ldi	r20, 0x64	; 100
     1a0:	50 e0       	ldi	r21, 0x00	; 0
     1a2:	60 e0       	ldi	r22, 0x00	; 0
     1a4:	81 e0       	ldi	r24, 0x01	; 1
     1a6:	0e 94 56 00 	call	0xac	; 0xac <VoziEnkoderima>
	}
	
}
     1aa:	1f 91       	pop	r17
     1ac:	0f 91       	pop	r16
     1ae:	ff 90       	pop	r15
     1b0:	ef 90       	pop	r14
     1b2:	08 95       	ret

000001b4 <UDesno>:

void UDesno()
{
     1b4:	ef 92       	push	r14
     1b6:	ff 92       	push	r15
     1b8:	0f 93       	push	r16
     1ba:	1f 93       	push	r17
	if(EnableMotors)
     1bc:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <EnableMotors>
     1c0:	88 23       	and	r24, r24
     1c2:	79 f0       	breq	.+30     	; 0x1e2 <UDesno+0x2e>
	{ 
	VoziEnkoderima(CW,CW,150,150,18,60);
     1c4:	0f 2e       	mov	r0, r31
     1c6:	fc e3       	ldi	r31, 0x3C	; 60
     1c8:	ef 2e       	mov	r14, r31
     1ca:	f1 2c       	mov	r15, r1
     1cc:	f0 2d       	mov	r31, r0
     1ce:	02 e1       	ldi	r16, 0x12	; 18
     1d0:	10 e0       	ldi	r17, 0x00	; 0
     1d2:	26 e9       	ldi	r18, 0x96	; 150
     1d4:	30 e0       	ldi	r19, 0x00	; 0
     1d6:	46 e9       	ldi	r20, 0x96	; 150
     1d8:	50 e0       	ldi	r21, 0x00	; 0
     1da:	60 e0       	ldi	r22, 0x00	; 0
     1dc:	80 e0       	ldi	r24, 0x00	; 0
     1de:	0e 94 56 00 	call	0xac	; 0xac <VoziEnkoderima>
	}
	
}
     1e2:	1f 91       	pop	r17
     1e4:	0f 91       	pop	r16
     1e6:	ff 90       	pop	r15
     1e8:	ef 90       	pop	r14
     1ea:	08 95       	ret

000001ec <__vector_2>:


ISR(INT1_vect)
{
     1ec:	1f 92       	push	r1
     1ee:	0f 92       	push	r0
     1f0:	0f b6       	in	r0, 0x3f	; 63
     1f2:	0f 92       	push	r0
     1f4:	11 24       	eor	r1, r1
     1f6:	2f 93       	push	r18
     1f8:	8f 93       	push	r24
     1fa:	9f 93       	push	r25
	Rcounter++;
     1fc:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <Rcounter>
     200:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <Rcounter+0x1>
     204:	01 96       	adiw	r24, 0x01	; 1
     206:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <Rcounter+0x1>
     20a:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <Rcounter>
	if(Rcounter>500) Rcounter=500;
     20e:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <Rcounter>
     212:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <Rcounter+0x1>
     216:	85 3f       	cpi	r24, 0xF5	; 245
     218:	91 40       	sbci	r25, 0x01	; 1
     21a:	34 f0       	brlt	.+12     	; 0x228 <__vector_2+0x3c>
     21c:	84 ef       	ldi	r24, 0xF4	; 244
     21e:	91 e0       	ldi	r25, 0x01	; 1
     220:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <Rcounter+0x1>
     224:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <Rcounter>
}
     228:	9f 91       	pop	r25
     22a:	8f 91       	pop	r24
     22c:	2f 91       	pop	r18
     22e:	0f 90       	pop	r0
     230:	0f be       	out	0x3f, r0	; 63
     232:	0f 90       	pop	r0
     234:	1f 90       	pop	r1
     236:	18 95       	reti

00000238 <__vector_3>:

ISR(INT2_vect)     
{
     238:	1f 92       	push	r1
     23a:	0f 92       	push	r0
     23c:	0f b6       	in	r0, 0x3f	; 63
     23e:	0f 92       	push	r0
     240:	11 24       	eor	r1, r1
     242:	2f 93       	push	r18
     244:	8f 93       	push	r24
     246:	9f 93       	push	r25
	Lcounter++;
     248:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <Lcounter>
     24c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <Lcounter+0x1>
     250:	01 96       	adiw	r24, 0x01	; 1
     252:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <Lcounter+0x1>
     256:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <Lcounter>
	if(Lcounter>500) Lcounter=500;
     25a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <Lcounter>
     25e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <Lcounter+0x1>
     262:	85 3f       	cpi	r24, 0xF5	; 245
     264:	91 40       	sbci	r25, 0x01	; 1
     266:	34 f0       	brlt	.+12     	; 0x274 <__vector_3+0x3c>
     268:	84 ef       	ldi	r24, 0xF4	; 244
     26a:	91 e0       	ldi	r25, 0x01	; 1
     26c:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <Lcounter+0x1>
     270:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <Lcounter>
     274:	9f 91       	pop	r25
     276:	8f 91       	pop	r24
     278:	2f 91       	pop	r18
     27a:	0f 90       	pop	r0
     27c:	0f be       	out	0x3f, r0	; 63
     27e:	0f 90       	pop	r0
     280:	1f 90       	pop	r1
     282:	18 95       	reti

00000284 <HCSR04Init>:
long int num;

void HCSR04Init()
{
	//Senzor 1
	TrigerOFF;
     284:	95 98       	cbi	0x12, 5	; 18
	DDRD |=(1<<5);
     286:	8d 9a       	sbi	0x11, 5	; 17
	
	PORTD |= (1<<4);	//PULL UP
     288:	94 9a       	sbi	0x12, 4	; 18
	DDRD &=~(1<<4);
     28a:	8c 98       	cbi	0x11, 4	; 17
	
	//Senzor 2
	TrigerOFF2;
     28c:	97 98       	cbi	0x12, 7	; 18
	DDRD |=(1<<7);
     28e:	8f 9a       	sbi	0x11, 7	; 17
	
	PORTD |= (1<<6);	//PULL UP
     290:	96 9a       	sbi	0x12, 6	; 18
	DDRD &=~(1<<6);
     292:	8e 98       	cbi	0x11, 6	; 17
     294:	08 95       	ret

00000296 <HCSR04_Timer2_init>:
}

void HCSR04_Timer2_init()			//TCNT++ svakih 32uS	//TimeOut 8,16mS
{
	TimerTimeOut=false;
     296:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <TimerTimeOut>
	TCNT2 = 0;
     29a:	14 bc       	out	0x24, r1	; 36
	TCCR2 |= (1 << CS22); // preskaler /256
     29c:	85 b5       	in	r24, 0x25	; 37
     29e:	84 60       	ori	r24, 0x04	; 4
     2a0:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= (1 << CS21);
     2a2:	85 b5       	in	r24, 0x25	; 37
     2a4:	82 60       	ori	r24, 0x02	; 2
     2a6:	85 bd       	out	0x25, r24	; 37
	TIMSK |= (1 << TOIE2);
     2a8:	89 b7       	in	r24, 0x39	; 57
     2aa:	80 64       	ori	r24, 0x40	; 64
     2ac:	89 bf       	out	0x39, r24	; 57
     2ae:	08 95       	ret

000002b0 <HCSR_04>:
// 		St=true;
// 	}
	
	float b=0;
	
	if(Senzor == 1)
     2b0:	81 30       	cpi	r24, 0x01	; 1
     2b2:	91 05       	cpc	r25, r1
     2b4:	d1 f5       	brne	.+116    	; 0x32a <HCSR_04+0x7a>
	{
		TrigerON;
     2b6:	95 9a       	sbi	0x12, 5	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2b8:	8a e1       	ldi	r24, 0x1A	; 26
     2ba:	8a 95       	dec	r24
     2bc:	f1 f7       	brne	.-4      	; 0x2ba <HCSR_04+0xa>
     2be:	00 c0       	rjmp	.+0      	; 0x2c0 <HCSR_04+0x10>
		_delay_us(10);
		TrigerOFF;
     2c0:	95 98       	cbi	0x12, 5	; 18
	
		TimerTimeOut=false;
     2c2:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <TimerTimeOut>
		TCNT2 = 0;
     2c6:	14 bc       	out	0x24, r1	; 36
		while (IsEcho==0 && !TimerTimeOut);
     2c8:	84 99       	sbic	0x10, 4	; 16
     2ca:	04 c0       	rjmp	.+8      	; 0x2d4 <HCSR_04+0x24>
     2cc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <TimerTimeOut>
     2d0:	88 23       	and	r24, r24
     2d2:	d1 f3       	breq	.-12     	; 0x2c8 <HCSR_04+0x18>
		
		if(TimerTimeOut) return 98;
     2d4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <TimerTimeOut>
     2d8:	81 11       	cpse	r24, r1
     2da:	5f c0       	rjmp	.+190    	; 0x39a <HCSR_04+0xea>
		
		TCNT2 = 0;
     2dc:	14 bc       	out	0x24, r1	; 36
		TimerTimeOut=false;
     2de:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <TimerTimeOut>
	
		if(TimerTimeOut) return 99;
     2e2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <TimerTimeOut>
     2e6:	81 11       	cpse	r24, r1
     2e8:	5b c0       	rjmp	.+182    	; 0x3a0 <HCSR_04+0xf0>
	
		while(!TimerTimeOut && IsEcho!=0);
     2ea:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <TimerTimeOut>
     2ee:	81 11       	cpse	r24, r1
     2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <HCSR_04+0x46>
     2f2:	84 99       	sbic	0x10, 4	; 16
     2f4:	fa cf       	rjmp	.-12     	; 0x2ea <HCSR_04+0x3a>
		
		b=TCNT2-100;
     2f6:	64 b5       	in	r22, 0x24	; 36
		b=b*coef;
     2f8:	70 e0       	ldi	r23, 0x00	; 0
     2fa:	64 56       	subi	r22, 0x64	; 100
     2fc:	71 09       	sbc	r23, r1
     2fe:	07 2e       	mov	r0, r23
     300:	00 0c       	add	r0, r0
     302:	88 0b       	sbc	r24, r24
     304:	99 0b       	sbc	r25, r25
     306:	0e 94 ba 08 	call	0x1174	; 0x1174 <__floatsisf>
     30a:	20 e0       	ldi	r18, 0x00	; 0
     30c:	30 e0       	ldi	r19, 0x00	; 0
     30e:	40 e0       	ldi	r20, 0x00	; 0
     310:	52 e4       	ldi	r21, 0x42	; 66
     312:	0e 94 6f 09 	call	0x12de	; 0x12de <__mulsf3>
		
// 		if(St)
// 		MotorStart(true);
		
		return (int)b;
     316:	28 e2       	ldi	r18, 0x28	; 40
     318:	3e e7       	ldi	r19, 0x7E	; 126
     31a:	4c e8       	ldi	r20, 0x8C	; 140
     31c:	5c e3       	ldi	r21, 0x3C	; 60
     31e:	0e 94 6f 09 	call	0x12de	; 0x12de <__mulsf3>
     322:	0e 94 82 08 	call	0x1104	; 0x1104 <__fixsfsi>
     326:	cb 01       	movw	r24, r22
     328:	08 95       	ret
	}
	if(Senzor == 2)
     32a:	02 97       	sbiw	r24, 0x02	; 2
     32c:	e1 f5       	brne	.+120    	; 0x3a6 <HCSR_04+0xf6>
	{
		TrigerON2;
     32e:	97 9a       	sbi	0x12, 7	; 18
     330:	8a e1       	ldi	r24, 0x1A	; 26
     332:	8a 95       	dec	r24
     334:	f1 f7       	brne	.-4      	; 0x332 <HCSR_04+0x82>
     336:	00 c0       	rjmp	.+0      	; 0x338 <HCSR_04+0x88>
		_delay_us(10);
		TrigerOFF2;
     338:	97 98       	cbi	0x12, 7	; 18
		
		TimerTimeOut=false;
     33a:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <TimerTimeOut>
		TCNT2 = 0;
     33e:	14 bc       	out	0x24, r1	; 36
		while (IsEcho2==0 && !TimerTimeOut);
     340:	86 99       	sbic	0x10, 6	; 16
     342:	04 c0       	rjmp	.+8      	; 0x34c <HCSR_04+0x9c>
     344:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <TimerTimeOut>
     348:	88 23       	and	r24, r24
     34a:	d1 f3       	breq	.-12     	; 0x340 <HCSR_04+0x90>
		
		if(TimerTimeOut) return 98;
     34c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <TimerTimeOut>
     350:	81 11       	cpse	r24, r1
     352:	2c c0       	rjmp	.+88     	; 0x3ac <HCSR_04+0xfc>
		
		TCNT2 = 0;
     354:	14 bc       	out	0x24, r1	; 36
		TimerTimeOut=false;
     356:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <TimerTimeOut>
		
		while(!TimerTimeOut && IsEcho2!=0);
     35a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <TimerTimeOut>
     35e:	81 11       	cpse	r24, r1
     360:	02 c0       	rjmp	.+4      	; 0x366 <HCSR_04+0xb6>
     362:	86 99       	sbic	0x10, 6	; 16
     364:	fa cf       	rjmp	.-12     	; 0x35a <HCSR_04+0xaa>
		
		if(TimerTimeOut) return 99;
     366:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <TimerTimeOut>
     36a:	81 11       	cpse	r24, r1
     36c:	22 c0       	rjmp	.+68     	; 0x3b2 <HCSR_04+0x102>
		
		b=TCNT2;
     36e:	64 b5       	in	r22, 0x24	; 36
	
		b=b*coef;
     370:	70 e0       	ldi	r23, 0x00	; 0
     372:	80 e0       	ldi	r24, 0x00	; 0
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	0e 94 b8 08 	call	0x1170	; 0x1170 <__floatunsisf>
     37a:	20 e0       	ldi	r18, 0x00	; 0
     37c:	30 e0       	ldi	r19, 0x00	; 0
     37e:	40 e0       	ldi	r20, 0x00	; 0
     380:	52 e4       	ldi	r21, 0x42	; 66
     382:	0e 94 6f 09 	call	0x12de	; 0x12de <__mulsf3>
		
// 		if(St)
// 		MotorStart(true);
		
		return (int)b;
     386:	28 e2       	ldi	r18, 0x28	; 40
     388:	3e e7       	ldi	r19, 0x7E	; 126
     38a:	4c e8       	ldi	r20, 0x8C	; 140
     38c:	5c e3       	ldi	r21, 0x3C	; 60
     38e:	0e 94 6f 09 	call	0x12de	; 0x12de <__mulsf3>
     392:	0e 94 82 08 	call	0x1104	; 0x1104 <__fixsfsi>
     396:	cb 01       	movw	r24, r22
     398:	08 95       	ret
	
		TimerTimeOut=false;
		TCNT2 = 0;
		while (IsEcho==0 && !TimerTimeOut);
		
		if(TimerTimeOut) return 98;
     39a:	82 e6       	ldi	r24, 0x62	; 98
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	08 95       	ret
		
		TCNT2 = 0;
		TimerTimeOut=false;
	
		if(TimerTimeOut) return 99;
     3a0:	83 e6       	ldi	r24, 0x63	; 99
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	08 95       	ret
// 		MotorStart(true);
		
		return (int)b;
	}
	
	return -1;
     3a6:	8f ef       	ldi	r24, 0xFF	; 255
     3a8:	9f ef       	ldi	r25, 0xFF	; 255
     3aa:	08 95       	ret
		
		TimerTimeOut=false;
		TCNT2 = 0;
		while (IsEcho2==0 && !TimerTimeOut);
		
		if(TimerTimeOut) return 98;
     3ac:	82 e6       	ldi	r24, 0x62	; 98
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	08 95       	ret
		TCNT2 = 0;
		TimerTimeOut=false;
		
		while(!TimerTimeOut && IsEcho2!=0);
		
		if(TimerTimeOut) return 99;
     3b2:	83 e6       	ldi	r24, 0x63	; 99
     3b4:	90 e0       	ldi	r25, 0x00	; 0
		
		return (int)b;
	}
	
	return -1;
}
     3b6:	08 95       	ret

000003b8 <__vector_5>:

ISR(TIMER2_OVF_vect)
{
     3b8:	1f 92       	push	r1
     3ba:	0f 92       	push	r0
     3bc:	0f b6       	in	r0, 0x3f	; 63
     3be:	0f 92       	push	r0
     3c0:	11 24       	eor	r1, r1
     3c2:	8f 93       	push	r24
	cli();
     3c4:	f8 94       	cli
	TimerTimeOut=true;
     3c6:	81 e0       	ldi	r24, 0x01	; 1
     3c8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <TimerTimeOut>
	TCNT2=100;
     3cc:	84 e6       	ldi	r24, 0x64	; 100
     3ce:	84 bd       	out	0x24, r24	; 36
	sei();
     3d0:	78 94       	sei
     3d2:	8f 91       	pop	r24
     3d4:	0f 90       	pop	r0
     3d6:	0f be       	out	0x3f, r0	; 63
     3d8:	0f 90       	pop	r0
     3da:	1f 90       	pop	r1
     3dc:	18 95       	reti

000003de <main>:

int main(void)
{
	//////INIT Led
	//PORTD |= (1<<2);		//D2
	DDRD |= (1<<2);
     3de:	8a 9a       	sbi	0x11, 2	; 17
	/////////////////
	
	////UART INIT
	uart_clear();
     3e0:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <uart_clear>
	Uart_inic();
     3e4:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <Uart_inic>
	////////////////
	
	///MOTOR INIT
	timer1_init();
     3e8:	0e 94 1c 02 	call	0x438	; 0x438 <timer1_init>
	Motor_init();
     3ec:	0e 94 27 02 	call	0x44e	; 0x44e <Motor_init>
	///////////////////
	
	///HCRS04 INIT
	HCSR04_Timer2_init();
     3f0:	0e 94 4b 01 	call	0x296	; 0x296 <HCSR04_Timer2_init>
	HCSR04Init();
     3f4:	0e 94 42 01 	call	0x284	; 0x284 <HCSR04Init>
	////////////////
	
	//ENKODERI
	EncoderInit();
     3f8:	0e 94 49 00 	call	0x92	; 0x92 <EncoderInit>

	sei();					// OBAVEZNO (Ukljucuje prekide)
     3fc:	78 94       	sei
	/*	TESTLED_OFF;
		_delay_ms(1000);
		TESTLED_ON;
		_delay_ms(1000);
		*/
		if(uart_full())
     3fe:	0e 94 f6 04 	call	0x9ec	; 0x9ec <uart_full>
     402:	88 23       	and	r24, r24
     404:	21 f0       	breq	.+8      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
		{
			RecognizeMSG();
     406:	0e 94 58 05 	call	0xab0	; 0xab0 <RecognizeMSG>
			
			uart_clear();
     40a:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <uart_clear>
		}
		
		//printf_int(SharpRead());
		if(SharpRead()==9)
     40e:	0e 94 01 03 	call	0x602	; 0x602 <SharpRead>
     412:	09 97       	sbiw	r24, 0x09	; 9
     414:	51 f4       	brne	.+20     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
		{
			ULevo();
     416:	0e 94 be 00 	call	0x17c	; 0x17c <ULevo>
			TESTLED_ON;
     41a:	92 9a       	sbi	0x12, 2	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     41c:	8f e1       	ldi	r24, 0x1F	; 31
     41e:	9e e4       	ldi	r25, 0x4E	; 78
     420:	01 97       	sbiw	r24, 0x01	; 1
     422:	f1 f7       	brne	.-4      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     424:	00 c0       	rjmp	.+0      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     426:	00 00       	nop
			_delay_ms(10);
			TESTLED_OFF;
     428:	92 98       	cbi	0x12, 2	; 18
			////printf_int(SharpRead());	
		}
		
		
		if(KontrolaMotora())
     42a:	0e 94 a9 04 	call	0x952	; 0x952 <KontrolaMotora>
     42e:	88 23       	and	r24, r24
     430:	31 f3       	breq	.-52     	; 0x3fe <main+0x20>
		UDesno();
     432:	0e 94 da 00 	call	0x1b4	; 0x1b4 <UDesno>
     436:	e3 cf       	rjmp	.-58     	; 0x3fe <main+0x20>

00000438 <timer1_init>:
{
	SmerL=X;
}
void MotorR_Smer_Set(direction X)
{
	SmerR=X;
     438:	8e b5       	in	r24, 0x2e	; 46
     43a:	82 60       	ori	r24, 0x02	; 2
     43c:	8e bd       	out	0x2e, r24	; 46
     43e:	8c ee       	ldi	r24, 0xEC	; 236
     440:	9f ef       	ldi	r25, 0xFF	; 255
     442:	9d bd       	out	0x2d, r25	; 45
     444:	8c bd       	out	0x2c, r24	; 44
     446:	89 b7       	in	r24, 0x39	; 57
     448:	84 60       	ori	r24, 0x04	; 4
     44a:	89 bf       	out	0x39, r24	; 57
     44c:	08 95       	ret

0000044e <Motor_init>:
     44e:	d7 9a       	sbi	0x1a, 7	; 26
     450:	d6 9a       	sbi	0x1a, 6	; 26
     452:	d5 9a       	sbi	0x1a, 5	; 26
     454:	d4 9a       	sbi	0x1a, 4	; 26
     456:	dd 98       	cbi	0x1b, 5	; 27
     458:	dc 98       	cbi	0x1b, 4	; 27
     45a:	df 98       	cbi	0x1b, 7	; 27
     45c:	de 98       	cbi	0x1b, 6	; 27
     45e:	08 95       	ret

00000460 <M_Levi_OFF>:
     460:	dd 9a       	sbi	0x1b, 5	; 27
     462:	dc 9a       	sbi	0x1b, 4	; 27
     464:	08 95       	ret

00000466 <M_Levi_ON>:
     466:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <SmerL>
     46a:	81 30       	cpi	r24, 0x01	; 1
     46c:	19 f4       	brne	.+6      	; 0x474 <M_Levi_ON+0xe>
     46e:	dd 98       	cbi	0x1b, 5	; 27
     470:	dc 9a       	sbi	0x1b, 4	; 27
     472:	08 95       	ret
     474:	dd 9a       	sbi	0x1b, 5	; 27
     476:	dc 98       	cbi	0x1b, 4	; 27
     478:	08 95       	ret

0000047a <M_Desni_OFF>:
     47a:	de 9a       	sbi	0x1b, 6	; 27
     47c:	df 9a       	sbi	0x1b, 7	; 27
     47e:	08 95       	ret

00000480 <M_Desni_ON>:
     480:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <SmerR>
     484:	81 30       	cpi	r24, 0x01	; 1
     486:	19 f4       	brne	.+6      	; 0x48e <M_Desni_ON+0xe>
     488:	df 98       	cbi	0x1b, 7	; 27
     48a:	de 9a       	sbi	0x1b, 6	; 27
     48c:	08 95       	ret
     48e:	df 9a       	sbi	0x1b, 7	; 27
     490:	de 98       	cbi	0x1b, 6	; 27
     492:	08 95       	ret

00000494 <MotorL_PWM_Set>:
}
void MotorL_PWM_Set(int X)
{
     494:	8f 3f       	cpi	r24, 0xFF	; 255
     496:	91 05       	cpc	r25, r1
     498:	14 f0       	brlt	.+4      	; 0x49e <MotorL_PWM_Set+0xa>
     49a:	8e ef       	ldi	r24, 0xFE	; 254
     49c:	90 e0       	ldi	r25, 0x00	; 0
	if(X> (PWMRange-1) ) X=(PWMRange-1);
	if(X<1) X=1;
     49e:	18 16       	cp	r1, r24
     4a0:	19 06       	cpc	r1, r25
     4a2:	14 f0       	brlt	.+4      	; 0x4a8 <MotorL_PWM_Set+0x14>
     4a4:	81 e0       	ldi	r24, 0x01	; 1
     4a6:	90 e0       	ldi	r25, 0x00	; 0
	
	M_PWMLevi=X;
     4a8:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <M_PWMLevi+0x1>
     4ac:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <M_PWMLevi>
     4b0:	08 95       	ret

000004b2 <MotorR_PWM_Set>:
}
void MotorR_PWM_Set(int X)
{
     4b2:	8f 3f       	cpi	r24, 0xFF	; 255
     4b4:	91 05       	cpc	r25, r1
     4b6:	14 f0       	brlt	.+4      	; 0x4bc <MotorR_PWM_Set+0xa>
     4b8:	8e ef       	ldi	r24, 0xFE	; 254
     4ba:	90 e0       	ldi	r25, 0x00	; 0
	if(X> (PWMRange-1) ) X=(PWMRange-1);
	if(X<1) X=1;
     4bc:	18 16       	cp	r1, r24
     4be:	19 06       	cpc	r1, r25
     4c0:	14 f0       	brlt	.+4      	; 0x4c6 <MotorR_PWM_Set+0x14>
     4c2:	81 e0       	ldi	r24, 0x01	; 1
     4c4:	90 e0       	ldi	r25, 0x00	; 0
	 
	M_PWMDesni=X;
     4c6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <M_PWMDesni+0x1>
     4ca:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <M_PWMDesni>
     4ce:	08 95       	ret

000004d0 <MotorStart>:
}
void MotorStart(bool X)
{
	EnableMotors=X;
     4d0:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <EnableMotors>
     4d4:	08 95       	ret

000004d6 <MotorL_Setup>:
	}
}

void MotorL_Smer_Set(direction X)
{
	SmerL=X;
     4d6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <SmerL>
}

void MotorL_Setup(direction SMER,int PWM)
{
	MotorL_Smer_Set(SMER);
	MotorL_PWM_Set(PWM);
     4da:	cb 01       	movw	r24, r22
     4dc:	0e 94 4a 02 	call	0x494	; 0x494 <MotorL_PWM_Set>
     4e0:	08 95       	ret

000004e2 <MotorR_Setup>:
{
	SmerL=X;
}
void MotorR_Smer_Set(direction X)
{
	SmerR=X;
     4e2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <SmerR>
	MotorL_PWM_Set(PWM);
}
void MotorR_Setup(direction SMER,int PWM)
{
	MotorR_Smer_Set(SMER);
	MotorR_PWM_Set(PWM);
     4e6:	cb 01       	movw	r24, r22
     4e8:	0e 94 59 02 	call	0x4b2	; 0x4b2 <MotorR_PWM_Set>
     4ec:	08 95       	ret

000004ee <__vector_9>:
}


ISR(TIMER1_OVF_vect)			// motori su na 50Hz sa rasponom PWM od 0-1000 na f od 8Mhz
{
     4ee:	1f 92       	push	r1
     4f0:	0f 92       	push	r0
     4f2:	0f b6       	in	r0, 0x3f	; 63
     4f4:	0f 92       	push	r0
     4f6:	11 24       	eor	r1, r1
     4f8:	2f 93       	push	r18
     4fa:	3f 93       	push	r19
     4fc:	4f 93       	push	r20
     4fe:	5f 93       	push	r21
     500:	6f 93       	push	r22
     502:	7f 93       	push	r23
     504:	8f 93       	push	r24
     506:	9f 93       	push	r25
     508:	af 93       	push	r26
     50a:	bf 93       	push	r27
     50c:	ef 93       	push	r30
     50e:	ff 93       	push	r31
	cli();
     510:	f8 94       	cli
	
	TCNT1 = 65536-20;
     512:	8c ee       	ldi	r24, 0xEC	; 236
     514:	9f ef       	ldi	r25, 0xFF	; 255
     516:	9d bd       	out	0x2d, r25	; 45
     518:	8c bd       	out	0x2c, r24	; 44
		tmr=0;
	}*/
	
	
	//////////Brojaci
	M_TimerLevi++;
     51a:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <M_TimerLevi>
     51e:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <M_TimerLevi+0x1>
     522:	01 96       	adiw	r24, 0x01	; 1
     524:	90 93 7e 00 	sts	0x007E, r25	; 0x80007e <M_TimerLevi+0x1>
     528:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <M_TimerLevi>
	M_TimerDesni++;
     52c:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <M_TimerDesni>
     530:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <M_TimerDesni+0x1>
     534:	01 96       	adiw	r24, 0x01	; 1
     536:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <M_TimerDesni+0x1>
     53a:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <M_TimerDesni>

	/////////MOTOR Levi
	if(M_TimerLevi==M_PWMLevi)
     53e:	20 91 7d 00 	lds	r18, 0x007D	; 0x80007d <M_TimerLevi>
     542:	30 91 7e 00 	lds	r19, 0x007E	; 0x80007e <M_TimerLevi+0x1>
     546:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <M_PWMLevi>
     54a:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <M_PWMLevi+0x1>
     54e:	28 17       	cp	r18, r24
     550:	39 07       	cpc	r19, r25
     552:	11 f4       	brne	.+4      	; 0x558 <__vector_9+0x6a>
	{
		
		M_Levi_OFF();
     554:	0e 94 30 02 	call	0x460	; 0x460 <M_Levi_OFF>
	}
	if(M_TimerLevi>PWMRange && EnableMotors)
     558:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <M_TimerLevi>
     55c:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <M_TimerLevi+0x1>
     560:	8f 3f       	cpi	r24, 0xFF	; 255
     562:	91 05       	cpc	r25, r1
     564:	59 f0       	breq	.+22     	; 0x57c <__vector_9+0x8e>
     566:	54 f0       	brlt	.+20     	; 0x57c <__vector_9+0x8e>
     568:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <EnableMotors>
     56c:	88 23       	and	r24, r24
     56e:	31 f0       	breq	.+12     	; 0x57c <__vector_9+0x8e>
	{
		M_Levi_ON();
     570:	0e 94 33 02 	call	0x466	; 0x466 <M_Levi_ON>
		M_TimerLevi=0;
     574:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <M_TimerLevi+0x1>
     578:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <M_TimerLevi>
	}
	//////////Motor Desni
	if(M_TimerDesni==M_PWMDesni)
     57c:	20 91 7b 00 	lds	r18, 0x007B	; 0x80007b <M_TimerDesni>
     580:	30 91 7c 00 	lds	r19, 0x007C	; 0x80007c <M_TimerDesni+0x1>
     584:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <M_PWMDesni>
     588:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <M_PWMDesni+0x1>
     58c:	28 17       	cp	r18, r24
     58e:	39 07       	cpc	r19, r25
     590:	11 f4       	brne	.+4      	; 0x596 <__vector_9+0xa8>
	{
		M_Desni_OFF();
     592:	0e 94 3d 02 	call	0x47a	; 0x47a <M_Desni_OFF>
	}
	if(M_TimerDesni>PWMRange && EnableMotors)
     596:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <M_TimerDesni>
     59a:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <M_TimerDesni+0x1>
     59e:	8f 3f       	cpi	r24, 0xFF	; 255
     5a0:	91 05       	cpc	r25, r1
     5a2:	59 f0       	breq	.+22     	; 0x5ba <__vector_9+0xcc>
     5a4:	54 f0       	brlt	.+20     	; 0x5ba <__vector_9+0xcc>
     5a6:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <EnableMotors>
     5aa:	88 23       	and	r24, r24
     5ac:	31 f0       	breq	.+12     	; 0x5ba <__vector_9+0xcc>
	{
		M_Desni_ON();
     5ae:	0e 94 40 02 	call	0x480	; 0x480 <M_Desni_ON>
		M_TimerDesni=0;
     5b2:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <M_TimerDesni+0x1>
     5b6:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <M_TimerDesni>
	}

	sei();
     5ba:	78 94       	sei
     5bc:	ff 91       	pop	r31
     5be:	ef 91       	pop	r30
     5c0:	bf 91       	pop	r27
     5c2:	af 91       	pop	r26
     5c4:	9f 91       	pop	r25
     5c6:	8f 91       	pop	r24
     5c8:	7f 91       	pop	r23
     5ca:	6f 91       	pop	r22
     5cc:	5f 91       	pop	r21
     5ce:	4f 91       	pop	r20
     5d0:	3f 91       	pop	r19
     5d2:	2f 91       	pop	r18
     5d4:	0f 90       	pop	r0
     5d6:	0f be       	out	0x3f, r0	; 63
     5d8:	0f 90       	pop	r0
     5da:	1f 90       	pop	r1
     5dc:	18 95       	reti

000005de <ADCsingleREAD>:

int ADCsingleREAD(uint8_t adctouse) //adctouse koji pin treba da se obradi
{
	int ADCval;

	ADMUX = adctouse;         // use #5 ADC
     5de:	87 b9       	out	0x07, r24	; 7
	ADMUX |= (1 << REFS0);    // use AVcc as the reference
     5e0:	3e 9a       	sbi	0x07, 6	; 7
	ADMUX &= ~(1 << ADLAR);   // clear for 10 bit resolution
     5e2:	3d 98       	cbi	0x07, 5	; 7
	
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);    // 128 prescale brzina konverzije
     5e4:	86 b1       	in	r24, 0x06	; 6
     5e6:	87 60       	ori	r24, 0x07	; 7
     5e8:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1 << ADEN);    // Enable the ADC
     5ea:	37 9a       	sbi	0x06, 7	; 6

	ADCSRA |= (1 << ADSC);    // Start the ADC conversion
     5ec:	36 9a       	sbi	0x06, 6	; 6

	while(ADCSRA & (1 << ADSC));      // Thanks T, this line waits for the ADC to finish
     5ee:	36 99       	sbic	0x06, 6	; 6
     5f0:	fe cf       	rjmp	.-4      	; 0x5ee <ADCsingleREAD+0x10>


	ADCval = ADCL;
     5f2:	24 b1       	in	r18, 0x04	; 4
	ADCval = (ADCH << 8) + ADCval;    // ADCH is read so ADC can be updated again
     5f4:	85 b1       	in	r24, 0x05	; 5

	return ADCval;
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	98 2f       	mov	r25, r24
     5fa:	88 27       	eor	r24, r24
}
     5fc:	82 0f       	add	r24, r18
     5fe:	91 1d       	adc	r25, r1
     600:	08 95       	ret

00000602 <SharpRead>:

int SharpRead()
{
     602:	8f 92       	push	r8
     604:	9f 92       	push	r9
     606:	af 92       	push	r10
     608:	bf 92       	push	r11
     60a:	cf 92       	push	r12
     60c:	df 92       	push	r13
     60e:	ef 92       	push	r14
     610:	ff 92       	push	r15
	int ADx= ADCsingleREAD(SharpPin);
     612:	80 e0       	ldi	r24, 0x00	; 0
     614:	0e 94 ef 02 	call	0x5de	; 0x5de <ADCsingleREAD>
	float data= 0.0002*ADx*ADx-0.1316*ADx+30.97; //28594*ADx^(-1.501);
     618:	bc 01       	movw	r22, r24
     61a:	99 0f       	add	r25, r25
     61c:	88 0b       	sbc	r24, r24
     61e:	99 0b       	sbc	r25, r25
     620:	0e 94 ba 08 	call	0x1174	; 0x1174 <__floatsisf>
     624:	6b 01       	movw	r12, r22
     626:	7c 01       	movw	r14, r24
	
	return (int)data;
     628:	27 e1       	ldi	r18, 0x17	; 23
     62a:	37 eb       	ldi	r19, 0xB7	; 183
     62c:	41 e5       	ldi	r20, 0x51	; 81
     62e:	59 e3       	ldi	r21, 0x39	; 57
     630:	0e 94 6f 09 	call	0x12de	; 0x12de <__mulsf3>
     634:	a7 01       	movw	r20, r14
     636:	96 01       	movw	r18, r12
     638:	0e 94 6f 09 	call	0x12de	; 0x12de <__mulsf3>
     63c:	4b 01       	movw	r8, r22
     63e:	5c 01       	movw	r10, r24
     640:	27 e2       	ldi	r18, 0x27	; 39
     642:	32 ec       	ldi	r19, 0xC2	; 194
     644:	46 e0       	ldi	r20, 0x06	; 6
     646:	5e e3       	ldi	r21, 0x3E	; 62
     648:	c7 01       	movw	r24, r14
     64a:	b6 01       	movw	r22, r12
     64c:	0e 94 6f 09 	call	0x12de	; 0x12de <__mulsf3>
     650:	9b 01       	movw	r18, r22
     652:	ac 01       	movw	r20, r24
     654:	c5 01       	movw	r24, r10
     656:	b4 01       	movw	r22, r8
     658:	0e 94 9e 07 	call	0xf3c	; 0xf3c <__subsf3>
     65c:	2f e8       	ldi	r18, 0x8F	; 143
     65e:	32 ec       	ldi	r19, 0xC2	; 194
     660:	47 ef       	ldi	r20, 0xF7	; 247
     662:	51 e4       	ldi	r21, 0x41	; 65
     664:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__addsf3>
     668:	0e 94 82 08 	call	0x1104	; 0x1104 <__fixsfsi>
}
     66c:	cb 01       	movw	r24, r22
     66e:	ff 90       	pop	r15
     670:	ef 90       	pop	r14
     672:	df 90       	pop	r13
     674:	cf 90       	pop	r12
     676:	bf 90       	pop	r11
     678:	af 90       	pop	r10
     67a:	9f 90       	pop	r9
     67c:	8f 90       	pop	r8
     67e:	08 95       	ret

00000680 <PID_reg>:
	{PWM=PWMZadato/2;	return;}
	
	PWM=PWMZadato/2-(Kpb/1000.0*greska*PWMZadato);
}

int PID_reg(int merenje){
     680:	4f 92       	push	r4
     682:	5f 92       	push	r5
     684:	6f 92       	push	r6
     686:	7f 92       	push	r7
     688:	8f 92       	push	r8
     68a:	9f 92       	push	r9
     68c:	af 92       	push	r10
     68e:	bf 92       	push	r11
     690:	cf 92       	push	r12
     692:	df 92       	push	r13
     694:	ef 92       	push	r14
     696:	ff 92       	push	r15
     698:	cf 93       	push	r28
     69a:	df 93       	push	r29
     69c:	00 d0       	rcall	.+0      	; 0x69e <PID_reg+0x1e>
     69e:	00 d0       	rcall	.+0      	; 0x6a0 <PID_reg+0x20>
     6a0:	cd b7       	in	r28, 0x3d	; 61
     6a2:	de b7       	in	r29, 0x3e	; 62
	
	float e=0;              //greska
	float incKp=0;          //inkrementalni deo uz Kp
	float incKd=0;          //inkrementalni deo uz Kd
	
	e=(13-merenje)*100; // AKO JE POZITIVNO TREBA DA SE KOCI LEVI MOTOR
     6a4:	2d e0       	ldi	r18, 0x0D	; 13
     6a6:	30 e0       	ldi	r19, 0x00	; 0
     6a8:	28 1b       	sub	r18, r24
     6aa:	39 0b       	sbc	r19, r25
     6ac:	84 e6       	ldi	r24, 0x64	; 100
     6ae:	82 9f       	mul	r24, r18
     6b0:	b0 01       	movw	r22, r0
     6b2:	83 9f       	mul	r24, r19
     6b4:	70 0d       	add	r23, r0
     6b6:	11 24       	eor	r1, r1
     6b8:	07 2e       	mov	r0, r23
     6ba:	00 0c       	add	r0, r0
     6bc:	88 0b       	sbc	r24, r24
     6be:	99 0b       	sbc	r25, r25
     6c0:	0e 94 ba 08 	call	0x1174	; 0x1174 <__floatsisf>
     6c4:	6b 01       	movw	r12, r22
     6c6:	7c 01       	movw	r14, r24
	//Brzinska regulacija
	//BrzinskaRegulacija(e);
	///////////////////////////////
	
	
	incKi += Ki*e;     //inkrementalni deo uz Kp
     6c8:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <Ki>
     6cc:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <Ki+0x1>
     6d0:	40 91 8a 00 	lds	r20, 0x008A	; 0x80008a <Ki+0x2>
     6d4:	50 91 8b 00 	lds	r21, 0x008B	; 0x80008b <Ki+0x3>
     6d8:	0e 94 6f 09 	call	0x12de	; 0x12de <__mulsf3>
     6dc:	20 91 98 00 	lds	r18, 0x0098	; 0x800098 <incKi>
     6e0:	30 91 99 00 	lds	r19, 0x0099	; 0x800099 <incKi+0x1>
     6e4:	40 91 9a 00 	lds	r20, 0x009A	; 0x80009a <incKi+0x2>
     6e8:	50 91 9b 00 	lds	r21, 0x009B	; 0x80009b <incKi+0x3>
     6ec:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__addsf3>
     6f0:	4b 01       	movw	r8, r22
     6f2:	5c 01       	movw	r10, r24
     6f4:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <incKi>
     6f8:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <incKi+0x1>
     6fc:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <incKi+0x2>
     700:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <incKi+0x3>
	if(incKi>150) incKi=150;
     704:	20 e0       	ldi	r18, 0x00	; 0
     706:	30 e0       	ldi	r19, 0x00	; 0
     708:	46 e1       	ldi	r20, 0x16	; 22
     70a:	53 e4       	ldi	r21, 0x43	; 67
     70c:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__gesf2>
     710:	18 16       	cp	r1, r24
     712:	6c f4       	brge	.+26     	; 0x72e <PID_reg+0xae>
     714:	80 e0       	ldi	r24, 0x00	; 0
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	a6 e1       	ldi	r26, 0x16	; 22
     71a:	b3 e4       	ldi	r27, 0x43	; 67
     71c:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <incKi>
     720:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <incKi+0x1>
     724:	a0 93 9a 00 	sts	0x009A, r26	; 0x80009a <incKi+0x2>
     728:	b0 93 9b 00 	sts	0x009B, r27	; 0x80009b <incKi+0x3>
     72c:	16 c0       	rjmp	.+44     	; 0x75a <PID_reg+0xda>
	if(incKi<-150) incKi=-150;
     72e:	20 e0       	ldi	r18, 0x00	; 0
     730:	30 e0       	ldi	r19, 0x00	; 0
     732:	46 e1       	ldi	r20, 0x16	; 22
     734:	53 ec       	ldi	r21, 0xC3	; 195
     736:	c5 01       	movw	r24, r10
     738:	b4 01       	movw	r22, r8
     73a:	0e 94 0b 08 	call	0x1016	; 0x1016 <__cmpsf2>
     73e:	88 23       	and	r24, r24
     740:	64 f4       	brge	.+24     	; 0x75a <PID_reg+0xda>
     742:	80 e0       	ldi	r24, 0x00	; 0
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	a6 e1       	ldi	r26, 0x16	; 22
     748:	b3 ec       	ldi	r27, 0xC3	; 195
     74a:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <incKi>
     74e:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <incKi+0x1>
     752:	a0 93 9a 00 	sts	0x009A, r26	; 0x80009a <incKi+0x2>
     756:	b0 93 9b 00 	sts	0x009B, r27	; 0x80009b <incKi+0x3>
	
	incKp = Kp*e;             //inkrementalni deo uz Ki
     75a:	20 91 6a 00 	lds	r18, 0x006A	; 0x80006a <Kp>
     75e:	30 91 6b 00 	lds	r19, 0x006B	; 0x80006b <Kp+0x1>
     762:	40 91 6c 00 	lds	r20, 0x006C	; 0x80006c <Kp+0x2>
     766:	50 91 6d 00 	lds	r21, 0x006D	; 0x80006d <Kp+0x3>
     76a:	c7 01       	movw	r24, r14
     76c:	b6 01       	movw	r22, r12
     76e:	0e 94 6f 09 	call	0x12de	; 0x12de <__mulsf3>
     772:	2b 01       	movw	r4, r22
     774:	3c 01       	movw	r6, r24
	
	incKd = Kd*(e-2*e_old+e+e_old2);     //inkrementalni deo uz Kd
     776:	80 90 94 00 	lds	r8, 0x0094	; 0x800094 <e_old>
     77a:	90 90 95 00 	lds	r9, 0x0095	; 0x800095 <e_old+0x1>
     77e:	a0 90 96 00 	lds	r10, 0x0096	; 0x800096 <e_old+0x2>
     782:	b0 90 97 00 	lds	r11, 0x0097	; 0x800097 <e_old+0x3>
     786:	a5 01       	movw	r20, r10
     788:	94 01       	movw	r18, r8
     78a:	c5 01       	movw	r24, r10
     78c:	b4 01       	movw	r22, r8
     78e:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__addsf3>
     792:	9b 01       	movw	r18, r22
     794:	ac 01       	movw	r20, r24
     796:	c7 01       	movw	r24, r14
     798:	b6 01       	movw	r22, r12
     79a:	0e 94 9e 07 	call	0xf3c	; 0xf3c <__subsf3>
     79e:	a7 01       	movw	r20, r14
     7a0:	96 01       	movw	r18, r12
     7a2:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__addsf3>
     7a6:	20 91 90 00 	lds	r18, 0x0090	; 0x800090 <e_old2>
     7aa:	30 91 91 00 	lds	r19, 0x0091	; 0x800091 <e_old2+0x1>
     7ae:	40 91 92 00 	lds	r20, 0x0092	; 0x800092 <e_old2+0x2>
     7b2:	50 91 93 00 	lds	r21, 0x0093	; 0x800093 <e_old2+0x3>
     7b6:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__addsf3>
     7ba:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <Kd>
     7be:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <Kd+0x1>
     7c2:	40 91 86 00 	lds	r20, 0x0086	; 0x800086 <Kd+0x2>
     7c6:	50 91 87 00 	lds	r21, 0x0087	; 0x800087 <Kd+0x3>
     7ca:	0e 94 6f 09 	call	0x12de	; 0x12de <__mulsf3>
     7ce:	69 83       	std	Y+1, r22	; 0x01
     7d0:	7a 83       	std	Y+2, r23	; 0x02
     7d2:	8b 83       	std	Y+3, r24	; 0x03
     7d4:	9c 83       	std	Y+4, r25	; 0x04
	
	e_old2 = e_old;           //greska e(kT-2T)
     7d6:	80 92 90 00 	sts	0x0090, r8	; 0x800090 <e_old2>
     7da:	90 92 91 00 	sts	0x0091, r9	; 0x800091 <e_old2+0x1>
     7de:	a0 92 92 00 	sts	0x0092, r10	; 0x800092 <e_old2+0x2>
     7e2:	b0 92 93 00 	sts	0x0093, r11	; 0x800093 <e_old2+0x3>
	e_old = e;                //greska e(kT-T)
     7e6:	c0 92 94 00 	sts	0x0094, r12	; 0x800094 <e_old>
     7ea:	d0 92 95 00 	sts	0x0095, r13	; 0x800095 <e_old+0x1>
     7ee:	e0 92 96 00 	sts	0x0096, r14	; 0x800096 <e_old+0x2>
     7f2:	f0 92 97 00 	sts	0x0097, r15	; 0x800097 <e_old+0x3>
	
	u = incKp + incKi + incKd;  //izracunavanje izlazne velicine
     7f6:	20 91 98 00 	lds	r18, 0x0098	; 0x800098 <incKi>
     7fa:	30 91 99 00 	lds	r19, 0x0099	; 0x800099 <incKi+0x1>
     7fe:	40 91 9a 00 	lds	r20, 0x009A	; 0x80009a <incKi+0x2>
     802:	50 91 9b 00 	lds	r21, 0x009B	; 0x80009b <incKi+0x3>
     806:	c3 01       	movw	r24, r6
     808:	b2 01       	movw	r22, r4
     80a:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__addsf3>
     80e:	29 81       	ldd	r18, Y+1	; 0x01
     810:	3a 81       	ldd	r19, Y+2	; 0x02
     812:	4b 81       	ldd	r20, Y+3	; 0x03
     814:	5c 81       	ldd	r21, Y+4	; 0x04
     816:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__addsf3>
     81a:	4b 01       	movw	r8, r22
     81c:	5c 01       	movw	r10, r24
     81e:	60 93 8c 00 	sts	0x008C, r22	; 0x80008c <u>
     822:	70 93 8d 00 	sts	0x008D, r23	; 0x80008d <u+0x1>
     826:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <u+0x2>
     82a:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <u+0x3>
	
	if( u > (PWM/2) )
     82e:	e0 90 64 00 	lds	r14, 0x0064	; 0x800064 <PWM>
     832:	f0 90 65 00 	lds	r15, 0x0065	; 0x800065 <PWM+0x1>
     836:	b7 01       	movw	r22, r14
     838:	ff 20       	and	r15, r15
     83a:	14 f4       	brge	.+4      	; 0x840 <PID_reg+0x1c0>
     83c:	6f 5f       	subi	r22, 0xFF	; 255
     83e:	7f 4f       	sbci	r23, 0xFF	; 255
     840:	75 95       	asr	r23
     842:	67 95       	ror	r22
     844:	07 2e       	mov	r0, r23
     846:	00 0c       	add	r0, r0
     848:	88 0b       	sbc	r24, r24
     84a:	99 0b       	sbc	r25, r25
     84c:	0e 94 ba 08 	call	0x1174	; 0x1174 <__floatsisf>
     850:	2b 01       	movw	r4, r22
     852:	3c 01       	movw	r6, r24
     854:	9b 01       	movw	r18, r22
     856:	ac 01       	movw	r20, r24
     858:	c5 01       	movw	r24, r10
     85a:	b4 01       	movw	r22, r8
     85c:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__gesf2>
     860:	18 16       	cp	r1, r24
     862:	44 f4       	brge	.+16     	; 0x874 <__stack+0x15>
	u = (PWM/2);     //provera opsega
     864:	40 92 8c 00 	sts	0x008C, r4	; 0x80008c <u>
     868:	50 92 8d 00 	sts	0x008D, r5	; 0x80008d <u+0x1>
     86c:	60 92 8e 00 	sts	0x008E, r6	; 0x80008e <u+0x2>
     870:	70 92 8f 00 	sts	0x008F, r7	; 0x80008f <u+0x3>
	if( u < (-PWM/4) )
     874:	66 27       	eor	r22, r22
     876:	77 27       	eor	r23, r23
     878:	6e 19       	sub	r22, r14
     87a:	7f 09       	sbc	r23, r15
     87c:	12 f4       	brpl	.+4      	; 0x882 <__stack+0x23>
     87e:	6d 5f       	subi	r22, 0xFD	; 253
     880:	7f 4f       	sbci	r23, 0xFF	; 255
     882:	75 95       	asr	r23
     884:	67 95       	ror	r22
     886:	75 95       	asr	r23
     888:	67 95       	ror	r22
     88a:	07 2e       	mov	r0, r23
     88c:	00 0c       	add	r0, r0
     88e:	88 0b       	sbc	r24, r24
     890:	99 0b       	sbc	r25, r25
     892:	0e 94 ba 08 	call	0x1174	; 0x1174 <__floatsisf>
     896:	6b 01       	movw	r12, r22
     898:	7c 01       	movw	r14, r24
     89a:	20 91 8c 00 	lds	r18, 0x008C	; 0x80008c <u>
     89e:	30 91 8d 00 	lds	r19, 0x008D	; 0x80008d <u+0x1>
     8a2:	40 91 8e 00 	lds	r20, 0x008E	; 0x80008e <u+0x2>
     8a6:	50 91 8f 00 	lds	r21, 0x008F	; 0x80008f <u+0x3>
     8aa:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__gesf2>
     8ae:	18 16       	cp	r1, r24
     8b0:	44 f4       	brge	.+16     	; 0x8c2 <__stack+0x63>
	u = (-PWM/4);
     8b2:	c0 92 8c 00 	sts	0x008C, r12	; 0x80008c <u>
     8b6:	d0 92 8d 00 	sts	0x008D, r13	; 0x80008d <u+0x1>
     8ba:	e0 92 8e 00 	sts	0x008E, r14	; 0x80008e <u+0x2>
     8be:	f0 92 8f 00 	sts	0x008F, r15	; 0x80008f <u+0x3>
	
	return (int)u;
     8c2:	60 91 8c 00 	lds	r22, 0x008C	; 0x80008c <u>
     8c6:	70 91 8d 00 	lds	r23, 0x008D	; 0x80008d <u+0x1>
     8ca:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <u+0x2>
     8ce:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <u+0x3>
     8d2:	0e 94 82 08 	call	0x1104	; 0x1104 <__fixsfsi>
}
     8d6:	cb 01       	movw	r24, r22
     8d8:	0f 90       	pop	r0
     8da:	0f 90       	pop	r0
     8dc:	0f 90       	pop	r0
     8de:	0f 90       	pop	r0
     8e0:	df 91       	pop	r29
     8e2:	cf 91       	pop	r28
     8e4:	ff 90       	pop	r15
     8e6:	ef 90       	pop	r14
     8e8:	df 90       	pop	r13
     8ea:	cf 90       	pop	r12
     8ec:	bf 90       	pop	r11
     8ee:	af 90       	pop	r10
     8f0:	9f 90       	pop	r9
     8f2:	8f 90       	pop	r8
     8f4:	7f 90       	pop	r7
     8f6:	6f 90       	pop	r6
     8f8:	5f 90       	pop	r5
     8fa:	4f 90       	pop	r4
     8fc:	08 95       	ret

000008fe <MotorR_Setupx>:

void MotorR_Setupx(int U)
{		
	if(U>PWM)
     8fe:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <PWM>
     902:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <PWM+0x1>
     906:	68 17       	cp	r22, r24
     908:	79 07       	cpc	r23, r25
     90a:	44 f4       	brge	.+16     	; 0x91c <MotorR_Setupx+0x1e>
	{MotorR_Setup(CCW,(U-PWM));	//Vrti u suprotnom ako je greska prevelika
     90c:	9c 01       	movw	r18, r24
     90e:	26 1b       	sub	r18, r22
     910:	37 0b       	sbc	r19, r23
     912:	b9 01       	movw	r22, r18
     914:	81 e0       	ldi	r24, 0x01	; 1
     916:	0e 94 71 02 	call	0x4e2	; 0x4e2 <MotorR_Setup>
	return;}
     91a:	08 95       	ret
	MotorR_Setup(CW,(PWM-U));		// Za normalnu gresku vrti samo sporije
     91c:	68 1b       	sub	r22, r24
     91e:	79 0b       	sbc	r23, r25
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	0e 94 71 02 	call	0x4e2	; 0x4e2 <MotorR_Setup>
     926:	08 95       	ret

00000928 <MotorL_Setupx>:
}

void MotorL_Setupx(int U)
{
	if(U>PWM)
     928:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <PWM>
     92c:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <PWM+0x1>
     930:	68 17       	cp	r22, r24
     932:	79 07       	cpc	r23, r25
     934:	44 f4       	brge	.+16     	; 0x946 <MotorL_Setupx+0x1e>
	{MotorL_Setup(CCW,(U-PWM));	//Vrti u suprotnom ako je greska prevelika
     936:	9c 01       	movw	r18, r24
     938:	26 1b       	sub	r18, r22
     93a:	37 0b       	sbc	r19, r23
     93c:	b9 01       	movw	r22, r18
     93e:	81 e0       	ldi	r24, 0x01	; 1
     940:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <MotorL_Setup>
	return;}
     944:	08 95       	ret
	MotorL_Setup(CW,(PWM-U));		// Za normalnu gresku vrti samo sporije
     946:	68 1b       	sub	r22, r24
     948:	79 0b       	sbc	r23, r25
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <MotorL_Setup>
     950:	08 95       	ret

00000952 <KontrolaMotora>:
}

bool KontrolaMotora()
{
     952:	cf 93       	push	r28
     954:	df 93       	push	r29
     956:	8f ec       	ldi	r24, 0xCF	; 207
     958:	97 e0       	ldi	r25, 0x07	; 7
     95a:	01 97       	sbiw	r24, 0x01	; 1
     95c:	f1 f7       	brne	.-4      	; 0x95a <KontrolaMotora+0x8>
     95e:	00 c0       	rjmp	.+0      	; 0x960 <KontrolaMotora+0xe>
     960:	00 00       	nop
	int merenje=0;
	
	_delay_ms(1);
	merenje=HCSR_04(2);
     962:	82 e0       	ldi	r24, 0x02	; 2
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	0e 94 58 01 	call	0x2b0	; 0x2b0 <HCSR_04>
	
	//printf_int(merenje);
	if(merenje>27)
     96a:	8c 31       	cpi	r24, 0x1C	; 28
     96c:	91 05       	cpc	r25, r1
     96e:	9c f0       	brlt	.+38     	; 0x996 <KontrolaMotora+0x44>
	{
		if(HCSR_04(2)>27)
     970:	82 e0       	ldi	r24, 0x02	; 2
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	0e 94 58 01 	call	0x2b0	; 0x2b0 <HCSR_04>
     978:	4c 97       	sbiw	r24, 0x1c	; 28
     97a:	0c f0       	brlt	.+2      	; 0x97e <KontrolaMotora+0x2c>
		TESTLED_ON;
     97c:	92 9a       	sbi	0x12, 2	; 18
     97e:	9f e7       	ldi	r25, 0x7F	; 127
     980:	28 e3       	ldi	r18, 0x38	; 56
     982:	81 e0       	ldi	r24, 0x01	; 1
     984:	91 50       	subi	r25, 0x01	; 1
     986:	20 40       	sbci	r18, 0x00	; 0
     988:	80 40       	sbci	r24, 0x00	; 0
     98a:	e1 f7       	brne	.-8      	; 0x984 <KontrolaMotora+0x32>
     98c:	00 c0       	rjmp	.+0      	; 0x98e <KontrolaMotora+0x3c>
     98e:	00 00       	nop
		_delay_ms(50);
		TESTLED_OFF;
     990:	92 98       	cbi	0x12, 2	; 18
		return true;
     992:	81 e0       	ldi	r24, 0x01	; 1
     994:	1a c0       	rjmp	.+52     	; 0x9ca <KontrolaMotora+0x78>
	}
	
	int U=PID_reg(merenje);	// AKO JE POZITIVNO TREBA DA SE KOCI LEVI MOTOR
     996:	0e 94 40 03 	call	0x680	; 0x680 <PID_reg>
     99a:	ec 01       	movw	r28, r24
	
	if(U>0)		//Usporavaj levi motor
     99c:	18 16       	cp	r1, r24
     99e:	19 06       	cpc	r1, r25
     9a0:	4c f4       	brge	.+18     	; 0x9b4 <KontrolaMotora+0x62>
	{
		MotorR_Setupx(0);
     9a2:	80 e0       	ldi	r24, 0x00	; 0
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	0e 94 7f 04 	call	0x8fe	; 0x8fe <MotorR_Setupx>
		MotorL_Setupx(U);
     9aa:	ce 01       	movw	r24, r28
     9ac:	0e 94 94 04 	call	0x928	; 0x928 <MotorL_Setupx>
		U=U*(-1);
		MotorR_Setupx(U);
		MotorL_Setupx(0);
	}
	
	return false;
     9b0:	80 e0       	ldi	r24, 0x00	; 0
     9b2:	0b c0       	rjmp	.+22     	; 0x9ca <KontrolaMotora+0x78>
		MotorL_Setupx(U);
	}
	else		// Usporavaj desni motor
	{
		U=U*(-1);
		MotorR_Setupx(U);
     9b4:	88 27       	eor	r24, r24
     9b6:	99 27       	eor	r25, r25
     9b8:	8c 1b       	sub	r24, r28
     9ba:	9d 0b       	sbc	r25, r29
     9bc:	0e 94 7f 04 	call	0x8fe	; 0x8fe <MotorR_Setupx>
		MotorL_Setupx(0);
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	0e 94 94 04 	call	0x928	; 0x928 <MotorL_Setupx>
	}
	
	return false;
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	df 91       	pop	r29
     9cc:	cf 91       	pop	r28
     9ce:	08 95       	ret

000009d0 <Uart_inic>:
	Str[i]='\0';

	sprintf((char*)Str,"%d \n",Num);

	printf_string((char *)Str);
}
     9d0:	90 9a       	sbi	0x12, 0	; 18
     9d2:	88 98       	cbi	0x11, 0	; 17
     9d4:	89 9a       	sbi	0x11, 1	; 17
     9d6:	10 bc       	out	0x20, r1	; 32
     9d8:	83 e3       	ldi	r24, 0x33	; 51
     9da:	89 b9       	out	0x09, r24	; 9
     9dc:	8a b1       	in	r24, 0x0a	; 10
     9de:	88 61       	ori	r24, 0x18	; 24
     9e0:	8a b9       	out	0x0a, r24	; 10
     9e2:	57 9a       	sbi	0x0a, 7	; 10
     9e4:	80 b5       	in	r24, 0x20	; 32
     9e6:	86 68       	ori	r24, 0x86	; 134
     9e8:	80 bd       	out	0x20, r24	; 32
     9ea:	08 95       	ret

000009ec <uart_full>:
	}
}

bool uart_full()	// ako je false onda nista nije stiglo ...
{
	return ResivedOK;
     9ec:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <ResivedOK>
}
     9f0:	08 95       	ret

000009f2 <uart_clear>:

void uart_clear()
{
	ResivedOK=false;
     9f2:	10 92 9c 00 	sts	0x009C, r1	; 0x80009c <ResivedOK>
	
	for(int k=0;k<100;k++)
     9f6:	80 e0       	ldi	r24, 0x00	; 0
     9f8:	90 e0       	ldi	r25, 0x00	; 0
	{
		Resive[k]='\0';
     9fa:	fc 01       	movw	r30, r24
     9fc:	e3 56       	subi	r30, 0x63	; 99
     9fe:	ff 4f       	sbci	r31, 0xFF	; 255
     a00:	10 82       	st	Z, r1

void uart_clear()
{
	ResivedOK=false;
	
	for(int k=0;k<100;k++)
     a02:	01 96       	adiw	r24, 0x01	; 1
     a04:	84 36       	cpi	r24, 0x64	; 100
     a06:	91 05       	cpc	r25, r1
     a08:	c1 f7       	brne	.-16     	; 0x9fa <uart_clear+0x8>
	{
		Resive[k]='\0';
	}

	brojcanik=-1;
     a0a:	8f ef       	ldi	r24, 0xFF	; 255
     a0c:	9f ef       	ldi	r25, 0xFF	; 255
     a0e:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <brojcanik+0x1>
     a12:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <brojcanik>
     a16:	08 95       	ret

00000a18 <__vector_13>:
}

ISR (USART_RXC_vect)
{		
     a18:	1f 92       	push	r1
     a1a:	0f 92       	push	r0
     a1c:	0f b6       	in	r0, 0x3f	; 63
     a1e:	0f 92       	push	r0
     a20:	11 24       	eor	r1, r1
     a22:	8f 93       	push	r24
     a24:	9f 93       	push	r25
     a26:	ef 93       	push	r30
     a28:	ff 93       	push	r31
		brojcanik++;										
     a2a:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <brojcanik>
     a2e:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <brojcanik+0x1>
     a32:	01 96       	adiw	r24, 0x01	; 1
     a34:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <brojcanik+0x1>
     a38:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <brojcanik>
		if(brojcanik>99) brojcanik=99;											//ne daj prepunjavanje bafera
     a3c:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <brojcanik>
     a40:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <brojcanik+0x1>
     a44:	84 36       	cpi	r24, 0x64	; 100
     a46:	91 05       	cpc	r25, r1
     a48:	34 f0       	brlt	.+12     	; 0xa56 <__vector_13+0x3e>
     a4a:	83 e6       	ldi	r24, 0x63	; 99
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <brojcanik+0x1>
     a52:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <brojcanik>
	
		Resive[brojcanik]=UDR;
     a56:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <brojcanik>
     a5a:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <brojcanik+0x1>
     a5e:	8c b1       	in	r24, 0x0c	; 12
     a60:	e3 56       	subi	r30, 0x63	; 99
     a62:	ff 4f       	sbci	r31, 0xFF	; 255
     a64:	80 83       	st	Z, r24
		
		if(Resive[brojcanik]=='\r' || Resive[brojcanik]=='\n')
     a66:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <brojcanik>
     a6a:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <brojcanik+0x1>
     a6e:	e3 56       	subi	r30, 0x63	; 99
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	80 81       	ld	r24, Z
     a74:	8d 30       	cpi	r24, 0x0D	; 13
     a76:	49 f0       	breq	.+18     	; 0xa8a <__vector_13+0x72>
     a78:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <brojcanik>
     a7c:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <brojcanik+0x1>
     a80:	e3 56       	subi	r30, 0x63	; 99
     a82:	ff 4f       	sbci	r31, 0xFF	; 255
     a84:	80 81       	ld	r24, Z
     a86:	8a 30       	cpi	r24, 0x0A	; 10
     a88:	51 f4       	brne	.+20     	; 0xa9e <__vector_13+0x86>
		{
			Resive[brojcanik]='\0';
     a8a:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <brojcanik>
     a8e:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <brojcanik+0x1>
     a92:	e3 56       	subi	r30, 0x63	; 99
     a94:	ff 4f       	sbci	r31, 0xFF	; 255
     a96:	10 82       	st	Z, r1

			//brojcanik=-1;

			ResivedOK=true;
     a98:	81 e0       	ldi	r24, 0x01	; 1
     a9a:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <ResivedOK>
		}	
     a9e:	ff 91       	pop	r31
     aa0:	ef 91       	pop	r30
     aa2:	9f 91       	pop	r25
     aa4:	8f 91       	pop	r24
     aa6:	0f 90       	pop	r0
     aa8:	0f be       	out	0x3f, r0	; 63
     aaa:	0f 90       	pop	r0
     aac:	1f 90       	pop	r1
     aae:	18 95       	reti

00000ab0 <RecognizeMSG>:
 */ 
#include "UARTHendler.h"
#include <util/delay.h>

void RecognizeMSG()
{
     ab0:	cf 92       	push	r12
     ab2:	df 92       	push	r13
     ab4:	ef 92       	push	r14
     ab6:	ff 92       	push	r15
     ab8:	cf 93       	push	r28
     aba:	df 93       	push	r29
	if(Resive[0]=='O' && Resive[1]=='N')
     abc:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <Resive>
     ac0:	8f 34       	cpi	r24, 0x4F	; 79
     ac2:	81 f4       	brne	.+32     	; 0xae4 <RecognizeMSG+0x34>
     ac4:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <Resive+0x1>
     ac8:	8e 34       	cpi	r24, 0x4E	; 78
     aca:	61 f4       	brne	.+24     	; 0xae4 <RecognizeMSG+0x34>
	{
		TESTLED_ON;
     acc:	92 9a       	sbi	0x12, 2	; 18
     ace:	8f e1       	ldi	r24, 0x1F	; 31
     ad0:	9e e4       	ldi	r25, 0x4E	; 78
     ad2:	01 97       	sbiw	r24, 0x01	; 1
     ad4:	f1 f7       	brne	.-4      	; 0xad2 <RecognizeMSG+0x22>
     ad6:	00 c0       	rjmp	.+0      	; 0xad8 <RecognizeMSG+0x28>
     ad8:	00 00       	nop
		_delay_ms(10);
		TESTLED_OFF;
     ada:	92 98       	cbi	0x12, 2	; 18
		MotorStart(true);
     adc:	81 e0       	ldi	r24, 0x01	; 1
     ade:	0e 94 68 02 	call	0x4d0	; 0x4d0 <MotorStart>
		return;
     ae2:	25 c2       	rjmp	.+1098   	; 0xf2e <RecognizeMSG+0x47e>
	}
	if(Resive[0]=='O' && Resive[1]=='F')
     ae4:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <Resive>
     ae8:	8f 34       	cpi	r24, 0x4F	; 79
     aea:	81 f4       	brne	.+32     	; 0xb0c <RecognizeMSG+0x5c>
     aec:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <Resive+0x1>
     af0:	86 34       	cpi	r24, 0x46	; 70
     af2:	61 f4       	brne	.+24     	; 0xb0c <RecognizeMSG+0x5c>
	{
		TESTLED_ON;
     af4:	92 9a       	sbi	0x12, 2	; 18
     af6:	8f e1       	ldi	r24, 0x1F	; 31
     af8:	9e e4       	ldi	r25, 0x4E	; 78
     afa:	01 97       	sbiw	r24, 0x01	; 1
     afc:	f1 f7       	brne	.-4      	; 0xafa <RecognizeMSG+0x4a>
     afe:	00 c0       	rjmp	.+0      	; 0xb00 <RecognizeMSG+0x50>
     b00:	00 00       	nop
		_delay_ms(10);
		TESTLED_OFF;
     b02:	92 98       	cbi	0x12, 2	; 18
		MotorStart(false);
     b04:	80 e0       	ldi	r24, 0x00	; 0
     b06:	0e 94 68 02 	call	0x4d0	; 0x4d0 <MotorStart>
		return;
     b0a:	11 c2       	rjmp	.+1058   	; 0xf2e <RecognizeMSG+0x47e>
	}
	if(Resive[0]=='P' && Resive[1]=='W')		//PWM
     b0c:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <Resive>
     b10:	80 35       	cpi	r24, 0x50	; 80
     b12:	99 f5       	brne	.+102    	; 0xb7a <RecognizeMSG+0xca>
     b14:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <Resive+0x1>
     b18:	87 35       	cpi	r24, 0x57	; 87
     b1a:	79 f5       	brne	.+94     	; 0xb7a <RecognizeMSG+0xca>
	{
		int X=0;
		
		TESTLED_ON;
     b1c:	92 9a       	sbi	0x12, 2	; 18
     b1e:	8f e1       	ldi	r24, 0x1F	; 31
     b20:	9e e4       	ldi	r25, 0x4E	; 78
     b22:	01 97       	sbiw	r24, 0x01	; 1
     b24:	f1 f7       	brne	.-4      	; 0xb22 <RecognizeMSG+0x72>
     b26:	00 c0       	rjmp	.+0      	; 0xb28 <RecognizeMSG+0x78>
     b28:	00 00       	nop
		_delay_ms(10);
		TESTLED_OFF;
     b2a:	92 98       	cbi	0x12, 2	; 18
		
		X=(Resive[2]-48)*100;
     b2c:	ed e9       	ldi	r30, 0x9D	; 157
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	82 81       	ldd	r24, Z+2	; 0x02
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	c0 97       	sbiw	r24, 0x30	; 48
     b36:	44 e6       	ldi	r20, 0x64	; 100
     b38:	48 9f       	mul	r20, r24
     b3a:	90 01       	movw	r18, r0
     b3c:	49 9f       	mul	r20, r25
     b3e:	30 0d       	add	r19, r0
     b40:	11 24       	eor	r1, r1
		X+=(Resive[3]-48)*10;
     b42:	93 81       	ldd	r25, Z+3	; 0x03
     b44:	89 2f       	mov	r24, r25
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	c0 97       	sbiw	r24, 0x30	; 48
     b4a:	ac 01       	movw	r20, r24
     b4c:	44 0f       	add	r20, r20
     b4e:	55 1f       	adc	r21, r21
     b50:	88 0f       	add	r24, r24
     b52:	99 1f       	adc	r25, r25
     b54:	88 0f       	add	r24, r24
     b56:	99 1f       	adc	r25, r25
     b58:	88 0f       	add	r24, r24
     b5a:	99 1f       	adc	r25, r25
     b5c:	84 0f       	add	r24, r20
     b5e:	95 1f       	adc	r25, r21
     b60:	82 0f       	add	r24, r18
     b62:	93 1f       	adc	r25, r19
		X+=(Resive[4]-48);
     b64:	24 81       	ldd	r18, Z+4	; 0x04
		
		PWM=X;
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	20 53       	subi	r18, 0x30	; 48
     b6a:	31 09       	sbc	r19, r1
     b6c:	82 0f       	add	r24, r18
     b6e:	93 1f       	adc	r25, r19
     b70:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <PWM+0x1>
     b74:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <PWM>
		return;
     b78:	da c1       	rjmp	.+948    	; 0xf2e <RecognizeMSG+0x47e>
	}
	
	if(Resive[0]=='W' && Resive[1]=='P')		// P parametar
     b7a:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <Resive>
     b7e:	87 35       	cpi	r24, 0x57	; 87
     b80:	09 f0       	breq	.+2      	; 0xb84 <RecognizeMSG+0xd4>
     b82:	64 c0       	rjmp	.+200    	; 0xc4c <RecognizeMSG+0x19c>
     b84:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <Resive+0x1>
     b88:	80 35       	cpi	r24, 0x50	; 80
     b8a:	09 f0       	breq	.+2      	; 0xb8e <RecognizeMSG+0xde>
     b8c:	5f c0       	rjmp	.+190    	; 0xc4c <RecognizeMSG+0x19c>
	{
		float X=0;
		
		TESTLED_ON;
     b8e:	92 9a       	sbi	0x12, 2	; 18
     b90:	8f e1       	ldi	r24, 0x1F	; 31
     b92:	9e e4       	ldi	r25, 0x4E	; 78
     b94:	01 97       	sbiw	r24, 0x01	; 1
     b96:	f1 f7       	brne	.-4      	; 0xb94 <RecognizeMSG+0xe4>
     b98:	00 c0       	rjmp	.+0      	; 0xb9a <RecognizeMSG+0xea>
     b9a:	00 00       	nop
		_delay_ms(10);
		TESTLED_OFF;
     b9c:	92 98       	cbi	0x12, 2	; 18
		
		X=(Resive[2]-48);
     b9e:	cd e9       	ldi	r28, 0x9D	; 157
     ba0:	d0 e0       	ldi	r29, 0x00	; 0
     ba2:	6a 81       	ldd	r22, Y+2	; 0x02
     ba4:	70 e0       	ldi	r23, 0x00	; 0
     ba6:	60 53       	subi	r22, 0x30	; 48
     ba8:	71 09       	sbc	r23, r1
     baa:	07 2e       	mov	r0, r23
     bac:	00 0c       	add	r0, r0
     bae:	88 0b       	sbc	r24, r24
     bb0:	99 0b       	sbc	r25, r25
     bb2:	0e 94 ba 08 	call	0x1174	; 0x1174 <__floatsisf>
     bb6:	6b 01       	movw	r12, r22
     bb8:	7c 01       	movw	r14, r24
		X+=(Resive[4]-48)/10.0;
     bba:	6c 81       	ldd	r22, Y+4	; 0x04
     bbc:	70 e0       	ldi	r23, 0x00	; 0
     bbe:	60 53       	subi	r22, 0x30	; 48
     bc0:	71 09       	sbc	r23, r1
     bc2:	07 2e       	mov	r0, r23
     bc4:	00 0c       	add	r0, r0
     bc6:	88 0b       	sbc	r24, r24
     bc8:	99 0b       	sbc	r25, r25
     bca:	0e 94 ba 08 	call	0x1174	; 0x1174 <__floatsisf>
     bce:	20 e0       	ldi	r18, 0x00	; 0
     bd0:	30 e0       	ldi	r19, 0x00	; 0
     bd2:	40 e2       	ldi	r20, 0x20	; 32
     bd4:	51 e4       	ldi	r21, 0x41	; 65
     bd6:	0e 94 10 08 	call	0x1020	; 0x1020 <__divsf3>
     bda:	a7 01       	movw	r20, r14
     bdc:	96 01       	movw	r18, r12
     bde:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__addsf3>
     be2:	6b 01       	movw	r12, r22
     be4:	7c 01       	movw	r14, r24
		X+=(Resive[5]-48)/100.0;
     be6:	6d 81       	ldd	r22, Y+5	; 0x05
     be8:	70 e0       	ldi	r23, 0x00	; 0
     bea:	60 53       	subi	r22, 0x30	; 48
     bec:	71 09       	sbc	r23, r1
     bee:	07 2e       	mov	r0, r23
     bf0:	00 0c       	add	r0, r0
     bf2:	88 0b       	sbc	r24, r24
     bf4:	99 0b       	sbc	r25, r25
     bf6:	0e 94 ba 08 	call	0x1174	; 0x1174 <__floatsisf>
     bfa:	20 e0       	ldi	r18, 0x00	; 0
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	48 ec       	ldi	r20, 0xC8	; 200
     c00:	52 e4       	ldi	r21, 0x42	; 66
     c02:	0e 94 10 08 	call	0x1020	; 0x1020 <__divsf3>
     c06:	a7 01       	movw	r20, r14
     c08:	96 01       	movw	r18, r12
     c0a:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__addsf3>
     c0e:	6b 01       	movw	r12, r22
     c10:	7c 01       	movw	r14, r24
		X+=(Resive[6]-48)/1000.0;
     c12:	6e 81       	ldd	r22, Y+6	; 0x06
		
		Kp=X;
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	60 53       	subi	r22, 0x30	; 48
     c18:	71 09       	sbc	r23, r1
     c1a:	07 2e       	mov	r0, r23
     c1c:	00 0c       	add	r0, r0
     c1e:	88 0b       	sbc	r24, r24
     c20:	99 0b       	sbc	r25, r25
     c22:	0e 94 ba 08 	call	0x1174	; 0x1174 <__floatsisf>
     c26:	20 e0       	ldi	r18, 0x00	; 0
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	4a e7       	ldi	r20, 0x7A	; 122
     c2c:	54 e4       	ldi	r21, 0x44	; 68
     c2e:	0e 94 10 08 	call	0x1020	; 0x1020 <__divsf3>
     c32:	a7 01       	movw	r20, r14
     c34:	96 01       	movw	r18, r12
     c36:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__addsf3>
     c3a:	60 93 6a 00 	sts	0x006A, r22	; 0x80006a <Kp>
     c3e:	70 93 6b 00 	sts	0x006B, r23	; 0x80006b <Kp+0x1>
     c42:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <Kp+0x2>
     c46:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <Kp+0x3>
		return;
     c4a:	71 c1       	rjmp	.+738    	; 0xf2e <RecognizeMSG+0x47e>
	}
	
	if(Resive[0]=='W' && Resive[1]=='I')		// I parametar
     c4c:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <Resive>
     c50:	87 35       	cpi	r24, 0x57	; 87
     c52:	09 f0       	breq	.+2      	; 0xc56 <RecognizeMSG+0x1a6>
     c54:	64 c0       	rjmp	.+200    	; 0xd1e <RecognizeMSG+0x26e>
     c56:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <Resive+0x1>
     c5a:	89 34       	cpi	r24, 0x49	; 73
     c5c:	09 f0       	breq	.+2      	; 0xc60 <RecognizeMSG+0x1b0>
     c5e:	5f c0       	rjmp	.+190    	; 0xd1e <RecognizeMSG+0x26e>
	{
		float X=0;
		
		TESTLED_ON;
     c60:	92 9a       	sbi	0x12, 2	; 18
     c62:	8f e1       	ldi	r24, 0x1F	; 31
     c64:	9e e4       	ldi	r25, 0x4E	; 78
     c66:	01 97       	sbiw	r24, 0x01	; 1
     c68:	f1 f7       	brne	.-4      	; 0xc66 <RecognizeMSG+0x1b6>
     c6a:	00 c0       	rjmp	.+0      	; 0xc6c <RecognizeMSG+0x1bc>
     c6c:	00 00       	nop
		_delay_ms(10);
		TESTLED_OFF;
     c6e:	92 98       	cbi	0x12, 2	; 18
		
		X=(Resive[2]-48);
     c70:	cd e9       	ldi	r28, 0x9D	; 157
     c72:	d0 e0       	ldi	r29, 0x00	; 0
     c74:	6a 81       	ldd	r22, Y+2	; 0x02
     c76:	70 e0       	ldi	r23, 0x00	; 0
     c78:	60 53       	subi	r22, 0x30	; 48
     c7a:	71 09       	sbc	r23, r1
     c7c:	07 2e       	mov	r0, r23
     c7e:	00 0c       	add	r0, r0
     c80:	88 0b       	sbc	r24, r24
     c82:	99 0b       	sbc	r25, r25
     c84:	0e 94 ba 08 	call	0x1174	; 0x1174 <__floatsisf>
     c88:	6b 01       	movw	r12, r22
     c8a:	7c 01       	movw	r14, r24
		X+=(Resive[4]-48)/10.0;
     c8c:	6c 81       	ldd	r22, Y+4	; 0x04
     c8e:	70 e0       	ldi	r23, 0x00	; 0
     c90:	60 53       	subi	r22, 0x30	; 48
     c92:	71 09       	sbc	r23, r1
     c94:	07 2e       	mov	r0, r23
     c96:	00 0c       	add	r0, r0
     c98:	88 0b       	sbc	r24, r24
     c9a:	99 0b       	sbc	r25, r25
     c9c:	0e 94 ba 08 	call	0x1174	; 0x1174 <__floatsisf>
     ca0:	20 e0       	ldi	r18, 0x00	; 0
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	40 e2       	ldi	r20, 0x20	; 32
     ca6:	51 e4       	ldi	r21, 0x41	; 65
     ca8:	0e 94 10 08 	call	0x1020	; 0x1020 <__divsf3>
     cac:	a7 01       	movw	r20, r14
     cae:	96 01       	movw	r18, r12
     cb0:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__addsf3>
     cb4:	6b 01       	movw	r12, r22
     cb6:	7c 01       	movw	r14, r24
		X+=(Resive[5]-48)/100.0;
     cb8:	6d 81       	ldd	r22, Y+5	; 0x05
     cba:	70 e0       	ldi	r23, 0x00	; 0
     cbc:	60 53       	subi	r22, 0x30	; 48
     cbe:	71 09       	sbc	r23, r1
     cc0:	07 2e       	mov	r0, r23
     cc2:	00 0c       	add	r0, r0
     cc4:	88 0b       	sbc	r24, r24
     cc6:	99 0b       	sbc	r25, r25
     cc8:	0e 94 ba 08 	call	0x1174	; 0x1174 <__floatsisf>
     ccc:	20 e0       	ldi	r18, 0x00	; 0
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	48 ec       	ldi	r20, 0xC8	; 200
     cd2:	52 e4       	ldi	r21, 0x42	; 66
     cd4:	0e 94 10 08 	call	0x1020	; 0x1020 <__divsf3>
     cd8:	a7 01       	movw	r20, r14
     cda:	96 01       	movw	r18, r12
     cdc:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__addsf3>
     ce0:	6b 01       	movw	r12, r22
     ce2:	7c 01       	movw	r14, r24
		X+=(Resive[6]-48)/1000.0;
     ce4:	6e 81       	ldd	r22, Y+6	; 0x06
		
		Ki=X;
     ce6:	70 e0       	ldi	r23, 0x00	; 0
     ce8:	60 53       	subi	r22, 0x30	; 48
     cea:	71 09       	sbc	r23, r1
     cec:	07 2e       	mov	r0, r23
     cee:	00 0c       	add	r0, r0
     cf0:	88 0b       	sbc	r24, r24
     cf2:	99 0b       	sbc	r25, r25
     cf4:	0e 94 ba 08 	call	0x1174	; 0x1174 <__floatsisf>
     cf8:	20 e0       	ldi	r18, 0x00	; 0
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	4a e7       	ldi	r20, 0x7A	; 122
     cfe:	54 e4       	ldi	r21, 0x44	; 68
     d00:	0e 94 10 08 	call	0x1020	; 0x1020 <__divsf3>
     d04:	a7 01       	movw	r20, r14
     d06:	96 01       	movw	r18, r12
     d08:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__addsf3>
     d0c:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <Ki>
     d10:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <Ki+0x1>
     d14:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <Ki+0x2>
     d18:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <Ki+0x3>
		return;
     d1c:	08 c1       	rjmp	.+528    	; 0xf2e <RecognizeMSG+0x47e>
	}
	
	if(Resive[0]=='W' && Resive[1]=='D')		// D parametar
     d1e:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <Resive>
     d22:	87 35       	cpi	r24, 0x57	; 87
     d24:	09 f0       	breq	.+2      	; 0xd28 <RecognizeMSG+0x278>
     d26:	64 c0       	rjmp	.+200    	; 0xdf0 <RecognizeMSG+0x340>
     d28:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <Resive+0x1>
     d2c:	84 34       	cpi	r24, 0x44	; 68
     d2e:	09 f0       	breq	.+2      	; 0xd32 <RecognizeMSG+0x282>
     d30:	5f c0       	rjmp	.+190    	; 0xdf0 <RecognizeMSG+0x340>
	{
		float X=0;
		
		TESTLED_ON;
     d32:	92 9a       	sbi	0x12, 2	; 18
     d34:	8f e1       	ldi	r24, 0x1F	; 31
     d36:	9e e4       	ldi	r25, 0x4E	; 78
     d38:	01 97       	sbiw	r24, 0x01	; 1
     d3a:	f1 f7       	brne	.-4      	; 0xd38 <RecognizeMSG+0x288>
     d3c:	00 c0       	rjmp	.+0      	; 0xd3e <RecognizeMSG+0x28e>
     d3e:	00 00       	nop
		_delay_ms(10);
		TESTLED_OFF;
     d40:	92 98       	cbi	0x12, 2	; 18
		
		X=(Resive[2]-48);
     d42:	cd e9       	ldi	r28, 0x9D	; 157
     d44:	d0 e0       	ldi	r29, 0x00	; 0
     d46:	6a 81       	ldd	r22, Y+2	; 0x02
     d48:	70 e0       	ldi	r23, 0x00	; 0
     d4a:	60 53       	subi	r22, 0x30	; 48
     d4c:	71 09       	sbc	r23, r1
     d4e:	07 2e       	mov	r0, r23
     d50:	00 0c       	add	r0, r0
     d52:	88 0b       	sbc	r24, r24
     d54:	99 0b       	sbc	r25, r25
     d56:	0e 94 ba 08 	call	0x1174	; 0x1174 <__floatsisf>
     d5a:	6b 01       	movw	r12, r22
     d5c:	7c 01       	movw	r14, r24
		X+=(Resive[4]-48)/10.0;
     d5e:	6c 81       	ldd	r22, Y+4	; 0x04
     d60:	70 e0       	ldi	r23, 0x00	; 0
     d62:	60 53       	subi	r22, 0x30	; 48
     d64:	71 09       	sbc	r23, r1
     d66:	07 2e       	mov	r0, r23
     d68:	00 0c       	add	r0, r0
     d6a:	88 0b       	sbc	r24, r24
     d6c:	99 0b       	sbc	r25, r25
     d6e:	0e 94 ba 08 	call	0x1174	; 0x1174 <__floatsisf>
     d72:	20 e0       	ldi	r18, 0x00	; 0
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	40 e2       	ldi	r20, 0x20	; 32
     d78:	51 e4       	ldi	r21, 0x41	; 65
     d7a:	0e 94 10 08 	call	0x1020	; 0x1020 <__divsf3>
     d7e:	a7 01       	movw	r20, r14
     d80:	96 01       	movw	r18, r12
     d82:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__addsf3>
     d86:	6b 01       	movw	r12, r22
     d88:	7c 01       	movw	r14, r24
		X+=(Resive[5]-48)/100.0;
     d8a:	6d 81       	ldd	r22, Y+5	; 0x05
     d8c:	70 e0       	ldi	r23, 0x00	; 0
     d8e:	60 53       	subi	r22, 0x30	; 48
     d90:	71 09       	sbc	r23, r1
     d92:	07 2e       	mov	r0, r23
     d94:	00 0c       	add	r0, r0
     d96:	88 0b       	sbc	r24, r24
     d98:	99 0b       	sbc	r25, r25
     d9a:	0e 94 ba 08 	call	0x1174	; 0x1174 <__floatsisf>
     d9e:	20 e0       	ldi	r18, 0x00	; 0
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	48 ec       	ldi	r20, 0xC8	; 200
     da4:	52 e4       	ldi	r21, 0x42	; 66
     da6:	0e 94 10 08 	call	0x1020	; 0x1020 <__divsf3>
     daa:	a7 01       	movw	r20, r14
     dac:	96 01       	movw	r18, r12
     dae:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__addsf3>
     db2:	6b 01       	movw	r12, r22
     db4:	7c 01       	movw	r14, r24
		X+=(Resive[6]-48)/1000.0;
     db6:	6e 81       	ldd	r22, Y+6	; 0x06
		
		Kd=X;
     db8:	70 e0       	ldi	r23, 0x00	; 0
     dba:	60 53       	subi	r22, 0x30	; 48
     dbc:	71 09       	sbc	r23, r1
     dbe:	07 2e       	mov	r0, r23
     dc0:	00 0c       	add	r0, r0
     dc2:	88 0b       	sbc	r24, r24
     dc4:	99 0b       	sbc	r25, r25
     dc6:	0e 94 ba 08 	call	0x1174	; 0x1174 <__floatsisf>
     dca:	20 e0       	ldi	r18, 0x00	; 0
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	4a e7       	ldi	r20, 0x7A	; 122
     dd0:	54 e4       	ldi	r21, 0x44	; 68
     dd2:	0e 94 10 08 	call	0x1020	; 0x1020 <__divsf3>
     dd6:	a7 01       	movw	r20, r14
     dd8:	96 01       	movw	r18, r12
     dda:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__addsf3>
     dde:	60 93 84 00 	sts	0x0084, r22	; 0x800084 <Kd>
     de2:	70 93 85 00 	sts	0x0085, r23	; 0x800085 <Kd+0x1>
     de6:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <Kd+0x2>
     dea:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <Kd+0x3>
		return;
     dee:	9f c0       	rjmp	.+318    	; 0xf2e <RecognizeMSG+0x47e>
	}
	
	if(Resive[0]=='S' && Resive[1]=='P')		// P za brzinsku regulaciju
     df0:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <Resive>
     df4:	83 35       	cpi	r24, 0x53	; 83
     df6:	09 f0       	breq	.+2      	; 0xdfa <RecognizeMSG+0x34a>
     df8:	64 c0       	rjmp	.+200    	; 0xec2 <RecognizeMSG+0x412>
     dfa:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <Resive+0x1>
     dfe:	80 35       	cpi	r24, 0x50	; 80
     e00:	09 f0       	breq	.+2      	; 0xe04 <RecognizeMSG+0x354>
     e02:	5f c0       	rjmp	.+190    	; 0xec2 <RecognizeMSG+0x412>
	{
		float X=0;
		
		TESTLED_ON;
     e04:	92 9a       	sbi	0x12, 2	; 18
     e06:	8f e1       	ldi	r24, 0x1F	; 31
     e08:	9e e4       	ldi	r25, 0x4E	; 78
     e0a:	01 97       	sbiw	r24, 0x01	; 1
     e0c:	f1 f7       	brne	.-4      	; 0xe0a <RecognizeMSG+0x35a>
     e0e:	00 c0       	rjmp	.+0      	; 0xe10 <RecognizeMSG+0x360>
     e10:	00 00       	nop
		_delay_ms(10);
		TESTLED_OFF;
     e12:	92 98       	cbi	0x12, 2	; 18
		
		X=(Resive[2]-48);
     e14:	cd e9       	ldi	r28, 0x9D	; 157
     e16:	d0 e0       	ldi	r29, 0x00	; 0
     e18:	6a 81       	ldd	r22, Y+2	; 0x02
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	60 53       	subi	r22, 0x30	; 48
     e1e:	71 09       	sbc	r23, r1
     e20:	07 2e       	mov	r0, r23
     e22:	00 0c       	add	r0, r0
     e24:	88 0b       	sbc	r24, r24
     e26:	99 0b       	sbc	r25, r25
     e28:	0e 94 ba 08 	call	0x1174	; 0x1174 <__floatsisf>
     e2c:	6b 01       	movw	r12, r22
     e2e:	7c 01       	movw	r14, r24
		X+=(Resive[4]-48)/10.0;
     e30:	6c 81       	ldd	r22, Y+4	; 0x04
     e32:	70 e0       	ldi	r23, 0x00	; 0
     e34:	60 53       	subi	r22, 0x30	; 48
     e36:	71 09       	sbc	r23, r1
     e38:	07 2e       	mov	r0, r23
     e3a:	00 0c       	add	r0, r0
     e3c:	88 0b       	sbc	r24, r24
     e3e:	99 0b       	sbc	r25, r25
     e40:	0e 94 ba 08 	call	0x1174	; 0x1174 <__floatsisf>
     e44:	20 e0       	ldi	r18, 0x00	; 0
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	40 e2       	ldi	r20, 0x20	; 32
     e4a:	51 e4       	ldi	r21, 0x41	; 65
     e4c:	0e 94 10 08 	call	0x1020	; 0x1020 <__divsf3>
     e50:	a7 01       	movw	r20, r14
     e52:	96 01       	movw	r18, r12
     e54:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__addsf3>
     e58:	6b 01       	movw	r12, r22
     e5a:	7c 01       	movw	r14, r24
		X+=(Resive[5]-48)/100.0;
     e5c:	6d 81       	ldd	r22, Y+5	; 0x05
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	60 53       	subi	r22, 0x30	; 48
     e62:	71 09       	sbc	r23, r1
     e64:	07 2e       	mov	r0, r23
     e66:	00 0c       	add	r0, r0
     e68:	88 0b       	sbc	r24, r24
     e6a:	99 0b       	sbc	r25, r25
     e6c:	0e 94 ba 08 	call	0x1174	; 0x1174 <__floatsisf>
     e70:	20 e0       	ldi	r18, 0x00	; 0
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	48 ec       	ldi	r20, 0xC8	; 200
     e76:	52 e4       	ldi	r21, 0x42	; 66
     e78:	0e 94 10 08 	call	0x1020	; 0x1020 <__divsf3>
     e7c:	a7 01       	movw	r20, r14
     e7e:	96 01       	movw	r18, r12
     e80:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__addsf3>
     e84:	6b 01       	movw	r12, r22
     e86:	7c 01       	movw	r14, r24
		X+=(Resive[6]-48)/1000.0;
     e88:	6e 81       	ldd	r22, Y+6	; 0x06
		
		Kpb=X;
     e8a:	70 e0       	ldi	r23, 0x00	; 0
     e8c:	60 53       	subi	r22, 0x30	; 48
     e8e:	71 09       	sbc	r23, r1
     e90:	07 2e       	mov	r0, r23
     e92:	00 0c       	add	r0, r0
     e94:	88 0b       	sbc	r24, r24
     e96:	99 0b       	sbc	r25, r25
     e98:	0e 94 ba 08 	call	0x1174	; 0x1174 <__floatsisf>
     e9c:	20 e0       	ldi	r18, 0x00	; 0
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	4a e7       	ldi	r20, 0x7A	; 122
     ea2:	54 e4       	ldi	r21, 0x44	; 68
     ea4:	0e 94 10 08 	call	0x1020	; 0x1020 <__divsf3>
     ea8:	a7 01       	movw	r20, r14
     eaa:	96 01       	movw	r18, r12
     eac:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__addsf3>
     eb0:	60 93 66 00 	sts	0x0066, r22	; 0x800066 <Kpb>
     eb4:	70 93 67 00 	sts	0x0067, r23	; 0x800067 <Kpb+0x1>
     eb8:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <Kpb+0x2>
     ebc:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <Kpb+0x3>
		
		return;
     ec0:	36 c0       	rjmp	.+108    	; 0xf2e <RecognizeMSG+0x47e>
	}
	
	if(Resive[0]=='S' && Resive[1]=='D')		// D za brzinsku regulaciju
     ec2:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <Resive>
     ec6:	83 35       	cpi	r24, 0x53	; 83
     ec8:	91 f5       	brne	.+100    	; 0xf2e <RecognizeMSG+0x47e>
     eca:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <Resive+0x1>
     ece:	84 34       	cpi	r24, 0x44	; 68
     ed0:	71 f5       	brne	.+92     	; 0xf2e <RecognizeMSG+0x47e>
	{
		int X=0;
		
		TESTLED_ON;
     ed2:	92 9a       	sbi	0x12, 2	; 18
     ed4:	8f e1       	ldi	r24, 0x1F	; 31
     ed6:	9e e4       	ldi	r25, 0x4E	; 78
     ed8:	01 97       	sbiw	r24, 0x01	; 1
     eda:	f1 f7       	brne	.-4      	; 0xed8 <RecognizeMSG+0x428>
     edc:	00 c0       	rjmp	.+0      	; 0xede <RecognizeMSG+0x42e>
     ede:	00 00       	nop
		_delay_ms(10);
		TESTLED_OFF;
     ee0:	92 98       	cbi	0x12, 2	; 18
		
		X=(Resive[2]-48)*100;
     ee2:	ed e9       	ldi	r30, 0x9D	; 157
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	82 81       	ldd	r24, Z+2	; 0x02
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	c0 97       	sbiw	r24, 0x30	; 48
     eec:	44 e6       	ldi	r20, 0x64	; 100
     eee:	48 9f       	mul	r20, r24
     ef0:	90 01       	movw	r18, r0
     ef2:	49 9f       	mul	r20, r25
     ef4:	30 0d       	add	r19, r0
     ef6:	11 24       	eor	r1, r1
		X+=(Resive[3]-48)*10;
     ef8:	93 81       	ldd	r25, Z+3	; 0x03
     efa:	89 2f       	mov	r24, r25
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	c0 97       	sbiw	r24, 0x30	; 48
     f00:	ac 01       	movw	r20, r24
     f02:	44 0f       	add	r20, r20
     f04:	55 1f       	adc	r21, r21
     f06:	88 0f       	add	r24, r24
     f08:	99 1f       	adc	r25, r25
     f0a:	88 0f       	add	r24, r24
     f0c:	99 1f       	adc	r25, r25
     f0e:	88 0f       	add	r24, r24
     f10:	99 1f       	adc	r25, r25
     f12:	84 0f       	add	r24, r20
     f14:	95 1f       	adc	r25, r21
     f16:	82 0f       	add	r24, r18
     f18:	93 1f       	adc	r25, r19
		X+=(Resive[4]-48);
     f1a:	24 81       	ldd	r18, Z+4	; 0x04
		//X+=(Resive[6]-48)/1000.0;
		PWMKocenje=X;
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	20 53       	subi	r18, 0x30	; 48
     f20:	31 09       	sbc	r19, r1
     f22:	82 0f       	add	r24, r18
     f24:	93 1f       	adc	r25, r19
     f26:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <PWMKocenje+0x1>
     f2a:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <PWMKocenje>
		
		return;
	}
     f2e:	df 91       	pop	r29
     f30:	cf 91       	pop	r28
     f32:	ff 90       	pop	r15
     f34:	ef 90       	pop	r14
     f36:	df 90       	pop	r13
     f38:	cf 90       	pop	r12
     f3a:	08 95       	ret

00000f3c <__subsf3>:
     f3c:	50 58       	subi	r21, 0x80	; 128

00000f3e <__addsf3>:
     f3e:	bb 27       	eor	r27, r27
     f40:	aa 27       	eor	r26, r26
     f42:	0e 94 b6 07 	call	0xf6c	; 0xf6c <__addsf3x>
     f46:	0c 94 30 09 	jmp	0x1260	; 0x1260 <__fp_round>
     f4a:	0e 94 22 09 	call	0x1244	; 0x1244 <__fp_pscA>
     f4e:	38 f0       	brcs	.+14     	; 0xf5e <__addsf3+0x20>
     f50:	0e 94 29 09 	call	0x1252	; 0x1252 <__fp_pscB>
     f54:	20 f0       	brcs	.+8      	; 0xf5e <__addsf3+0x20>
     f56:	39 f4       	brne	.+14     	; 0xf66 <__addsf3+0x28>
     f58:	9f 3f       	cpi	r25, 0xFF	; 255
     f5a:	19 f4       	brne	.+6      	; 0xf62 <__addsf3+0x24>
     f5c:	26 f4       	brtc	.+8      	; 0xf66 <__addsf3+0x28>
     f5e:	0c 94 1f 09 	jmp	0x123e	; 0x123e <__fp_nan>
     f62:	0e f4       	brtc	.+2      	; 0xf66 <__addsf3+0x28>
     f64:	e0 95       	com	r30
     f66:	e7 fb       	bst	r30, 7
     f68:	0c 94 19 09 	jmp	0x1232	; 0x1232 <__fp_inf>

00000f6c <__addsf3x>:
     f6c:	e9 2f       	mov	r30, r25
     f6e:	0e 94 41 09 	call	0x1282	; 0x1282 <__fp_split3>
     f72:	58 f3       	brcs	.-42     	; 0xf4a <__addsf3+0xc>
     f74:	ba 17       	cp	r27, r26
     f76:	62 07       	cpc	r22, r18
     f78:	73 07       	cpc	r23, r19
     f7a:	84 07       	cpc	r24, r20
     f7c:	95 07       	cpc	r25, r21
     f7e:	20 f0       	brcs	.+8      	; 0xf88 <__addsf3x+0x1c>
     f80:	79 f4       	brne	.+30     	; 0xfa0 <__addsf3x+0x34>
     f82:	a6 f5       	brtc	.+104    	; 0xfec <__addsf3x+0x80>
     f84:	0c 94 63 09 	jmp	0x12c6	; 0x12c6 <__fp_zero>
     f88:	0e f4       	brtc	.+2      	; 0xf8c <__addsf3x+0x20>
     f8a:	e0 95       	com	r30
     f8c:	0b 2e       	mov	r0, r27
     f8e:	ba 2f       	mov	r27, r26
     f90:	a0 2d       	mov	r26, r0
     f92:	0b 01       	movw	r0, r22
     f94:	b9 01       	movw	r22, r18
     f96:	90 01       	movw	r18, r0
     f98:	0c 01       	movw	r0, r24
     f9a:	ca 01       	movw	r24, r20
     f9c:	a0 01       	movw	r20, r0
     f9e:	11 24       	eor	r1, r1
     fa0:	ff 27       	eor	r31, r31
     fa2:	59 1b       	sub	r21, r25
     fa4:	99 f0       	breq	.+38     	; 0xfcc <__addsf3x+0x60>
     fa6:	59 3f       	cpi	r21, 0xF9	; 249
     fa8:	50 f4       	brcc	.+20     	; 0xfbe <__addsf3x+0x52>
     faa:	50 3e       	cpi	r21, 0xE0	; 224
     fac:	68 f1       	brcs	.+90     	; 0x1008 <__addsf3x+0x9c>
     fae:	1a 16       	cp	r1, r26
     fb0:	f0 40       	sbci	r31, 0x00	; 0
     fb2:	a2 2f       	mov	r26, r18
     fb4:	23 2f       	mov	r18, r19
     fb6:	34 2f       	mov	r19, r20
     fb8:	44 27       	eor	r20, r20
     fba:	58 5f       	subi	r21, 0xF8	; 248
     fbc:	f3 cf       	rjmp	.-26     	; 0xfa4 <__addsf3x+0x38>
     fbe:	46 95       	lsr	r20
     fc0:	37 95       	ror	r19
     fc2:	27 95       	ror	r18
     fc4:	a7 95       	ror	r26
     fc6:	f0 40       	sbci	r31, 0x00	; 0
     fc8:	53 95       	inc	r21
     fca:	c9 f7       	brne	.-14     	; 0xfbe <__addsf3x+0x52>
     fcc:	7e f4       	brtc	.+30     	; 0xfec <__addsf3x+0x80>
     fce:	1f 16       	cp	r1, r31
     fd0:	ba 0b       	sbc	r27, r26
     fd2:	62 0b       	sbc	r22, r18
     fd4:	73 0b       	sbc	r23, r19
     fd6:	84 0b       	sbc	r24, r20
     fd8:	ba f0       	brmi	.+46     	; 0x1008 <__addsf3x+0x9c>
     fda:	91 50       	subi	r25, 0x01	; 1
     fdc:	a1 f0       	breq	.+40     	; 0x1006 <__addsf3x+0x9a>
     fde:	ff 0f       	add	r31, r31
     fe0:	bb 1f       	adc	r27, r27
     fe2:	66 1f       	adc	r22, r22
     fe4:	77 1f       	adc	r23, r23
     fe6:	88 1f       	adc	r24, r24
     fe8:	c2 f7       	brpl	.-16     	; 0xfda <__addsf3x+0x6e>
     fea:	0e c0       	rjmp	.+28     	; 0x1008 <__addsf3x+0x9c>
     fec:	ba 0f       	add	r27, r26
     fee:	62 1f       	adc	r22, r18
     ff0:	73 1f       	adc	r23, r19
     ff2:	84 1f       	adc	r24, r20
     ff4:	48 f4       	brcc	.+18     	; 0x1008 <__addsf3x+0x9c>
     ff6:	87 95       	ror	r24
     ff8:	77 95       	ror	r23
     ffa:	67 95       	ror	r22
     ffc:	b7 95       	ror	r27
     ffe:	f7 95       	ror	r31
    1000:	9e 3f       	cpi	r25, 0xFE	; 254
    1002:	08 f0       	brcs	.+2      	; 0x1006 <__addsf3x+0x9a>
    1004:	b0 cf       	rjmp	.-160    	; 0xf66 <__addsf3+0x28>
    1006:	93 95       	inc	r25
    1008:	88 0f       	add	r24, r24
    100a:	08 f0       	brcs	.+2      	; 0x100e <__addsf3x+0xa2>
    100c:	99 27       	eor	r25, r25
    100e:	ee 0f       	add	r30, r30
    1010:	97 95       	ror	r25
    1012:	87 95       	ror	r24
    1014:	08 95       	ret

00001016 <__cmpsf2>:
    1016:	0e 94 f5 08 	call	0x11ea	; 0x11ea <__fp_cmp>
    101a:	08 f4       	brcc	.+2      	; 0x101e <__cmpsf2+0x8>
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	08 95       	ret

00001020 <__divsf3>:
    1020:	0e 94 24 08 	call	0x1048	; 0x1048 <__divsf3x>
    1024:	0c 94 30 09 	jmp	0x1260	; 0x1260 <__fp_round>
    1028:	0e 94 29 09 	call	0x1252	; 0x1252 <__fp_pscB>
    102c:	58 f0       	brcs	.+22     	; 0x1044 <__divsf3+0x24>
    102e:	0e 94 22 09 	call	0x1244	; 0x1244 <__fp_pscA>
    1032:	40 f0       	brcs	.+16     	; 0x1044 <__divsf3+0x24>
    1034:	29 f4       	brne	.+10     	; 0x1040 <__divsf3+0x20>
    1036:	5f 3f       	cpi	r21, 0xFF	; 255
    1038:	29 f0       	breq	.+10     	; 0x1044 <__divsf3+0x24>
    103a:	0c 94 19 09 	jmp	0x1232	; 0x1232 <__fp_inf>
    103e:	51 11       	cpse	r21, r1
    1040:	0c 94 64 09 	jmp	0x12c8	; 0x12c8 <__fp_szero>
    1044:	0c 94 1f 09 	jmp	0x123e	; 0x123e <__fp_nan>

00001048 <__divsf3x>:
    1048:	0e 94 41 09 	call	0x1282	; 0x1282 <__fp_split3>
    104c:	68 f3       	brcs	.-38     	; 0x1028 <__divsf3+0x8>

0000104e <__divsf3_pse>:
    104e:	99 23       	and	r25, r25
    1050:	b1 f3       	breq	.-20     	; 0x103e <__divsf3+0x1e>
    1052:	55 23       	and	r21, r21
    1054:	91 f3       	breq	.-28     	; 0x103a <__divsf3+0x1a>
    1056:	95 1b       	sub	r25, r21
    1058:	55 0b       	sbc	r21, r21
    105a:	bb 27       	eor	r27, r27
    105c:	aa 27       	eor	r26, r26
    105e:	62 17       	cp	r22, r18
    1060:	73 07       	cpc	r23, r19
    1062:	84 07       	cpc	r24, r20
    1064:	38 f0       	brcs	.+14     	; 0x1074 <__divsf3_pse+0x26>
    1066:	9f 5f       	subi	r25, 0xFF	; 255
    1068:	5f 4f       	sbci	r21, 0xFF	; 255
    106a:	22 0f       	add	r18, r18
    106c:	33 1f       	adc	r19, r19
    106e:	44 1f       	adc	r20, r20
    1070:	aa 1f       	adc	r26, r26
    1072:	a9 f3       	breq	.-22     	; 0x105e <__divsf3_pse+0x10>
    1074:	35 d0       	rcall	.+106    	; 0x10e0 <__divsf3_pse+0x92>
    1076:	0e 2e       	mov	r0, r30
    1078:	3a f0       	brmi	.+14     	; 0x1088 <__divsf3_pse+0x3a>
    107a:	e0 e8       	ldi	r30, 0x80	; 128
    107c:	32 d0       	rcall	.+100    	; 0x10e2 <__divsf3_pse+0x94>
    107e:	91 50       	subi	r25, 0x01	; 1
    1080:	50 40       	sbci	r21, 0x00	; 0
    1082:	e6 95       	lsr	r30
    1084:	00 1c       	adc	r0, r0
    1086:	ca f7       	brpl	.-14     	; 0x107a <__divsf3_pse+0x2c>
    1088:	2b d0       	rcall	.+86     	; 0x10e0 <__divsf3_pse+0x92>
    108a:	fe 2f       	mov	r31, r30
    108c:	29 d0       	rcall	.+82     	; 0x10e0 <__divsf3_pse+0x92>
    108e:	66 0f       	add	r22, r22
    1090:	77 1f       	adc	r23, r23
    1092:	88 1f       	adc	r24, r24
    1094:	bb 1f       	adc	r27, r27
    1096:	26 17       	cp	r18, r22
    1098:	37 07       	cpc	r19, r23
    109a:	48 07       	cpc	r20, r24
    109c:	ab 07       	cpc	r26, r27
    109e:	b0 e8       	ldi	r27, 0x80	; 128
    10a0:	09 f0       	breq	.+2      	; 0x10a4 <__divsf3_pse+0x56>
    10a2:	bb 0b       	sbc	r27, r27
    10a4:	80 2d       	mov	r24, r0
    10a6:	bf 01       	movw	r22, r30
    10a8:	ff 27       	eor	r31, r31
    10aa:	93 58       	subi	r25, 0x83	; 131
    10ac:	5f 4f       	sbci	r21, 0xFF	; 255
    10ae:	3a f0       	brmi	.+14     	; 0x10be <__divsf3_pse+0x70>
    10b0:	9e 3f       	cpi	r25, 0xFE	; 254
    10b2:	51 05       	cpc	r21, r1
    10b4:	78 f0       	brcs	.+30     	; 0x10d4 <__divsf3_pse+0x86>
    10b6:	0c 94 19 09 	jmp	0x1232	; 0x1232 <__fp_inf>
    10ba:	0c 94 64 09 	jmp	0x12c8	; 0x12c8 <__fp_szero>
    10be:	5f 3f       	cpi	r21, 0xFF	; 255
    10c0:	e4 f3       	brlt	.-8      	; 0x10ba <__divsf3_pse+0x6c>
    10c2:	98 3e       	cpi	r25, 0xE8	; 232
    10c4:	d4 f3       	brlt	.-12     	; 0x10ba <__divsf3_pse+0x6c>
    10c6:	86 95       	lsr	r24
    10c8:	77 95       	ror	r23
    10ca:	67 95       	ror	r22
    10cc:	b7 95       	ror	r27
    10ce:	f7 95       	ror	r31
    10d0:	9f 5f       	subi	r25, 0xFF	; 255
    10d2:	c9 f7       	brne	.-14     	; 0x10c6 <__divsf3_pse+0x78>
    10d4:	88 0f       	add	r24, r24
    10d6:	91 1d       	adc	r25, r1
    10d8:	96 95       	lsr	r25
    10da:	87 95       	ror	r24
    10dc:	97 f9       	bld	r25, 7
    10de:	08 95       	ret
    10e0:	e1 e0       	ldi	r30, 0x01	; 1
    10e2:	66 0f       	add	r22, r22
    10e4:	77 1f       	adc	r23, r23
    10e6:	88 1f       	adc	r24, r24
    10e8:	bb 1f       	adc	r27, r27
    10ea:	62 17       	cp	r22, r18
    10ec:	73 07       	cpc	r23, r19
    10ee:	84 07       	cpc	r24, r20
    10f0:	ba 07       	cpc	r27, r26
    10f2:	20 f0       	brcs	.+8      	; 0x10fc <__divsf3_pse+0xae>
    10f4:	62 1b       	sub	r22, r18
    10f6:	73 0b       	sbc	r23, r19
    10f8:	84 0b       	sbc	r24, r20
    10fa:	ba 0b       	sbc	r27, r26
    10fc:	ee 1f       	adc	r30, r30
    10fe:	88 f7       	brcc	.-30     	; 0x10e2 <__divsf3_pse+0x94>
    1100:	e0 95       	com	r30
    1102:	08 95       	ret

00001104 <__fixsfsi>:
    1104:	0e 94 89 08 	call	0x1112	; 0x1112 <__fixunssfsi>
    1108:	68 94       	set
    110a:	b1 11       	cpse	r27, r1
    110c:	0c 94 64 09 	jmp	0x12c8	; 0x12c8 <__fp_szero>
    1110:	08 95       	ret

00001112 <__fixunssfsi>:
    1112:	0e 94 49 09 	call	0x1292	; 0x1292 <__fp_splitA>
    1116:	88 f0       	brcs	.+34     	; 0x113a <__fixunssfsi+0x28>
    1118:	9f 57       	subi	r25, 0x7F	; 127
    111a:	98 f0       	brcs	.+38     	; 0x1142 <__fixunssfsi+0x30>
    111c:	b9 2f       	mov	r27, r25
    111e:	99 27       	eor	r25, r25
    1120:	b7 51       	subi	r27, 0x17	; 23
    1122:	b0 f0       	brcs	.+44     	; 0x1150 <__fixunssfsi+0x3e>
    1124:	e1 f0       	breq	.+56     	; 0x115e <__fixunssfsi+0x4c>
    1126:	66 0f       	add	r22, r22
    1128:	77 1f       	adc	r23, r23
    112a:	88 1f       	adc	r24, r24
    112c:	99 1f       	adc	r25, r25
    112e:	1a f0       	brmi	.+6      	; 0x1136 <__fixunssfsi+0x24>
    1130:	ba 95       	dec	r27
    1132:	c9 f7       	brne	.-14     	; 0x1126 <__fixunssfsi+0x14>
    1134:	14 c0       	rjmp	.+40     	; 0x115e <__fixunssfsi+0x4c>
    1136:	b1 30       	cpi	r27, 0x01	; 1
    1138:	91 f0       	breq	.+36     	; 0x115e <__fixunssfsi+0x4c>
    113a:	0e 94 63 09 	call	0x12c6	; 0x12c6 <__fp_zero>
    113e:	b1 e0       	ldi	r27, 0x01	; 1
    1140:	08 95       	ret
    1142:	0c 94 63 09 	jmp	0x12c6	; 0x12c6 <__fp_zero>
    1146:	67 2f       	mov	r22, r23
    1148:	78 2f       	mov	r23, r24
    114a:	88 27       	eor	r24, r24
    114c:	b8 5f       	subi	r27, 0xF8	; 248
    114e:	39 f0       	breq	.+14     	; 0x115e <__fixunssfsi+0x4c>
    1150:	b9 3f       	cpi	r27, 0xF9	; 249
    1152:	cc f3       	brlt	.-14     	; 0x1146 <__fixunssfsi+0x34>
    1154:	86 95       	lsr	r24
    1156:	77 95       	ror	r23
    1158:	67 95       	ror	r22
    115a:	b3 95       	inc	r27
    115c:	d9 f7       	brne	.-10     	; 0x1154 <__fixunssfsi+0x42>
    115e:	3e f4       	brtc	.+14     	; 0x116e <__fixunssfsi+0x5c>
    1160:	90 95       	com	r25
    1162:	80 95       	com	r24
    1164:	70 95       	com	r23
    1166:	61 95       	neg	r22
    1168:	7f 4f       	sbci	r23, 0xFF	; 255
    116a:	8f 4f       	sbci	r24, 0xFF	; 255
    116c:	9f 4f       	sbci	r25, 0xFF	; 255
    116e:	08 95       	ret

00001170 <__floatunsisf>:
    1170:	e8 94       	clt
    1172:	09 c0       	rjmp	.+18     	; 0x1186 <__floatsisf+0x12>

00001174 <__floatsisf>:
    1174:	97 fb       	bst	r25, 7
    1176:	3e f4       	brtc	.+14     	; 0x1186 <__floatsisf+0x12>
    1178:	90 95       	com	r25
    117a:	80 95       	com	r24
    117c:	70 95       	com	r23
    117e:	61 95       	neg	r22
    1180:	7f 4f       	sbci	r23, 0xFF	; 255
    1182:	8f 4f       	sbci	r24, 0xFF	; 255
    1184:	9f 4f       	sbci	r25, 0xFF	; 255
    1186:	99 23       	and	r25, r25
    1188:	a9 f0       	breq	.+42     	; 0x11b4 <__floatsisf+0x40>
    118a:	f9 2f       	mov	r31, r25
    118c:	96 e9       	ldi	r25, 0x96	; 150
    118e:	bb 27       	eor	r27, r27
    1190:	93 95       	inc	r25
    1192:	f6 95       	lsr	r31
    1194:	87 95       	ror	r24
    1196:	77 95       	ror	r23
    1198:	67 95       	ror	r22
    119a:	b7 95       	ror	r27
    119c:	f1 11       	cpse	r31, r1
    119e:	f8 cf       	rjmp	.-16     	; 0x1190 <__floatsisf+0x1c>
    11a0:	fa f4       	brpl	.+62     	; 0x11e0 <__floatsisf+0x6c>
    11a2:	bb 0f       	add	r27, r27
    11a4:	11 f4       	brne	.+4      	; 0x11aa <__floatsisf+0x36>
    11a6:	60 ff       	sbrs	r22, 0
    11a8:	1b c0       	rjmp	.+54     	; 0x11e0 <__floatsisf+0x6c>
    11aa:	6f 5f       	subi	r22, 0xFF	; 255
    11ac:	7f 4f       	sbci	r23, 0xFF	; 255
    11ae:	8f 4f       	sbci	r24, 0xFF	; 255
    11b0:	9f 4f       	sbci	r25, 0xFF	; 255
    11b2:	16 c0       	rjmp	.+44     	; 0x11e0 <__floatsisf+0x6c>
    11b4:	88 23       	and	r24, r24
    11b6:	11 f0       	breq	.+4      	; 0x11bc <__floatsisf+0x48>
    11b8:	96 e9       	ldi	r25, 0x96	; 150
    11ba:	11 c0       	rjmp	.+34     	; 0x11de <__floatsisf+0x6a>
    11bc:	77 23       	and	r23, r23
    11be:	21 f0       	breq	.+8      	; 0x11c8 <__floatsisf+0x54>
    11c0:	9e e8       	ldi	r25, 0x8E	; 142
    11c2:	87 2f       	mov	r24, r23
    11c4:	76 2f       	mov	r23, r22
    11c6:	05 c0       	rjmp	.+10     	; 0x11d2 <__floatsisf+0x5e>
    11c8:	66 23       	and	r22, r22
    11ca:	71 f0       	breq	.+28     	; 0x11e8 <__floatsisf+0x74>
    11cc:	96 e8       	ldi	r25, 0x86	; 134
    11ce:	86 2f       	mov	r24, r22
    11d0:	70 e0       	ldi	r23, 0x00	; 0
    11d2:	60 e0       	ldi	r22, 0x00	; 0
    11d4:	2a f0       	brmi	.+10     	; 0x11e0 <__floatsisf+0x6c>
    11d6:	9a 95       	dec	r25
    11d8:	66 0f       	add	r22, r22
    11da:	77 1f       	adc	r23, r23
    11dc:	88 1f       	adc	r24, r24
    11de:	da f7       	brpl	.-10     	; 0x11d6 <__floatsisf+0x62>
    11e0:	88 0f       	add	r24, r24
    11e2:	96 95       	lsr	r25
    11e4:	87 95       	ror	r24
    11e6:	97 f9       	bld	r25, 7
    11e8:	08 95       	ret

000011ea <__fp_cmp>:
    11ea:	99 0f       	add	r25, r25
    11ec:	00 08       	sbc	r0, r0
    11ee:	55 0f       	add	r21, r21
    11f0:	aa 0b       	sbc	r26, r26
    11f2:	e0 e8       	ldi	r30, 0x80	; 128
    11f4:	fe ef       	ldi	r31, 0xFE	; 254
    11f6:	16 16       	cp	r1, r22
    11f8:	17 06       	cpc	r1, r23
    11fa:	e8 07       	cpc	r30, r24
    11fc:	f9 07       	cpc	r31, r25
    11fe:	c0 f0       	brcs	.+48     	; 0x1230 <__fp_cmp+0x46>
    1200:	12 16       	cp	r1, r18
    1202:	13 06       	cpc	r1, r19
    1204:	e4 07       	cpc	r30, r20
    1206:	f5 07       	cpc	r31, r21
    1208:	98 f0       	brcs	.+38     	; 0x1230 <__fp_cmp+0x46>
    120a:	62 1b       	sub	r22, r18
    120c:	73 0b       	sbc	r23, r19
    120e:	84 0b       	sbc	r24, r20
    1210:	95 0b       	sbc	r25, r21
    1212:	39 f4       	brne	.+14     	; 0x1222 <__fp_cmp+0x38>
    1214:	0a 26       	eor	r0, r26
    1216:	61 f0       	breq	.+24     	; 0x1230 <__fp_cmp+0x46>
    1218:	23 2b       	or	r18, r19
    121a:	24 2b       	or	r18, r20
    121c:	25 2b       	or	r18, r21
    121e:	21 f4       	brne	.+8      	; 0x1228 <__fp_cmp+0x3e>
    1220:	08 95       	ret
    1222:	0a 26       	eor	r0, r26
    1224:	09 f4       	brne	.+2      	; 0x1228 <__fp_cmp+0x3e>
    1226:	a1 40       	sbci	r26, 0x01	; 1
    1228:	a6 95       	lsr	r26
    122a:	8f ef       	ldi	r24, 0xFF	; 255
    122c:	81 1d       	adc	r24, r1
    122e:	81 1d       	adc	r24, r1
    1230:	08 95       	ret

00001232 <__fp_inf>:
    1232:	97 f9       	bld	r25, 7
    1234:	9f 67       	ori	r25, 0x7F	; 127
    1236:	80 e8       	ldi	r24, 0x80	; 128
    1238:	70 e0       	ldi	r23, 0x00	; 0
    123a:	60 e0       	ldi	r22, 0x00	; 0
    123c:	08 95       	ret

0000123e <__fp_nan>:
    123e:	9f ef       	ldi	r25, 0xFF	; 255
    1240:	80 ec       	ldi	r24, 0xC0	; 192
    1242:	08 95       	ret

00001244 <__fp_pscA>:
    1244:	00 24       	eor	r0, r0
    1246:	0a 94       	dec	r0
    1248:	16 16       	cp	r1, r22
    124a:	17 06       	cpc	r1, r23
    124c:	18 06       	cpc	r1, r24
    124e:	09 06       	cpc	r0, r25
    1250:	08 95       	ret

00001252 <__fp_pscB>:
    1252:	00 24       	eor	r0, r0
    1254:	0a 94       	dec	r0
    1256:	12 16       	cp	r1, r18
    1258:	13 06       	cpc	r1, r19
    125a:	14 06       	cpc	r1, r20
    125c:	05 06       	cpc	r0, r21
    125e:	08 95       	ret

00001260 <__fp_round>:
    1260:	09 2e       	mov	r0, r25
    1262:	03 94       	inc	r0
    1264:	00 0c       	add	r0, r0
    1266:	11 f4       	brne	.+4      	; 0x126c <__fp_round+0xc>
    1268:	88 23       	and	r24, r24
    126a:	52 f0       	brmi	.+20     	; 0x1280 <__fp_round+0x20>
    126c:	bb 0f       	add	r27, r27
    126e:	40 f4       	brcc	.+16     	; 0x1280 <__fp_round+0x20>
    1270:	bf 2b       	or	r27, r31
    1272:	11 f4       	brne	.+4      	; 0x1278 <__fp_round+0x18>
    1274:	60 ff       	sbrs	r22, 0
    1276:	04 c0       	rjmp	.+8      	; 0x1280 <__fp_round+0x20>
    1278:	6f 5f       	subi	r22, 0xFF	; 255
    127a:	7f 4f       	sbci	r23, 0xFF	; 255
    127c:	8f 4f       	sbci	r24, 0xFF	; 255
    127e:	9f 4f       	sbci	r25, 0xFF	; 255
    1280:	08 95       	ret

00001282 <__fp_split3>:
    1282:	57 fd       	sbrc	r21, 7
    1284:	90 58       	subi	r25, 0x80	; 128
    1286:	44 0f       	add	r20, r20
    1288:	55 1f       	adc	r21, r21
    128a:	59 f0       	breq	.+22     	; 0x12a2 <__fp_splitA+0x10>
    128c:	5f 3f       	cpi	r21, 0xFF	; 255
    128e:	71 f0       	breq	.+28     	; 0x12ac <__fp_splitA+0x1a>
    1290:	47 95       	ror	r20

00001292 <__fp_splitA>:
    1292:	88 0f       	add	r24, r24
    1294:	97 fb       	bst	r25, 7
    1296:	99 1f       	adc	r25, r25
    1298:	61 f0       	breq	.+24     	; 0x12b2 <__fp_splitA+0x20>
    129a:	9f 3f       	cpi	r25, 0xFF	; 255
    129c:	79 f0       	breq	.+30     	; 0x12bc <__fp_splitA+0x2a>
    129e:	87 95       	ror	r24
    12a0:	08 95       	ret
    12a2:	12 16       	cp	r1, r18
    12a4:	13 06       	cpc	r1, r19
    12a6:	14 06       	cpc	r1, r20
    12a8:	55 1f       	adc	r21, r21
    12aa:	f2 cf       	rjmp	.-28     	; 0x1290 <__fp_split3+0xe>
    12ac:	46 95       	lsr	r20
    12ae:	f1 df       	rcall	.-30     	; 0x1292 <__fp_splitA>
    12b0:	08 c0       	rjmp	.+16     	; 0x12c2 <__fp_splitA+0x30>
    12b2:	16 16       	cp	r1, r22
    12b4:	17 06       	cpc	r1, r23
    12b6:	18 06       	cpc	r1, r24
    12b8:	99 1f       	adc	r25, r25
    12ba:	f1 cf       	rjmp	.-30     	; 0x129e <__fp_splitA+0xc>
    12bc:	86 95       	lsr	r24
    12be:	71 05       	cpc	r23, r1
    12c0:	61 05       	cpc	r22, r1
    12c2:	08 94       	sec
    12c4:	08 95       	ret

000012c6 <__fp_zero>:
    12c6:	e8 94       	clt

000012c8 <__fp_szero>:
    12c8:	bb 27       	eor	r27, r27
    12ca:	66 27       	eor	r22, r22
    12cc:	77 27       	eor	r23, r23
    12ce:	cb 01       	movw	r24, r22
    12d0:	97 f9       	bld	r25, 7
    12d2:	08 95       	ret

000012d4 <__gesf2>:
    12d4:	0e 94 f5 08 	call	0x11ea	; 0x11ea <__fp_cmp>
    12d8:	08 f4       	brcc	.+2      	; 0x12dc <__gesf2+0x8>
    12da:	8f ef       	ldi	r24, 0xFF	; 255
    12dc:	08 95       	ret

000012de <__mulsf3>:
    12de:	0e 94 82 09 	call	0x1304	; 0x1304 <__mulsf3x>
    12e2:	0c 94 30 09 	jmp	0x1260	; 0x1260 <__fp_round>
    12e6:	0e 94 22 09 	call	0x1244	; 0x1244 <__fp_pscA>
    12ea:	38 f0       	brcs	.+14     	; 0x12fa <__mulsf3+0x1c>
    12ec:	0e 94 29 09 	call	0x1252	; 0x1252 <__fp_pscB>
    12f0:	20 f0       	brcs	.+8      	; 0x12fa <__mulsf3+0x1c>
    12f2:	95 23       	and	r25, r21
    12f4:	11 f0       	breq	.+4      	; 0x12fa <__mulsf3+0x1c>
    12f6:	0c 94 19 09 	jmp	0x1232	; 0x1232 <__fp_inf>
    12fa:	0c 94 1f 09 	jmp	0x123e	; 0x123e <__fp_nan>
    12fe:	11 24       	eor	r1, r1
    1300:	0c 94 64 09 	jmp	0x12c8	; 0x12c8 <__fp_szero>

00001304 <__mulsf3x>:
    1304:	0e 94 41 09 	call	0x1282	; 0x1282 <__fp_split3>
    1308:	70 f3       	brcs	.-36     	; 0x12e6 <__mulsf3+0x8>

0000130a <__mulsf3_pse>:
    130a:	95 9f       	mul	r25, r21
    130c:	c1 f3       	breq	.-16     	; 0x12fe <__mulsf3+0x20>
    130e:	95 0f       	add	r25, r21
    1310:	50 e0       	ldi	r21, 0x00	; 0
    1312:	55 1f       	adc	r21, r21
    1314:	62 9f       	mul	r22, r18
    1316:	f0 01       	movw	r30, r0
    1318:	72 9f       	mul	r23, r18
    131a:	bb 27       	eor	r27, r27
    131c:	f0 0d       	add	r31, r0
    131e:	b1 1d       	adc	r27, r1
    1320:	63 9f       	mul	r22, r19
    1322:	aa 27       	eor	r26, r26
    1324:	f0 0d       	add	r31, r0
    1326:	b1 1d       	adc	r27, r1
    1328:	aa 1f       	adc	r26, r26
    132a:	64 9f       	mul	r22, r20
    132c:	66 27       	eor	r22, r22
    132e:	b0 0d       	add	r27, r0
    1330:	a1 1d       	adc	r26, r1
    1332:	66 1f       	adc	r22, r22
    1334:	82 9f       	mul	r24, r18
    1336:	22 27       	eor	r18, r18
    1338:	b0 0d       	add	r27, r0
    133a:	a1 1d       	adc	r26, r1
    133c:	62 1f       	adc	r22, r18
    133e:	73 9f       	mul	r23, r19
    1340:	b0 0d       	add	r27, r0
    1342:	a1 1d       	adc	r26, r1
    1344:	62 1f       	adc	r22, r18
    1346:	83 9f       	mul	r24, r19
    1348:	a0 0d       	add	r26, r0
    134a:	61 1d       	adc	r22, r1
    134c:	22 1f       	adc	r18, r18
    134e:	74 9f       	mul	r23, r20
    1350:	33 27       	eor	r19, r19
    1352:	a0 0d       	add	r26, r0
    1354:	61 1d       	adc	r22, r1
    1356:	23 1f       	adc	r18, r19
    1358:	84 9f       	mul	r24, r20
    135a:	60 0d       	add	r22, r0
    135c:	21 1d       	adc	r18, r1
    135e:	82 2f       	mov	r24, r18
    1360:	76 2f       	mov	r23, r22
    1362:	6a 2f       	mov	r22, r26
    1364:	11 24       	eor	r1, r1
    1366:	9f 57       	subi	r25, 0x7F	; 127
    1368:	50 40       	sbci	r21, 0x00	; 0
    136a:	9a f0       	brmi	.+38     	; 0x1392 <__mulsf3_pse+0x88>
    136c:	f1 f0       	breq	.+60     	; 0x13aa <__mulsf3_pse+0xa0>
    136e:	88 23       	and	r24, r24
    1370:	4a f0       	brmi	.+18     	; 0x1384 <__mulsf3_pse+0x7a>
    1372:	ee 0f       	add	r30, r30
    1374:	ff 1f       	adc	r31, r31
    1376:	bb 1f       	adc	r27, r27
    1378:	66 1f       	adc	r22, r22
    137a:	77 1f       	adc	r23, r23
    137c:	88 1f       	adc	r24, r24
    137e:	91 50       	subi	r25, 0x01	; 1
    1380:	50 40       	sbci	r21, 0x00	; 0
    1382:	a9 f7       	brne	.-22     	; 0x136e <__mulsf3_pse+0x64>
    1384:	9e 3f       	cpi	r25, 0xFE	; 254
    1386:	51 05       	cpc	r21, r1
    1388:	80 f0       	brcs	.+32     	; 0x13aa <__mulsf3_pse+0xa0>
    138a:	0c 94 19 09 	jmp	0x1232	; 0x1232 <__fp_inf>
    138e:	0c 94 64 09 	jmp	0x12c8	; 0x12c8 <__fp_szero>
    1392:	5f 3f       	cpi	r21, 0xFF	; 255
    1394:	e4 f3       	brlt	.-8      	; 0x138e <__mulsf3_pse+0x84>
    1396:	98 3e       	cpi	r25, 0xE8	; 232
    1398:	d4 f3       	brlt	.-12     	; 0x138e <__mulsf3_pse+0x84>
    139a:	86 95       	lsr	r24
    139c:	77 95       	ror	r23
    139e:	67 95       	ror	r22
    13a0:	b7 95       	ror	r27
    13a2:	f7 95       	ror	r31
    13a4:	e7 95       	ror	r30
    13a6:	9f 5f       	subi	r25, 0xFF	; 255
    13a8:	c1 f7       	brne	.-16     	; 0x139a <__mulsf3_pse+0x90>
    13aa:	fe 2b       	or	r31, r30
    13ac:	88 0f       	add	r24, r24
    13ae:	91 1d       	adc	r25, r1
    13b0:	96 95       	lsr	r25
    13b2:	87 95       	ror	r24
    13b4:	97 f9       	bld	r25, 7
    13b6:	08 95       	ret

000013b8 <_exit>:
    13b8:	f8 94       	cli

000013ba <__stop_program>:
    13ba:	ff cf       	rjmp	.-2      	; 0x13ba <__stop_program>
